import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';

const InsuranceModal = ({ 
    isOpen, 
    onClose, 
    insurance, 
    onSave, 
    mode = 'add' 
}) => {
    const { user } = useAuth();
    const [formData, setFormData] = useState({
        provider: '',
        policyNumber: '',
        groupNumber: '',
        policyHolder: '',
        relationship: 'self',
        startDate: '',
        endDate: '',
        coverageType: 'health',
        coverageDetails: '',
        contactPhone: '',
        documentFile: null
    });
    const [errors, setErrors] = useState({});
    
    // Initialize form data when editing existing insurance
    useEffect(() => {
        if (mode === 'edit' && insurance) {
            setFormData({
                provider: insurance.provider || '',
                policyNumber: insurance.policyNumber || '',
                groupNumber: insurance.groupNumber || '',
                policyHolder: insurance.policyHolder || '',
                relationship: insurance.relationship || 'self',
                startDate: insurance.startDate || '',
                endDate: insurance.endDate || '',
                coverageType: insurance.coverageType || 'health',
                coverageDetails: insurance.coverageDetails || '',
                contactPhone: insurance.contactPhone || '',
                documentFile: null // Don't populate file for security/privacy
            });
        }
    }, [mode, insurance]);
    
    // Handle form input changes
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
        
        // Clear error for this field if it exists
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: null
            }));
        }
    };
    
    // Handle file input changes
    const handleFileChange = (e) => {
        setFormData(prev => ({
            ...prev,
            documentFile: e.target.files[0] || null
        }));
        
        // Clear error for this field if it exists
        if (errors.documentFile) {
            setErrors(prev => ({
                ...prev,
                documentFile: null
            }));
        }
    };
    
    // Validate form
    const validateForm = () => {
        const newErrors = {};
        
        if (!formData.provider.trim()) {
            newErrors.provider = 'Insurance provider is required';
        }
        
        if (!formData.policyNumber.trim()) {
            newErrors.policyNumber = 'Policy number is required';
        }
        
        if (!formData.policyHolder.trim()) {
            newErrors.policyHolder = 'Policy holder name is required';
        }
        
        if (!formData.startDate) {
            newErrors.startDate = 'Start date is required';
        }
        
        if (formData.startDate && formData.endDate && new Date(formData.startDate) > new Date(formData.endDate)) {
            newErrors.endDate = 'End date must be after start date';
        }
        
        if (!formData.contactPhone.trim()) {
            newErrors.contactPhone = 'Contact phone is required';
        } else if (!/^\d{10}$/.test(formData.contactPhone.replace(/\D/g, ''))) {
            newErrors.contactPhone = 'Please enter a valid 10-digit phone number';
        }
        
        // Only require document file for new insurance, not when editing
        if (mode === 'add' && !formData.documentFile) {
            newErrors.documentFile = 'Insurance card or document is required';
        }
        
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };
    
    // Handle form submission
    const handleSubmit = (e) => {
        e.preventDefault();
        
        if (validateForm()) {
            // Create insurance object
            const insuranceData = {
                ...formData,
                id: mode === 'edit' && insurance ? insurance.id : Date.now().toString(), // In a real app, this would be generated by the server
                documentUrl: mode === 'edit' && insurance && !formData.documentFile ? insurance.documentUrl : null
            };
            
            // Call the onSave function passed from parent
            onSave(insuranceData, formData.documentFile);
            
            // Log HIPAA event
            logHIPAAEvent(`User ${user.id} ${mode === 'add' ? 'added' : 'updated'} insurance information`);
            
            // Close modal
            onClose();
        }
    };
    
    // Format phone number as user types
    const formatPhoneNumber = (value) => {
        const phoneNumber = value.replace(/\D/g, '');
        
        if (phoneNumber.length <= 3) {
            return phoneNumber;
        } else if (phoneNumber.length <= 6) {
            return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
        } else {
            return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;
        }
    };
    
    // Handle phone input changes with formatting
    const handlePhoneChange = (e) => {
        const formattedValue = formatPhoneNumber(e.target.value);
        setFormData(prev => ({
            ...prev,
            contactPhone: formattedValue
        }));
        
        // Clear error for this field if it exists
        if (errors.contactPhone) {
            setErrors(prev => ({
                ...prev,
                contactPhone: null
            }));
        }
    };
    
    // HIPAA logging
    const logHIPAAEvent = (event) => {
        console.log(`HIPAA Log: ${event}`);
        // In a production environment, this would be sent to a secure logging service
    };
    
    if (!isOpen) return null;
    
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                <div className="p-6">
                    <div className="flex justify-between items-start">
                        <h2 className="text-xl font-bold mb-4">
                            {mode === 'add' ? 'Add Insurance Information' : 'Edit Insurance Information'}
                        </h2>
                        <button 
                            onClick={onClose}
                            className="text-gray-500 hover:text-gray-700"
                        >
                            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    
                    <form onSubmit={handleSubmit} className="mt-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="col-span-1 md:col-span-2">
                                <label htmlFor="provider" className="block text-sm font-medium text-gray-700 mb-1">
                                    Insurance Provider*
                                </label>
                                <input
                                    type="text"
                                    id="provider"
                                    name="provider"
                                    value={formData.provider}
                                    onChange={handleInputChange}
                                    className={`w-full p-2 border rounded ${errors.provider ? 'border-red-500' : 'border-gray-300'}`}
                                />
                                {errors.provider && (
                                    <p className="text-red-500 text-xs mt-1">{errors.provider}</p>
                                )}
                            </div>
                            
                            <div>
                                <label htmlFor="policyNumber" className="block text-sm font-medium text-gray-700 mb-1">
                                    Policy Number*
                                </label>
                                <input
                                    type="text"
                                    id="policyNumber"
                                    name="policyNumber"
                                    value={formData.policyNumber}
                                    onChange={handleInputChange}
                                    className={`w-full p-2 border rounded ${errors.policyNumber ? 'border-red-500' : 'border-gray-300'}`}
                                />
                                {errors.policyNumber && (
                                    <p className="text-red-500 text-xs mt-1">{errors.policyNumber}</p>
                                )}
                            </div>
                            
                            <div>
                                <label htmlFor="groupNumber" className="block text-sm font-medium text-gray-700 mb-1">
                                    Group Number
                                </label>
                                <input
                                    type="text"
                                    id="groupNumber"
                                    name="groupNumber"
                                    value={formData.groupNumber}
                                    onChange={handleInputChange}
                                    className="w-full p-2 border rounded border-gray-300"
                                />
                            </div>
                            
                            <div>
                                <label htmlFor="policyHolder" className="block text-sm font-medium text-gray-700 mb-1">
                                    Policy Holder Name*
                                </label>
                                <input
                                    type="text"
                                    id="policyHolder"
                                    name="policyHolder"
                                    value={formData.policyHolder}
                                    onChange={handleInputChange}
                                    className={`w-full p-2 border rounded ${errors.policyHolder ? 'border-red-500' : 'border-gray-300'}`}
                                />
                                {errors.policyHolder && (
                                    <p className="text-red-500 text-xs mt-1">{errors.policyHolder}</p>
                                )}
                            </div>
                            
                            <div>
                                <label htmlFor="relationship" className="block text-sm font-medium text-gray-700 mb-1">
                                    Relationship to Policy Holder
                                </label>
                                <select
                                    id="relationship"
                                    name="relationship"
                                    value={formData.relationship}
                                    onChange={handleInputChange}
                                    className="w-full p-2 border rounded border-gray-300"
                                >
                                    <option value="self">Self</option>
                                    <option value="spouse">Spouse</option>
                                    <option value="child">Child</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                            
                            <div>
                                <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">
                                    Coverage Start Date*
                                </label>
                                <input
                                    type="date"
                                    id="startDate"
                                    name="startDate"
                                    value={formData.startDate}
                                    onChange={handleInputChange}
                                    className={`w-full p-2 border rounded ${errors.startDate ? 'border-red-500' : 'border-gray-300'}`}
                                />
                                {errors.startDate && (
                                    <p className="text-red-500 text-xs mt-1">{errors.startDate}</p>
                                )}
                            </div>
                            
                            <div>
                                <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 mb-1">
                                    Coverage End Date
                                </label>
                                <input
                                    type="date"
                                    id="endDate"
                                    name="endDate"
                                    value={formData.endDate}
                                    onChange={handleInputChange}
                                    className={`w-full p-2 border rounded ${errors.endDate ? 'border-red-500' : 'border-gray-300'}`}
                                />
                                {errors.endDate && (
                                    <p className="text-red-500 text-xs mt-1">{errors.endDate}</p>
                                )}
                            </div>
                            
                            <div>
                                <label htmlFor="coverageType" className="block text-sm font-medium text-gray-700 mb-1">
                                    Coverage Type
                                </label>
                                <select
                                    id="coverageType"
                                    name="coverageType"
                                    value={formData.coverageType}
                                    onChange={handleInputChange}
                                    className="w-full p-2 border rounded border-gray-300"
                                >
                                    <option value="health">Health</option>
                                    <option value="dental">Dental</option>
                                    <option value="vision">Vision</option>
                                    <option value="prescription">Prescription</option>
                                    <option value="comprehensive">Comprehensive</option>
                                </select>
                            </div>
                            
                            <div>
                                <label htmlFor="contactPhone" className="block text-sm font-medium text-gray-700 mb-1">
                                    Insurance Contact Phone*
                                </label>
                                <input
                                    type="text"
                                    id="contactPhone"
                                    name="contactPhone"
                                    value={formData.contactPhone}
                                    onChange={handlePhoneChange}
                                    placeholder="(123) 456-7890"
                                    className={`w-full p-2 border rounded ${errors.contactPhone ? 'border-red-500' : 'border-gray-300'}`}
                                />
                                {errors.contactPhone && (
                                    <p className="text-red-500 text-xs mt-1">{errors.contactPhone}</p>
                                )}
                            </div>
                            
                            <div className="col-span-1 md:col-span-2">
                                <label htmlFor="coverageDetails" className="block text-sm font-medium text-gray-700 mb-1">
                                    Coverage Details
                                </label>
                                <textarea
                                    id="coverageDetails"
                                    name="coverageDetails"
                                    value={formData.coverageDetails}
                                    onChange={handleInputChange}
                                    rows="3"
                                    className="w-full p-2 border rounded border-gray-300"
                                    placeholder="Enter any additional coverage details, co-pays, deductibles, etc."
                                ></textarea>
                            </div>
                            
                            <div className="col-span-1 md:col-span-2">
                                <label htmlFor="documentFile" className="block text-sm font-medium text-gray-700 mb-1">
                                    Insurance Card/Document {mode === 'add' ? '*' : '(Optional)'}
                                </label>
                                <input
                                    type="file"
                                    id="documentFile"
                                    name="documentFile"
                                    onChange={handleFileChange}
                                    className={`w-full p-2 border rounded ${errors.documentFile ? 'border-red-500' : 'border-gray-300'}`}
                                    accept=".pdf,.jpg,.jpeg,.png"
                                />
                                {errors.documentFile && (
                                    <p className="text-red-500 text-xs mt-1">{errors.documentFile}</p>
                                )}
                                <p className="text-xs text-gray-500 mt-1">
                                    Upload a scan or photo of your insurance card (PDF, JPG, PNG)
                                </p>
                                
                                {mode === 'edit' && insurance && insurance.documentUrl && (
                                    <div className="mt-2">
                                        <p className="text-sm text-gray-600">Current document: 
                                            <a 
                                                href={insurance.documentUrl} 
                                                target="_blank" 
                                                rel="noopener noreferrer"
                                                className="ml-1 text-blue-600 hover:text-blue-800"
                                                onClick={() => logHIPAAEvent(`User ${user.id} viewed insurance document for insurance ID ${insurance.id}`)}
                                            >
                                                View Document
                                            </a>
                                        </p>
                                    </div>
                                )}
                            </div>
                        </div>
                        
                        <div className="flex justify-end space-x-3 mt-6">
                            <button
                                type="button"
                                onClick={onClose}
                                className="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400"
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                            >
                                {mode === 'add' ? 'Add Insurance' : 'Update Insurance'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default InsuranceModal; 