import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';

const PaymentMethods = ({ 
    paymentMethods, 
    onAddPaymentMethod, 
    onEditPaymentMethod, 
    onDeletePaymentMethod, 
    onSelectPaymentMethod 
}) => {
    const { user } = useAuth();
    const [showAddForm, setShowAddForm] = useState(false);
    const [showEditForm, setShowEditForm] = useState(false);
    const [selectedMethod, setSelectedMethod] = useState(null);
    const [formData, setFormData] = useState({
        type: 'credit_card',
        cardholderName: '',
        cardNumber: '',
        expiryMonth: '',
        expiryYear: '',
        cvv: '',
        billingAddress: '',
        isDefault: false
    });
    
    // Handle form input changes
    const handleInputChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };
    
    // Handle add payment method form submission
    const handleAddSubmit = (e) => {
        e.preventDefault();
        
        // Format card number for display (mask all but last 4 digits)
        const maskedCardNumber = formData.cardNumber.slice(-4).padStart(formData.cardNumber.length, '*');
        
        // Create new payment method object
        const newPaymentMethod = {
            id: Date.now().toString(), // In a real app, this would be generated by the server
            type: formData.type,
            cardholderName: formData.cardholderName,
            cardNumber: maskedCardNumber,
            expiryMonth: formData.expiryMonth,
            expiryYear: formData.expiryYear,
            billingAddress: formData.billingAddress,
            isDefault: formData.isDefault
        };
        
        // Call the onAddPaymentMethod function passed from parent
        onAddPaymentMethod(newPaymentMethod);
        
        // Reset form and hide it
        setFormData({
            type: 'credit_card',
            cardholderName: '',
            cardNumber: '',
            expiryMonth: '',
            expiryYear: '',
            cvv: '',
            billingAddress: '',
            isDefault: false
        });
        setShowAddForm(false);
        
        // Log HIPAA event
        logHIPAAEvent(`User ${user.id} added a new payment method`);
    };
    
    // Handle edit payment method form submission
    const handleEditSubmit = (e) => {
        e.preventDefault();
        
        // Update payment method
        const updatedPaymentMethod = {
            ...selectedMethod,
            cardholderName: formData.cardholderName,
            expiryMonth: formData.expiryMonth,
            expiryYear: formData.expiryYear,
            billingAddress: formData.billingAddress,
            isDefault: formData.isDefault
        };
        
        // If card number was changed (not empty), update it with masked version
        if (formData.cardNumber) {
            updatedPaymentMethod.cardNumber = formData.cardNumber.slice(-4).padStart(formData.cardNumber.length, '*');
        }
        
        // Call the onEditPaymentMethod function passed from parent
        onEditPaymentMethod(updatedPaymentMethod);
        
        // Reset form and hide it
        setSelectedMethod(null);
        setFormData({
            type: 'credit_card',
            cardholderName: '',
            cardNumber: '',
            expiryMonth: '',
            expiryYear: '',
            cvv: '',
            billingAddress: '',
            isDefault: false
        });
        setShowEditForm(false);
        
        // Log HIPAA event
        logHIPAAEvent(`User ${user.id} updated payment method ${selectedMethod.id}`);
    };
    
    // Handle delete payment method
    const handleDelete = (paymentMethod) => {
        if (window.confirm('Are you sure you want to delete this payment method?')) {
            onDeletePaymentMethod(paymentMethod.id);
            
            // Log HIPAA event
            logHIPAAEvent(`User ${user.id} deleted payment method ${paymentMethod.id}`);
        }
    };
    
    // Handle edit button click
    const handleEditClick = (paymentMethod) => {
        setSelectedMethod(paymentMethod);
        setFormData({
            type: paymentMethod.type,
            cardholderName: paymentMethod.cardholderName,
            cardNumber: '', // Don't populate card number for security
            expiryMonth: paymentMethod.expiryMonth,
            expiryYear: paymentMethod.expiryYear,
            cvv: '', // Don't populate CVV for security
            billingAddress: paymentMethod.billingAddress,
            isDefault: paymentMethod.isDefault
        });
        setShowEditForm(true);
    };
    
    // Get card type icon based on card number
    const getCardTypeIcon = (cardNumber) => {
        // This is a simplified version. In a real app, you would use a more robust method
        if (cardNumber.startsWith('4')) {
            return 'visa';
        } else if (cardNumber.startsWith('5')) {
            return 'mastercard';
        } else if (cardNumber.startsWith('3')) {
            return 'amex';
        } else if (cardNumber.startsWith('6')) {
            return 'discover';
        } else {
            return 'generic';
        }
    };
    
    // HIPAA logging
    const logHIPAAEvent = (event) => {
        console.log(`HIPAA Log: ${event}`);
        // In a production environment, this would be sent to a secure logging service
    };
    
    // Generate years for expiry dropdown
    const generateYears = () => {
        const years = [];
        const currentYear = new Date().getFullYear();
        for (let i = 0; i < 20; i++) {
            years.push(currentYear + i);
        }
        return years;
    };
    
    return (
        <div className="bg-white shadow rounded-lg overflow-hidden">
            <div className="p-4 border-b border-gray-200 flex justify-between items-center">
                <h2 className="text-lg font-semibold">Payment Methods</h2>
                <button
                    onClick={() => setShowAddForm(true)}
                    className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                >
                    Add Payment Method
                </button>
            </div>
            
            {paymentMethods && paymentMethods.length > 0 ? (
                <div className="divide-y divide-gray-200">
                    {paymentMethods.map((method) => (
                        <div key={method.id} className="p-4 hover:bg-gray-50">
                            <div className="flex justify-between items-center">
                                <div className="flex items-center">
                                    <div className="mr-4">
                                        {method.type === 'credit_card' && (
                                            <div className="w-12 h-8 bg-gray-200 rounded flex items-center justify-center">
                                                {getCardTypeIcon(method.cardNumber) === 'visa' && (
                                                    <span className="text-blue-600 font-bold text-sm">VISA</span>
                                                )}
                                                {getCardTypeIcon(method.cardNumber) === 'mastercard' && (
                                                    <span className="text-red-600 font-bold text-sm">MC</span>
                                                )}
                                                {getCardTypeIcon(method.cardNumber) === 'amex' && (
                                                    <span className="text-blue-800 font-bold text-sm">AMEX</span>
                                                )}
                                                {getCardTypeIcon(method.cardNumber) === 'discover' && (
                                                    <span className="text-orange-600 font-bold text-sm">DISC</span>
                                                )}
                                                {getCardTypeIcon(method.cardNumber) === 'generic' && (
                                                    <span className="text-gray-600 font-bold text-sm">CARD</span>
                                                )}
                                            </div>
                                        )}
                                        {method.type === 'bank_account' && (
                                            <div className="w-12 h-8 bg-gray-200 rounded flex items-center justify-center">
                                                <span className="text-gray-600 font-bold text-sm">BANK</span>
                                            </div>
                                        )}
                                    </div>
                                    <div>
                                        <div className="font-medium">
                                            {method.type === 'credit_card' ? 'Credit Card' : 'Bank Account'} 
                                            {method.isDefault && (
                                                <span className="ml-2 px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded-full">
                                                    Default
                                                </span>
                                            )}
                                        </div>
                                        <div className="text-sm text-gray-600">
                                            {method.cardholderName} â€¢ {method.cardNumber}
                                        </div>
                                        <div className="text-sm text-gray-500">
                                            Expires: {method.expiryMonth}/{method.expiryYear}
                                        </div>
                                    </div>
                                </div>
                                <div className="flex space-x-2">
                                    <button
                                        onClick={() => {
                                            onSelectPaymentMethod(method);
                                            logHIPAAEvent(`User ${user.id} selected payment method ${method.id}`);
                                        }}
                                        className="text-blue-600 hover:text-blue-900"
                                    >
                                        Select
                                    </button>
                                    <button
                                        onClick={() => handleEditClick(method)}
                                        className="text-indigo-600 hover:text-indigo-900"
                                    >
                                        Edit
                                    </button>
                                    <button
                                        onClick={() => handleDelete(method)}
                                        className="text-red-600 hover:text-red-900"
                                    >
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            ) : (
                <div className="p-6 text-center">
                    <p className="text-gray-500">No payment methods found. Add a payment method to get started.</p>
                </div>
            )}
            
            {/* Add Payment Method Form */}
            {showAddForm && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
                        <div className="p-6">
                            <div className="flex justify-between items-start">
                                <h2 className="text-xl font-bold mb-4">Add Payment Method</h2>
                                <button 
                                    onClick={() => setShowAddForm(false)}
                                    className="text-gray-500 hover:text-gray-700"
                                >
                                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            
                            <form onSubmit={handleAddSubmit} className="mt-4">
                                <div className="mb-4">
                                    <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">
                                        Payment Type
                                    </label>
                                    <select
                                        id="type"
                                        name="type"
                                        value={formData.type}
                                        onChange={handleInputChange}
                                        className="w-full p-2 border rounded"
                                        required
                                    >
                                        <option value="credit_card">Credit Card</option>
                                        <option value="bank_account">Bank Account</option>
                                    </select>
                                </div>
                                
                                <div className="mb-4">
                                    <label htmlFor="cardholderName" className="block text-sm font-medium text-gray-700 mb-1">
                                        {formData.type === 'credit_card' ? 'Cardholder Name' : 'Account Holder Name'}
                                    </label>
                                    <input
                                        type="text"
                                        id="cardholderName"
                                        name="cardholderName"
                                        value={formData.cardholderName}
                                        onChange={handleInputChange}
                                        className="w-full p-2 border rounded"
                                        required
                                    />
                                </div>
                                
                                {formData.type === 'credit_card' && (
                                    <>
                                        <div className="mb-4">
                                            <label htmlFor="cardNumber" className="block text-sm font-medium text-gray-700 mb-1">
                                                Card Number
                                            </label>
                                            <input
                                                type="text"
                                                id="cardNumber"
                                                name="cardNumber"
                                                value={formData.cardNumber}
                                                onChange={handleInputChange}
                                                className="w-full p-2 border rounded"
                                                placeholder="â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢"
                                                maxLength="16"
                                                required
                                            />
                                        </div>
                                        
                                        <div className="grid grid-cols-3 gap-4 mb-4">
                                            <div>
                                                <label htmlFor="expiryMonth" className="block text-sm font-medium text-gray-700 mb-1">
                                                    Expiry Month
                                                </label>
                                                <select
                                                    id="expiryMonth"
                                                    name="expiryMonth"
                                                    value={formData.expiryMonth}
                                                    onChange={handleInputChange}
                                                    className="w-full p-2 border rounded"
                                                    required
                                                >
                                                    <option value="">Month</option>
                                                    {Array.from({ length: 12 }, (_, i) => {
                                                        const month = i + 1;
                                                        return (
                                                            <option key={month} value={month.toString().padStart(2, '0')}>
                                                                {month.toString().padStart(2, '0')}
                                                            </option>
                                                        );
                                                    })}
                                                </select>
                                            </div>
                                            <div>
                                                <label htmlFor="expiryYear" className="block text-sm font-medium text-gray-700 mb-1">
                                                    Expiry Year
                                                </label>
                                                <select
                                                    id="expiryYear"
                                                    name="expiryYear"
                                                    value={formData.expiryYear}
                                                    onChange={handleInputChange}
                                                    className="w-full p-2 border rounded"
                                                    required
                                                >
                                                    <option value="">Year</option>
                                                    {generateYears().map(year => (
                                                        <option key={year} value={year}>
                                                            {year}
                                                        </option>
                                                    ))}
                                                </select>
                                            </div>
                                            <div>
                                                <label htmlFor="cvv" className="block text-sm font-medium text-gray-700 mb-1">
                                                    CVV
                                                </label>
                                                <input
                                                    type="text"
                                                    id="cvv"
                                                    name="cvv"
                                                    value={formData.cvv}
                                                    onChange={handleInputChange}
                                                    className="w-full p-2 border rounded"
                                                    placeholder="â€¢â€¢â€¢"
                                                    maxLength="4"
                                                    required
                                                />
                                            </div>
                                        </div>
                                    </>
                                )}
                                
                                {formData.type === 'bank_account' && (
                                    <>
                                        <div className="mb-4">
                                            <label htmlFor="accountNumber" className="block text-sm font-medium text-gray-700 mb-1">
                                                Account Number
                                            </label>
                                            <input
                                                type="text"
                                                id="accountNumber"
                                                name="cardNumber" // Reusing cardNumber field for simplicity
                                                value={formData.cardNumber}
                                                onChange={handleInputChange}
                                                className="w-full p-2 border rounded"
                                                required
                                            />
                                        </div>
                                        
                                        <div className="mb-4">
                                            <label htmlFor="routingNumber" className="block text-sm font-medium text-gray-700 mb-1">
                                                Routing Number
                                            </label>
                                            <input
                                                type="text"
                                                id="routingNumber"
                                                name="routingNumber"
                                                value={formData.routingNumber}
                                                onChange={handleInputChange}
                                                className="w-full p-2 border rounded"
                                                required
                                            />
                                        </div>
                                    </>
                                )}
                                
                                <div className="mb-4">
                                    <label htmlFor="billingAddress" className="block text-sm font-medium text-gray-700 mb-1">
                                        Billing Address
                                    </label>
                                    <textarea
                                        id="billingAddress"
                                        name="billingAddress"
                                        value={formData.billingAddress}
                                        onChange={handleInputChange}
                                        rows="3"
                                        className="w-full p-2 border rounded"
                                        required
                                    ></textarea>
                                </div>
                                
                                <div className="mb-4">
                                    <div className="flex items-center">
                                        <input
                                            type="checkbox"
                                            id="isDefault"
                                            name="isDefault"
                                            checked={formData.isDefault}
                                            onChange={handleInputChange}
                                            className="h-4 w-4 text-blue-600 border-gray-300 rounded"
                                        />
                                        <label htmlFor="isDefault" className="ml-2 block text-sm text-gray-700">
                                            Set as default payment method
                                        </label>
                                    </div>
                                </div>
                                
                                <div className="flex justify-end space-x-3 mt-6">
                                    <button
                                        type="button"
                                        onClick={() => setShowAddForm(false)}
                                        className="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400"
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        type="submit"
                                        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                                    >
                                        Add Payment Method
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            )}
            
            {/* Edit Payment Method Form */}
            {showEditForm && selectedMethod && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
                    <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
                        <div className="p-6">
                            <div className="flex justify-between items-start">
                                <h2 className="text-xl font-bold mb-4">Edit Payment Method</h2>
                                <button 
                                    onClick={() => {
                                        setShowEditForm(false);
                                        setSelectedMethod(null);
                                    }}
                                    className="text-gray-500 hover:text-gray-700"
                                >
                                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            
                            <form onSubmit={handleEditSubmit} className="mt-4">
                                <div className="mb-4">
                                    <label htmlFor="editCardholderName" className="block text-sm font-medium text-gray-700 mb-1">
                                        {selectedMethod.type === 'credit_card' ? 'Cardholder Name' : 'Account Holder Name'}
                                    </label>
                                    <input
                                        type="text"
                                        id="editCardholderName"
                                        name="cardholderName"
                                        value={formData.cardholderName}
                                        onChange={handleInputChange}
                                        className="w-full p-2 border rounded"
                                        required
                                    />
                                </div>
                                
                                {selectedMethod.type === 'credit_card' && (
                                    <>
                                        <div className="mb-4">
                                            <label htmlFor="editCardNumber" className="block text-sm font-medium text-gray-700 mb-1">
                                                Card Number (leave blank to keep current)
                                            </label>
                                            <input
                                                type="text"
                                                id="editCardNumber"
                                                name="cardNumber"
                                                value={formData.cardNumber}
                                                onChange={handleInputChange}
                                                className="w-full p-2 border rounded"
                                                placeholder="â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢ â€¢â€¢â€¢â€¢"
                                                maxLength="16"
                                            />
                                            <p className="text-xs text-gray-500 mt-1">Current: {selectedMethod.cardNumber}</p>
                                        </div>
                                        
                                        <div className="grid grid-cols-2 gap-4 mb-4">
                                            <div>
                                                <label htmlFor="editExpiryMonth" className="block text-sm font-medium text-gray-700 mb-1">
                                                    Expiry Month
                                                </label>
                                                <select
                                                    id="editExpiryMonth"
                                                    name="expiryMonth"
                                                    value={formData.expiryMonth}
                                                    onChange={handleInputChange}
                                                    className="w-full p-2 border rounded"
                                                    required
                                                >
                                                    <option value="">Month</option>
                                                    {Array.from({ length: 12 }, (_, i) => {
                                                        const month = i + 1;
                                                        return (
                                                            <option key={month} value={month.toString().padStart(2, '0')}>
                                                                {month.toString().padStart(2, '0')}
                                                            </option>
                                                        );
                                                    })}
                                                </select>
                                            </div>
                                            <div>
                                                <label htmlFor="editExpiryYear" className="block text-sm font-medium text-gray-700 mb-1">
                                                    Expiry Year
                                                </label>
                                                <select
                                                    id="editExpiryYear"
                                                    name="expiryYear"
                                                    value={formData.expiryYear}
                                                    onChange={handleInputChange}
                                                    className="w-full p-2 border rounded"
                                                    required
                                                >
                                                    <option value="">Year</option>
                                                    {generateYears().map(year => (
                                                        <option key={year} value={year}>
                                                            {year}
                                                        </option>
                                                    ))}
                                                </select>
                                            </div>
                                        </div>
                                    </>
                                )}
                                
                                <div className="mb-4">
                                    <label htmlFor="editBillingAddress" className="block text-sm font-medium text-gray-700 mb-1">
                                        Billing Address
                                    </label>
                                    <textarea
                                        id="editBillingAddress"
                                        name="billingAddress"
                                        value={formData.billingAddress}
                                        onChange={handleInputChange}
                                        rows="3"
                                        className="w-full p-2 border rounded"
                                        required
                                    ></textarea>
                                </div>
                                
                                <div className="mb-4">
                                    <div className="flex items-center">
                                        <input
                                            type="checkbox"
                                            id="editIsDefault"
                                            name="isDefault"
                                            checked={formData.isDefault}
                                            onChange={handleInputChange}
                                            className="h-4 w-4 text-blue-600 border-gray-300 rounded"
                                        />
                                        <label htmlFor="editIsDefault" className="ml-2 block text-sm text-gray-700">
                                            Set as default payment method
                                        </label>
                                    </div>
                                </div>
                                
                                <div className="flex justify-end space-x-3 mt-6">
                                    <button
                                        type="button"
                                        onClick={() => {
                                            setShowEditForm(false);
                                            setSelectedMethod(null);
                                        }}
                                        className="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400"
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        type="submit"
                                        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                                    >
                                        Update Payment Method
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default PaymentMethods; 