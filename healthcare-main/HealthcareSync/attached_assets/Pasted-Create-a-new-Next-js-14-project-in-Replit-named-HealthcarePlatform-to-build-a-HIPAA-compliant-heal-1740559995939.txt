Create a new Next.js 14 project in Replit named "HealthcarePlatform" to build a HIPAA-compliant healthcare management system for small medical practices. Use TypeScript for type safety, Prisma with PostgreSQL for database management, NextAuth.js for secure authentication, Shadcn/UI for modern UI components, and TailwindCSS for styling. Ensure the platform is professional, bug-free, and runs smoothly on port 3000 in Replit's live preview, avoiding common deployment issues like static file serving errors or port conflicts.
Design the platform with a clean, professional look featuring a white background, a teal (#14B8A6) and gray color scheme, and the Inter font for readability. Create a unique, market-ready design with calming healthcare colors—teal for primary actions, green for secondary highlights, light gray for backgrounds, and red for logout or errors—using card-based layouts, sidebar navigation, and subtle animations for smoothness.
Set up the project with a clear directory structure including folders for the app, components, libraries, Prisma schema, public assets, and tests, along with documentation. Configure the environment to handle all necessary dependencies automatically, ensure proper error handling for a smooth user experience, and provide recovery mechanisms if something goes wrong, such as retrying failed operations or showing user-friendly error messages.
Core Features
Authentication
Create a secure login and registration system using NextAuth.js, supporting role-based access for Admin, Staff, and Patient roles, as seen in the images with "admin" and "staff" labels. Include a login page with username and password fields, a "Login" button, and a "Register" tab, styled with Shadcn/UI components. Add a registration page for new users to sign up, ensuring password hashing and secure session management. Prevent unauthorized access with role checks and display a logout option in the dashboard. Implement multi-factor authentication as an optional security feature for sensitive roles.
Dashboard and Navigation
Build a dashboard layout with a sidebar on the left, containing navigation links for Dashboard, Patients, Appointments, and Claims, matching the icons and layout in the images (e.g., clipboard for claims, user for patients, heartbeat for dashboard). Include a main content area showing overview stats like Total Patients, Total Appointments, and Total Claims, presented in card-style components with icons (e.g., user, calendar, document). Add an interactive chart for Monthly Assessment Trends with labels for Low Risk, Medium Risk, and High Risk, styled professionally to attract potential customers. Ensure the dashboard updates in real-time for authorized users based on their roles, with a logout button at the bottom of the sidebar.
Patient Management
Develop a system for managing patient data, allowing Admin and Staff to create, read, update, and delete patient records. Include a patients page in the dashboard with a table listing patient details (name, DOB, gender) and a form for adding or editing patients, styled with Shadcn/UI. Ensure secure file uploads for medical documents, following HIPAA compliance with encryption and access controls, and integrate data fetching with efficient error handling. Add support for bulk patient import/export to facilitate data migration from legacy systems.
Appointment Scheduling
Create a system for booking, editing, and canceling appointments, accessible to Admin and Staff. Add an appointments page in the dashboard with a table showing appointment details (patient ID, doctor ID, date, status) and a form for scheduling new appointments, including real-time notifications for upcoming appointments. Use modern UI components and ensure smooth performance with retry logic for failed operations. Include calendar sync capabilities with common platforms (Google, Outlook) and implement offline appointment caching for network interruptions.
Claims Processing
Build a claims management system for Admin and Staff to submit, track, and update insurance claims. Include a claims page in the dashboard with a table listing claim details (patient ID, doctor ID, amount, status) and a form for submitting new claims, with basic error detection for invalid inputs. Ensure HIPAA-compliant data handling and secure API endpoints. Add document scanning capabilities for insurance cards and supporting documentation.
Enhanced Requirements
Accessibility Compliance
Implement WCAG 2.1 AA compliance throughout the platform to ensure accessibility for all users. Include proper semantic HTML, ARIA attributes where needed, keyboard navigation support for all interactive elements, and sufficient color contrast ratios (minimum 4.5:1 for normal text). Test with screen readers and provide alternative text for all non-decorative images. Add a skip-to-content link for keyboard users and ensure focus states are clearly visible. Document accessibility features in the platform's help section.
Data Migration Framework
Create utilities to facilitate data migration from common healthcare systems. Implement CSV and JSON import/export functionality for patient records, appointment histories, and billing information. Add data validation during import to prevent corruption and provide clear error messages for invalid data. Include a migration wizard in the admin panel with step-by-step guidance and validation checks. Add mappings for common data formats used in the healthcare industry.
Localization and Internationalization
Implement a localization framework using next-i18next to support multiple languages. Set up the platform with English as the default language but include infrastructure for adding additional languages. Create separate language files for all UI elements and ensure date, time, and currency formats adjust based on locale settings. Add a language selector in user preferences and respect browser language settings for first-time users. Ensure RTL (right-to-left) language support in the layout design.
Performance Optimization
Establish performance metrics and monitoring. Implement code splitting and lazy loading for non-critical components to improve initial load time (target under 2 seconds). Add Lighthouse performance testing in the CI pipeline with minimum score requirements. Use React Query for efficient data fetching with caching. Implement Server-Side Rendering (SSR) for critical pages and Static Site Generation (SSG) where applicable. Monitor and log client-side performance metrics (LCP, FID, CLS) and set up alerts for performance degradation.
Offline Capabilities
Add Progressive Web App (PWA) features to enable core functionality during internet disruptions. Implement service workers to cache essential assets and data. Create an offline mode that allows viewing of scheduled appointments and patient information. Implement a synchronization queue for changes made offline, with conflict resolution strategies when connectivity resumes. Provide clear visual indicators of offline status to users and auto-sync when connection is restored.
Mobile Optimization
Enhance responsive design with specific breakpoints and optimizations for mobile devices. Implement touch-friendly UI elements with appropriate sizing (minimum 44×44px touch targets). Create mobile-specific views for key workflows like appointment scheduling and patient check-in. Use responsive typography and flexible layouts that adapt to screen orientation changes. Implement swipe gestures for common actions on mobile devices. Test on various device sizes and ensure full functionality on tablets and smartphones.
User Feedback System
Add in-app mechanisms to collect user feedback. Implement a feedback widget accessible from all pages that allows users to submit suggestions, report issues, or rate their experience. Create an admin dashboard for reviewing and responding to feedback. Include contextual surveys at key moments (after completing tasks, when encountering errors). Set up an analytics pipeline to identify patterns in feedback and prioritize improvements.
Guided Onboarding
Develop an interactive onboarding experience for new users. Create role-specific tutorials that highlight key features relevant to Admin, Staff, and Patient users. Implement tooltips for complex UI elements and guided walkthroughs for common workflows. Add a persistent help center with searchable documentation, video tutorials, and FAQs. Create a practice mode with sample data for training purposes. Include a first-time setup wizard for administrators to configure the system.
Backup and Recovery
Implement automated backup procedures for all system data. Schedule daily database backups to secure cloud storage with encryption at rest. Create a point-in-time recovery system that allows administrators to restore data from specific backup points. Add a transaction log for all data modifications. Implement a disaster recovery protocol with documented steps for system restoration. Add data integrity checks during backups and provide administrators with visibility into backup status and history.
Analytics Integration
Set up comprehensive usage analytics to track platform performance and user behavior. Implement HIPAA-compliant analytics that anonymize personal health information. Create a dedicated analytics dashboard for administrators showing key metrics like active users, common workflows, error rates, and system performance. Add custom event tracking for critical user actions. Generate weekly/monthly reports on system usage and performance trends. Ensure all analytics respect user privacy settings and comply with healthcare regulations.
Error Handling and Recovery
Implement advanced error handling throughout the platform to ensure it's bug-free and recovers quickly from failures. Add centralized error utilities to handle API and UI errors gracefully, showing user-friendly messages like "Something Went Wrong—Try Again." Include retry logic for network or database failures, logging errors with detailed context (e.g., user, timestamp) for debugging, and error boundaries to prevent crashes. Provide loading states, fallbacks, and automatic recovery options to maintain a smooth user experience.
Security and Compliance
Ensure the platform meets HIPAA standards with secure session management, role-based access control, data encryption for sensitive information, and secure API endpoints. Add audit logs to track access to patient data, implement multi-factor authentication for added security, and ensure all data handling complies with healthcare regulations. Implement regular security scanning and vulnerability assessments. Create a compliance dashboard showing the system's adherence to regulatory requirements.
Technical Implementation
Database Models
Use Prisma to manage a PostgreSQL database with models for Users (with roles: Admin, Staff, Patient), Patients, Appointments, and Claims, ensuring relationships (e.g., patients linked to appointments, claims linked to patients). Include timestamps and unique identifiers for all records, and set up the database to sync automatically with Replit's environment. Implement database migrations and versioning for future updates.
Testing and Documentation
Add comprehensive tests for authentication, patient management, appointments, and claims using Jest and Supertest, ensuring bug-free operation. Create documentation in a setup guide file to explain how to install dependencies, configure the database, and troubleshoot common issues in Replit, including setting environment variables in Secrets and handling port 3000. Include automated accessibility testing in the CI pipeline. Create API documentation using Swagger/OpenAPI.
Replit-Specific Fixes
Address common Replit issues like the ENOENT error for static files by ensuring Next.js serves correctly on port 3000. Configure the project with a Replit-specific setup file to handle Prisma's libssl dependency, manage environment variables securely, and prevent port or resource conflicts. Recommend upgrading to the Hacker plan if needed for better performance and private Repls. Include detailed troubleshooting for Replit-specific deployment challenges.
Market Readiness
Ensure the platform is optimized for small medical practices, with intuitive navigation, real-time updates, and features like AI-driven health predictions (using OpenAI for symptom assessments) and secure file uploads for medical documents. Highlight key features visually in the dashboard and login pages to appeal to potential customers, focusing on efficiency, security, and patient care. Create a customizable branding system allowing practices to add their logo and colors without code changes.
After generating the project, output a detailed console summary of all implementations, save a setup guide in /docs/setup-guide.md with troubleshooting tips, and suggest next steps for expanding the platform (e.g., adding telemedicine, advanced analytics, or third-party integrations). Ensure all components are responsive, secure, and tested thoroughly, with smooth transitions and fast recovery from errors, making it ready for market deployment without future issues.
Run this prompt, monitor for any errors in the console, and provide instructions for any manual adjustments needed, such as setting up a PostgreSQL database in Secrets or installing additional dependencies if prompted