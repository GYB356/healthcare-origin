Desired Project Structure for HealthcareSync:
graphql
Copy
Edit
HealthcareSync/
  ├── backend/        # Backend (APIs, database, authentication, etc.)
  │   ├── src/
  │   │   ├── api/        # All API routes (e.g., user, patient, appointment)
  │   │   ├── lib/        # Database connections, auth utilities, and services
  │   │   ├── prisma/     # Prisma schema and migrations
  │   │   ├── utils/      # Reusable backend utilities (e.g., helpers, validation)
  │   ├── tests/        # Backend unit and integration tests
  │   ├── package.json  # Separate backend dependencies
  │   ├── tsconfig.json  # TypeScript config for backend
  │   └── .env          # Environment variables for backend (DB URL, JWT secret)
  
  ├── frontend/       # Frontend (UI/UX, client-side logic)
  │   ├── src/
  │   │   ├── components/ # Reusable UI components (e.g., buttons, modals)
  │   │   ├── pages/      # Next.js pages (auth, dashboard, etc.)
  │   │   ├── styles/     # TailwindCSS and global styles
  │   │   ├── hooks/      # Custom React hooks (for data fetching, state, etc.)
  ├── public/           # Static assets (images, fonts, etc.)
  │
  ├── package.json      # Frontend dependencies and scripts
  ├── tsconfig.json     # TypeScript config for frontend
  ├── README.md         # Project documentation
  ├── .gitignore        # Ignore node_modules, build artifacts, and sensitive files
  ├── scripts/          # Deployment or automation scripts (e.g., deployment scripts, migrations)
  └── .github/          # CI/CD workflows and configuration (GitHub Actions, etc.)
Prompt to Replit Assistant for Completing the Project:
Project Objective:

We are building a full-stack healthcare synchronization platform, HealthcareSync, which consists of a backend API (Node.js/TypeScript, Prisma, Express) and a frontend (Next.js, TailwindCSS, React). We want to establish a clear separation between the backend and frontend codebases while making sure everything is modular and scalable.

Please complete the following tasks:

Backend:
Set up the backend directory with the following structure:

graphql
Copy
Edit
backend/
  ├── src/
  │   ├── api/        # Implement API routes (authentication, patient CRUD, etc.)
  │   ├── lib/        # Set up reusable services and utilities (e.g., auth utilities)
  │   ├── prisma/     # Add the Prisma schema for the database models and migrations
  │   ├── utils/      # Reusable backend utilities (helpers, validation, etc.)
  ├── tests/          # Backend unit and integration tests (using Jest or Mocha)
Configure Prisma:

Set up Prisma with a database schema for managing patients, appointments, users, etc.
Generate and run Prisma migrations.
Set up API routes:

Implement RESTful routes for user authentication (login, register), patient management, appointment scheduling, etc.
Implement authentication:

Create authentication utilities (e.g., JWT token generation and validation).
Set up middleware for protected routes.
Add environment variables:

Create a .env file with necessary variables (e.g., DATABASE_URL, JWT_SECRET).
Set up testing:

Add unit and integration tests for backend routes and services.
Use a test framework like Jest or Mocha.
Install dependencies:

Install necessary backend dependencies in the backend/package.json.
Dependencies include express, prisma, jsonwebtoken, bcrypt, dotenv, etc.
Frontend:
Set up the frontend directory:

graphql
Copy
Edit
frontend/
  ├── src/
  │   ├── components/ # Create reusable UI components (buttons, modals, form inputs)
  │   ├── pages/      # Implement frontend pages (auth, dashboard, patient management)
  │   ├── styles/     # Set up TailwindCSS and global styles
  │   ├── hooks/      # Custom React hooks for data fetching, authentication
  ├── public/         # Static assets (images, fonts)
Next.js pages:

Set up the main pages such as login, registration, dashboard, and patient management.
UI Components:

Create reusable components (e.g., buttons, input fields, modals, tables).
Style them using TailwindCSS for a modern, responsive look.
Set up hooks:

Implement custom React hooks (e.g., useAuth, useFetch, useForm) for managing authentication and data fetching.
Set up authentication:

Implement login and registration pages.
Integrate JWT-based authentication with the backend API.
Install frontend dependencies:

Install the necessary dependencies in the frontend/package.json.
Dependencies include next, react, tailwindcss, axios for API calls, etc.
Deployment and CI/CD:
Set up deployment scripts:

Write deployment scripts for both frontend and backend (e.g., for Vercel, Heroku, or other platforms).
CI/CD configuration:

Set up GitHub Actions or any other CI/CD tool to automate testing and deployment.
Additional Guidelines:

Ensure that each component (backend and frontend) has its own package.json with the appropriate dependencies.
Make sure to keep backend and frontend dependencies separate.
Create clear documentation in the README.md file about setting up, running, and deploying the project.
Follow best practices for security (e.g., sanitizing inputs, validating data) and performance (e.g., lazy loading, caching).
Structure the project so that it is modular, maintainable, and scalable in the long term.
