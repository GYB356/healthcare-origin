"use strict";(()=>{var e={};e.id=504,e.ids=[504],e.modules={3524:e=>{e.exports=require("@prisma/client")},1649:e=>{e.exports=require("next-auth/react")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,r){return r in t?t[r]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,r)):"function"==typeof t&&"default"===r?t:void 0}}})},1725:(e,t,r)=>{r.r(t),r.d(t,{config:()=>f,default:()=>p,routeModule:()=>P});var a={};r.r(a),r.d(a,{default:()=>l});var n=r(1802),i=r(7153),s=r(6249),o=r(1649),d=r(3524);let u=new d.PrismaClient;async function l(e,t){let r=await (0,o.getSession)({req:e});if(!r)return t.status(401).json({error:"Unauthorized"});try{switch(e.method){case"GET":return await c(e,t,r);case"POST":return await m(e,t,r);default:return t.status(405).json({error:"Method not allowed"})}}catch(e){return console.error("Error handling appointment request:",e),t.status(500).json({error:"Internal server error"})}}async function c(e,t,r){let{role:a,id:n}=r.user,{start:i,end:s,doctorId:o,patientId:l,status:c}=e.query,m={};switch((i||s)&&(m.date={},i&&(m.date.gte=new Date(i)),s&&(m.date.lte=new Date(s))),c&&(m.status=c),a){case d.UserRole.PATIENT:m.patientId=n;break;case d.UserRole.DOCTOR:m.doctorId=n;break;case d.UserRole.NURSE:case d.UserRole.STAFF:case d.UserRole.ADMIN:o&&(m.doctorId=o),l&&(m.patientId=l);break;default:return t.status(403).json({error:"Forbidden"})}let p=await u.appointment.findMany({where:m,include:{patient:{select:{id:!0,name:!0,email:!0,image:!0}},doctor:{select:{id:!0,name:!0,email:!0,image:!0,department:!0,specialty:!0}}},orderBy:{date:"asc"}});return t.status(200).json(p)}async function m(e,t,r){let{role:a}=r.user;if(![d.UserRole.STAFF,d.UserRole.ADMIN,d.UserRole.DOCTOR].includes(a))return t.status(403).json({error:"Forbidden"});let{title:n,notes:i,date:s,startTime:o,endTime:l,patientId:c,doctorId:m,isVirtual:p,virtualLink:f}=e.body;if(!n||!s||!o||!l||!c||!m)return t.status(400).json({error:"Missing required fields"});let P=new Date(s),A=new Date(o),g=new Date(l);if(isNaN(P.getTime())||isNaN(A.getTime())||isNaN(g.getTime()))return t.status(400).json({error:"Invalid date or time format"});if(await u.appointment.findFirst({where:{doctorId:m,date:P,OR:[{AND:[{startTime:{lte:A}},{endTime:{gt:A}}]},{AND:[{startTime:{lt:g}},{endTime:{gte:g}}]}]}}))return t.status(409).json({error:"Scheduling conflict detected"});let T=await u.appointment.create({data:{title:n,notes:i,date:P,startTime:A,endTime:g,patientId:c,doctorId:m,isVirtual:p||!1,virtualLink:f,status:"SCHEDULED"},include:{patient:{select:{id:!0,name:!0,email:!0,image:!0}},doctor:{select:{id:!0,name:!0,email:!0,image:!0,department:!0,specialty:!0}}}});return t.status(201).json(T)}let p=(0,s.l)(a,"default"),f=(0,s.l)(a,"config"),P=new n.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/appointments",pathname:"/api/appointments",bundlePath:"",filename:""},userland:a})},7153:(e,t)=>{var r;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return r}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(r||(r={}))},1802:(e,t,r)=>{e.exports=r(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var r=t(t.s=1725);module.exports=r})();