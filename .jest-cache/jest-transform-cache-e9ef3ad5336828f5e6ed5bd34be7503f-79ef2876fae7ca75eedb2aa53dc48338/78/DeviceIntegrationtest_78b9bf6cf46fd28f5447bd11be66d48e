6c350b582d610173cb338e8594ca4aeb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _AuthContext = require("../../context/AuthContext");
var _DeviceIntegration = _interopRequireDefault(require("../../pages/DeviceIntegration"));
var _jsxRuntime = require("react/jsx-runtime");
const renderWithAuth = (ui, {
  providerProps,
  ...renderOptions
}) => {
  return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
    ...providerProps,
    children: ui
  }), renderOptions);
};
describe('DeviceIntegration Component', () => {
  test('renders DeviceIntegration component for authorized users', () => {
    const providerProps = {
      value: {
        user: {
          role: 'doctor'
        }
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DeviceIntegration.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Device Integration/i)).toBeInTheDocument();
    expect(_react2.screen.getByText(/Monitor medical device data/i)).toBeInTheDocument();
  });
  test('denies access for unauthorized users', () => {
    const providerProps = {
      value: {
        user: {
          role: 'guest'
        }
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DeviceIntegration.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Access Denied/i)).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfQXV0aENvbnRleHQiLCJfRGV2aWNlSW50ZWdyYXRpb24iLCJfanN4UnVudGltZSIsInJlbmRlcldpdGhBdXRoIiwidWkiLCJwcm92aWRlclByb3BzIiwicmVuZGVyT3B0aW9ucyIsInJlbmRlciIsImpzeCIsIkF1dGhDb250ZXh0IiwiUHJvdmlkZXIiLCJjaGlsZHJlbiIsImRlc2NyaWJlIiwidGVzdCIsInZhbHVlIiwidXNlciIsInJvbGUiLCJkZWZhdWx0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiXSwic291cmNlcyI6WyJEZXZpY2VJbnRlZ3JhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgQXV0aENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0F1dGhDb250ZXh0JztcbmltcG9ydCBEZXZpY2VJbnRlZ3JhdGlvbiBmcm9tICcuLi8uLi9wYWdlcy9EZXZpY2VJbnRlZ3JhdGlvbic7XG5cbmNvbnN0IHJlbmRlcldpdGhBdXRoID0gKHVpLCB7IHByb3ZpZGVyUHJvcHMsIC4uLnJlbmRlck9wdGlvbnMgfSkgPT4ge1xuICAgIHJldHVybiByZW5kZXIoXG4gICAgICAgIDxBdXRoQ29udGV4dC5Qcm92aWRlciB7Li4ucHJvdmlkZXJQcm9wc30+e3VpfTwvQXV0aENvbnRleHQuUHJvdmlkZXI+LFxuICAgICAgICByZW5kZXJPcHRpb25zXG4gICAgKTtcbn07XG5cbmRlc2NyaWJlKCdEZXZpY2VJbnRlZ3JhdGlvbiBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgncmVuZGVycyBEZXZpY2VJbnRlZ3JhdGlvbiBjb21wb25lbnQgZm9yIGF1dGhvcml6ZWQgdXNlcnMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyUHJvcHMgPSB7XG4gICAgICAgICAgICB2YWx1ZTogeyB1c2VyOiB7IHJvbGU6ICdkb2N0b3InIH0gfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVuZGVyV2l0aEF1dGgoPERldmljZUludGVncmF0aW9uIC8+LCB7IHByb3ZpZGVyUHJvcHMgfSk7XG5cbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL0RldmljZSBJbnRlZ3JhdGlvbi9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL01vbml0b3IgbWVkaWNhbCBkZXZpY2UgZGF0YS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RlbmllcyBhY2Nlc3MgZm9yIHVuYXV0aG9yaXplZCB1c2VycycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJQcm9wcyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB7IHVzZXI6IHsgcm9sZTogJ2d1ZXN0JyB9IH0sXG4gICAgICAgIH07XG4gICAgICAgIHJlbmRlcldpdGhBdXRoKDxEZXZpY2VJbnRlZ3JhdGlvbiAvPiwgeyBwcm92aWRlclByb3BzIH0pO1xuXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9BY2Nlc3MgRGVuaWVkL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xufSk7ICJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsa0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUE4RCxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFFOUQsTUFBTUssY0FBYyxHQUFHQSxDQUFDQyxFQUFFLEVBQUU7RUFBRUMsYUFBYTtFQUFFLEdBQUdDO0FBQWMsQ0FBQyxLQUFLO0VBQ2hFLE9BQU8sSUFBQUMsY0FBTSxlQUNULElBQUFMLFdBQUEsQ0FBQU0sR0FBQSxFQUFDUixZQUFBLENBQUFTLFdBQVcsQ0FBQ0MsUUFBUTtJQUFBLEdBQUtMLGFBQWE7SUFBQU0sUUFBQSxFQUFHUDtFQUFFLENBQXVCLENBQUMsRUFDcEVFLGFBQ0osQ0FBQztBQUNMLENBQUM7QUFFRE0sUUFBUSxDQUFDLDZCQUE2QixFQUFFLE1BQU07RUFDMUNDLElBQUksQ0FBQywwREFBMEQsRUFBRSxNQUFNO0lBQ25FLE1BQU1SLGFBQWEsR0FBRztNQUNsQlMsS0FBSyxFQUFFO1FBQUVDLElBQUksRUFBRTtVQUFFQyxJQUFJLEVBQUU7UUFBUztNQUFFO0lBQ3RDLENBQUM7SUFDRGIsY0FBYyxjQUFDLElBQUFELFdBQUEsQ0FBQU0sR0FBQSxFQUFDUCxrQkFBQSxDQUFBZ0IsT0FBaUIsSUFBRSxDQUFDLEVBQUU7TUFBRVo7SUFBYyxDQUFDLENBQUM7SUFFeERhLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ25FSCxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUNoRixDQUFDLENBQUM7RUFFRlIsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLE1BQU07SUFDL0MsTUFBTVIsYUFBYSxHQUFHO01BQ2xCUyxLQUFLLEVBQUU7UUFBRUMsSUFBSSxFQUFFO1VBQUVDLElBQUksRUFBRTtRQUFRO01BQUU7SUFDckMsQ0FBQztJQUNEYixjQUFjLGNBQUMsSUFBQUQsV0FBQSxDQUFBTSxHQUFBLEVBQUNQLGtCQUFBLENBQUFnQixPQUFpQixJQUFFLENBQUMsRUFBRTtNQUFFWjtJQUFjLENBQUMsQ0FBQztJQUV4RGEsTUFBTSxDQUFDQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDbEUsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119