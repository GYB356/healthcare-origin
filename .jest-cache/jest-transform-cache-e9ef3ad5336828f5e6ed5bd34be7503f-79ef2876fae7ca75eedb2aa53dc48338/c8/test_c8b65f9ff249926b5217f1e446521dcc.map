{"version":3,"names":["_express","_interopRequireDefault","require","_server","router","express","Router","post","req","res","userId","type","body","status","json","error","notification","message","data","id","Date","now","title","date","toISOString","io","to","emit","console","log","success","_default","exports","default"],"sources":["test.ts"],"sourcesContent":["import express from 'express';\nimport { io } from '../server';\n\nconst router = express.Router();\n\n// Endpoint to send a test notification\nrouter.post('/test-notification', (req, res) => {\n  try {\n    const { userId, type } = req.body;\n    \n    if (!userId || !type) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n    \n    // Create a test notification based on the type\n    const notification = {\n      type,\n      message: `Test ${type} notification from server`,\n      data: {\n        id: `test-${Date.now()}`,\n        title: `Test ${type} Title`,\n        status: 'pending',\n        date: new Date().toISOString(),\n      }\n    };\n    \n    // Emit the notification to the specific user\n    io.to(userId).emit('notification', notification);\n    \n    // Log the notification for debugging\n    console.log(`Test notification sent to user ${userId}:`, notification);\n    \n    return res.status(200).json({ success: true, notification });\n  } catch (error) {\n    console.error('Error sending test notification:', error);\n    return res.status(500).json({ error: 'Failed to send test notification' });\n  }\n});\n\n// Endpoint to handle direct socket test notifications\nrouter.post('/socket-test', (req, res) => {\n  try {\n    const { userId, notification } = req.body;\n    \n    if (!userId || !notification) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n    \n    // Emit the notification to the specific user\n    io.to(userId).emit('notification', notification);\n    \n    return res.status(200).json({ success: true });\n  } catch (error) {\n    console.error('Error handling socket test:', error);\n    return res.status(500).json({ error: 'Failed to handle socket test' });\n  }\n});\n\nexport default router; "],"mappings":";;;;;;;AAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAEA,MAAME,MAAM,GAAGC,gBAAO,CAACC,MAAM,CAAC,CAAC;;AAE/B;AACAF,MAAM,CAACG,IAAI,CAAC,oBAAoB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC9C,IAAI;IACF,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGH,GAAG,CAACI,IAAI;IAEjC,IAAI,CAACF,MAAM,IAAI,CAACC,IAAI,EAAE;MACpB,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA0B,CAAC,CAAC;IACnE;;IAEA;IACA,MAAMC,YAAY,GAAG;MACnBL,IAAI;MACJM,OAAO,EAAE,QAAQN,IAAI,2BAA2B;MAChDO,IAAI,EAAE;QACJC,EAAE,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACxBC,KAAK,EAAE,QAAQX,IAAI,QAAQ;QAC3BE,MAAM,EAAE,SAAS;QACjBU,IAAI,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;MAC/B;IACF,CAAC;;IAED;IACAC,UAAE,CAACC,EAAE,CAAChB,MAAM,CAAC,CAACiB,IAAI,CAAC,cAAc,EAAEX,YAAY,CAAC;;IAEhD;IACAY,OAAO,CAACC,GAAG,CAAC,kCAAkCnB,MAAM,GAAG,EAAEM,YAAY,CAAC;IAEtE,OAAOP,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEgB,OAAO,EAAE,IAAI;MAAEd;IAAa,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOD,KAAK,EAAE;IACda,OAAO,CAACb,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAON,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAmC,CAAC,CAAC;EAC5E;AACF,CAAC,CAAC;;AAEF;AACAX,MAAM,CAACG,IAAI,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACxC,IAAI;IACF,MAAM;MAAEC,MAAM;MAAEM;IAAa,CAAC,GAAGR,GAAG,CAACI,IAAI;IAEzC,IAAI,CAACF,MAAM,IAAI,CAACM,YAAY,EAAE;MAC5B,OAAOP,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA0B,CAAC,CAAC;IACnE;;IAEA;IACAU,UAAE,CAACC,EAAE,CAAChB,MAAM,CAAC,CAACiB,IAAI,CAAC,cAAc,EAAEX,YAAY,CAAC;IAEhD,OAAOP,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEgB,OAAO,EAAE;IAAK,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOf,KAAK,EAAE;IACda,OAAO,CAACb,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAON,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA+B,CAAC,CAAC;EACxE;AACF,CAAC,CAAC;AAAC,IAAAgB,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEY7B,MAAM","ignoreList":[]}