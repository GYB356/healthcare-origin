{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_AuthContext","_MedicalRecords","_jsxRuntime","renderWithAuth","ui","providerProps","renderOptions","render","jsx","AuthContext","Provider","children","describe","test","value","user","role","default","expect","screen","getByText","toBeInTheDocument","roles","forEach","unmount"],"sources":["MedicalRecords.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport { AuthContext } from '../../context/AuthContext';\nimport MedicalRecords from '../../pages/MedicalRecords';\n\nconst renderWithAuth = (ui, { providerProps, ...renderOptions }) => {\n    return render(\n        <AuthContext.Provider {...providerProps}>{ui}</AuthContext.Provider>,\n        renderOptions\n    );\n};\n\ndescribe('MedicalRecords Component', () => {\n    test('renders MedicalRecords component for authorized users', () => {\n        const providerProps = {\n            value: { user: { role: 'doctor' } },\n        };\n        renderWithAuth(<MedicalRecords />, { providerProps });\n\n        expect(screen.getByText(/Medical Records/i)).toBeInTheDocument();\n        expect(screen.getByText(/Access and manage patient medical records/i)).toBeInTheDocument();\n    });\n\n    test('denies access for unauthorized users', () => {\n        const providerProps = {\n            value: { user: { role: 'guest' } },\n        };\n        renderWithAuth(<MedicalRecords />, { providerProps });\n\n        expect(screen.getByText(/Access Denied/i)).toBeInTheDocument();\n    });\n\n    test('allows access for different authorized roles', () => {\n        const roles = ['patient', 'doctor', 'nurse', 'admin'];\n        roles.forEach(role => {\n            const providerProps = {\n                value: { user: { role } },\n            };\n            const { unmount } = renderWithAuth(<MedicalRecords />, { providerProps });\n            expect(screen.getByText(/Medical Records/i)).toBeInTheDocument();\n            unmount();\n        });\n    });\n}); "],"mappings":";;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAAwD,IAAAI,WAAA,GAAAJ,OAAA;AAExD,MAAMK,cAAc,GAAGA,CAACC,EAAE,EAAE;EAAEC,aAAa;EAAE,GAAGC;AAAc,CAAC,KAAK;EAChE,OAAO,IAAAC,cAAM,eACT,IAAAL,WAAA,CAAAM,GAAA,EAACR,YAAA,CAAAS,WAAW,CAACC,QAAQ;IAAA,GAAKL,aAAa;IAAAM,QAAA,EAAGP;EAAE,CAAuB,CAAC,EACpEE,aACJ,CAAC;AACL,CAAC;AAEDM,QAAQ,CAAC,0BAA0B,EAAE,MAAM;EACvCC,IAAI,CAAC,uDAAuD,EAAE,MAAM;IAChE,MAAMR,aAAa,GAAG;MAClBS,KAAK,EAAE;QAAEC,IAAI,EAAE;UAAEC,IAAI,EAAE;QAAS;MAAE;IACtC,CAAC;IACDb,cAAc,cAAC,IAAAD,WAAA,CAAAM,GAAA,EAACP,eAAA,CAAAgB,OAAc,IAAE,CAAC,EAAE;MAAEZ;IAAc,CAAC,CAAC;IAErDa,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;IAChEH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,4CAA4C,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC9F,CAAC,CAAC;EAEFR,IAAI,CAAC,sCAAsC,EAAE,MAAM;IAC/C,MAAMR,aAAa,GAAG;MAClBS,KAAK,EAAE;QAAEC,IAAI,EAAE;UAAEC,IAAI,EAAE;QAAQ;MAAE;IACrC,CAAC;IACDb,cAAc,cAAC,IAAAD,WAAA,CAAAM,GAAA,EAACP,eAAA,CAAAgB,OAAc,IAAE,CAAC,EAAE;MAAEZ;IAAc,CAAC,CAAC;IAErDa,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAClE,CAAC,CAAC;EAEFR,IAAI,CAAC,8CAA8C,EAAE,MAAM;IACvD,MAAMS,KAAK,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC;IACrDA,KAAK,CAACC,OAAO,CAACP,IAAI,IAAI;MAClB,MAAMX,aAAa,GAAG;QAClBS,KAAK,EAAE;UAAEC,IAAI,EAAE;YAAEC;UAAK;QAAE;MAC5B,CAAC;MACD,MAAM;QAAEQ;MAAQ,CAAC,GAAGrB,cAAc,cAAC,IAAAD,WAAA,CAAAM,GAAA,EAACP,eAAA,CAAAgB,OAAc,IAAE,CAAC,EAAE;QAAEZ;MAAc,CAAC,CAAC;MACzEa,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;MAChEG,OAAO,CAAC,CAAC;IACb,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]}