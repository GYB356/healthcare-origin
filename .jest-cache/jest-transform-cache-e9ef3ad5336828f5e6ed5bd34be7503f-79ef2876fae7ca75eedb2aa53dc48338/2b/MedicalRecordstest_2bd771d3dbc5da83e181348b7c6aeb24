7ee58a8264bfee7f61e46953e5eb881b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _AuthContext = require("../../context/AuthContext");
var _MedicalRecords = _interopRequireDefault(require("../../pages/MedicalRecords"));
var _jsxRuntime = require("react/jsx-runtime");
const renderWithAuth = (ui, {
  providerProps,
  ...renderOptions
}) => {
  return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
    ...providerProps,
    children: ui
  }), renderOptions);
};
describe('MedicalRecords Component', () => {
  test('renders MedicalRecords component for authorized users', () => {
    const providerProps = {
      value: {
        user: {
          role: 'doctor'
        }
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_MedicalRecords.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Medical Records/i)).toBeInTheDocument();
    expect(_react2.screen.getByText(/Access and manage patient medical records/i)).toBeInTheDocument();
  });
  test('denies access for unauthorized users', () => {
    const providerProps = {
      value: {
        user: {
          role: 'guest'
        }
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_MedicalRecords.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Access Denied/i)).toBeInTheDocument();
  });
  test('allows access for different authorized roles', () => {
    const roles = ['patient', 'doctor', 'nurse', 'admin'];
    roles.forEach(role => {
      const providerProps = {
        value: {
          user: {
            role
          }
        }
      };
      const {
        unmount
      } = renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_MedicalRecords.default, {}), {
        providerProps
      });
      expect(_react2.screen.getByText(/Medical Records/i)).toBeInTheDocument();
      unmount();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfQXV0aENvbnRleHQiLCJfTWVkaWNhbFJlY29yZHMiLCJfanN4UnVudGltZSIsInJlbmRlcldpdGhBdXRoIiwidWkiLCJwcm92aWRlclByb3BzIiwicmVuZGVyT3B0aW9ucyIsInJlbmRlciIsImpzeCIsIkF1dGhDb250ZXh0IiwiUHJvdmlkZXIiLCJjaGlsZHJlbiIsImRlc2NyaWJlIiwidGVzdCIsInZhbHVlIiwidXNlciIsInJvbGUiLCJkZWZhdWx0IiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJyb2xlcyIsImZvckVhY2giLCJ1bm1vdW50Il0sInNvdXJjZXMiOlsiTWVkaWNhbFJlY29yZHMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IEF1dGhDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9BdXRoQ29udGV4dCc7XG5pbXBvcnQgTWVkaWNhbFJlY29yZHMgZnJvbSAnLi4vLi4vcGFnZXMvTWVkaWNhbFJlY29yZHMnO1xuXG5jb25zdCByZW5kZXJXaXRoQXV0aCA9ICh1aSwgeyBwcm92aWRlclByb3BzLCAuLi5yZW5kZXJPcHRpb25zIH0pID0+IHtcbiAgICByZXR1cm4gcmVuZGVyKFxuICAgICAgICA8QXV0aENvbnRleHQuUHJvdmlkZXIgey4uLnByb3ZpZGVyUHJvcHN9Pnt1aX08L0F1dGhDb250ZXh0LlByb3ZpZGVyPixcbiAgICAgICAgcmVuZGVyT3B0aW9uc1xuICAgICk7XG59O1xuXG5kZXNjcmliZSgnTWVkaWNhbFJlY29yZHMgQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIHRlc3QoJ3JlbmRlcnMgTWVkaWNhbFJlY29yZHMgY29tcG9uZW50IGZvciBhdXRob3JpemVkIHVzZXJzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm92aWRlclByb3BzID0ge1xuICAgICAgICAgICAgdmFsdWU6IHsgdXNlcjogeyByb2xlOiAnZG9jdG9yJyB9IH0sXG4gICAgICAgIH07XG4gICAgICAgIHJlbmRlcldpdGhBdXRoKDxNZWRpY2FsUmVjb3JkcyAvPiwgeyBwcm92aWRlclByb3BzIH0pO1xuXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9NZWRpY2FsIFJlY29yZHMvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9BY2Nlc3MgYW5kIG1hbmFnZSBwYXRpZW50IG1lZGljYWwgcmVjb3Jkcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RlbmllcyBhY2Nlc3MgZm9yIHVuYXV0aG9yaXplZCB1c2VycycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJQcm9wcyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB7IHVzZXI6IHsgcm9sZTogJ2d1ZXN0JyB9IH0sXG4gICAgICAgIH07XG4gICAgICAgIHJlbmRlcldpdGhBdXRoKDxNZWRpY2FsUmVjb3JkcyAvPiwgeyBwcm92aWRlclByb3BzIH0pO1xuXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9BY2Nlc3MgRGVuaWVkL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnYWxsb3dzIGFjY2VzcyBmb3IgZGlmZmVyZW50IGF1dGhvcml6ZWQgcm9sZXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJvbGVzID0gWydwYXRpZW50JywgJ2RvY3RvcicsICdudXJzZScsICdhZG1pbiddO1xuICAgICAgICByb2xlcy5mb3JFYWNoKHJvbGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogeyB1c2VyOiB7IHJvbGUgfSB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHsgdW5tb3VudCB9ID0gcmVuZGVyV2l0aEF1dGgoPE1lZGljYWxSZWNvcmRzIC8+LCB7IHByb3ZpZGVyUHJvcHMgfSk7XG4gICAgICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvTWVkaWNhbCBSZWNvcmRzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICAgICAgdW5tb3VudCgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pOyAiXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGVBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUF3RCxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFFeEQsTUFBTUssY0FBYyxHQUFHQSxDQUFDQyxFQUFFLEVBQUU7RUFBRUMsYUFBYTtFQUFFLEdBQUdDO0FBQWMsQ0FBQyxLQUFLO0VBQ2hFLE9BQU8sSUFBQUMsY0FBTSxlQUNULElBQUFMLFdBQUEsQ0FBQU0sR0FBQSxFQUFDUixZQUFBLENBQUFTLFdBQVcsQ0FBQ0MsUUFBUTtJQUFBLEdBQUtMLGFBQWE7SUFBQU0sUUFBQSxFQUFHUDtFQUFFLENBQXVCLENBQUMsRUFDcEVFLGFBQ0osQ0FBQztBQUNMLENBQUM7QUFFRE0sUUFBUSxDQUFDLDBCQUEwQixFQUFFLE1BQU07RUFDdkNDLElBQUksQ0FBQyx1REFBdUQsRUFBRSxNQUFNO0lBQ2hFLE1BQU1SLGFBQWEsR0FBRztNQUNsQlMsS0FBSyxFQUFFO1FBQUVDLElBQUksRUFBRTtVQUFFQyxJQUFJLEVBQUU7UUFBUztNQUFFO0lBQ3RDLENBQUM7SUFDRGIsY0FBYyxjQUFDLElBQUFELFdBQUEsQ0FBQU0sR0FBQSxFQUFDUCxlQUFBLENBQUFnQixPQUFjLElBQUUsQ0FBQyxFQUFFO01BQUVaO0lBQWMsQ0FBQyxDQUFDO0lBRXJEYSxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztJQUNoRUgsTUFBTSxDQUFDQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDOUYsQ0FBQyxDQUFDO0VBRUZSLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxNQUFNO0lBQy9DLE1BQU1SLGFBQWEsR0FBRztNQUNsQlMsS0FBSyxFQUFFO1FBQUVDLElBQUksRUFBRTtVQUFFQyxJQUFJLEVBQUU7UUFBUTtNQUFFO0lBQ3JDLENBQUM7SUFDRGIsY0FBYyxjQUFDLElBQUFELFdBQUEsQ0FBQU0sR0FBQSxFQUFDUCxlQUFBLENBQUFnQixPQUFjLElBQUUsQ0FBQyxFQUFFO01BQUVaO0lBQWMsQ0FBQyxDQUFDO0lBRXJEYSxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUNsRSxDQUFDLENBQUM7RUFFRlIsSUFBSSxDQUFDLDhDQUE4QyxFQUFFLE1BQU07SUFDdkQsTUFBTVMsS0FBSyxHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO0lBQ3JEQSxLQUFLLENBQUNDLE9BQU8sQ0FBQ1AsSUFBSSxJQUFJO01BQ2xCLE1BQU1YLGFBQWEsR0FBRztRQUNsQlMsS0FBSyxFQUFFO1VBQUVDLElBQUksRUFBRTtZQUFFQztVQUFLO1FBQUU7TUFDNUIsQ0FBQztNQUNELE1BQU07UUFBRVE7TUFBUSxDQUFDLEdBQUdyQixjQUFjLGNBQUMsSUFBQUQsV0FBQSxDQUFBTSxHQUFBLEVBQUNQLGVBQUEsQ0FBQWdCLE9BQWMsSUFBRSxDQUFDLEVBQUU7UUFBRVo7TUFBYyxDQUFDLENBQUM7TUFDekVhLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO01BQ2hFRyxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==