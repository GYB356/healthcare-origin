8ff44352973bad4ddbed178a188f688a
"use strict";

// Mock the modules
_getJestObj().mock('axios');
_getJestObj().mock('../../context/SocketContext', () => ({
  ...jest.requireActual('../../context/SocketContext'),
  useSocket: () => ({
    socket: {
      on: jest.fn(),
      off: jest.fn(),
      emit: jest.fn()
    },
    updateSchedule: jest.fn()
  })
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../../context/AuthContext");
var _SocketContext = require("../../context/SocketContext");
var _StaffScheduling = _interopRequireDefault(require("../../pages/StaffScheduling"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('StaffScheduling Component', () => {
  const mockSchedules = [{
    id: 'schedule-1',
    staffId: 'staff-1',
    staffName: 'Dr. Smith',
    shiftType: 'regular',
    department: 'Cardiology',
    startTime: '2024-03-01T09:00:00Z',
    endTime: '2024-03-01T17:00:00Z',
    notes: 'Morning shift'
  }, {
    id: 'schedule-2',
    staffId: 'staff-2',
    staffName: 'Dr. Johnson',
    shiftType: 'on-call',
    department: 'Emergency',
    startTime: '2024-03-01T17:00:00Z',
    endTime: '2024-03-02T09:00:00Z',
    notes: 'Night shift'
  }];
  const renderComponent = (role = 'admin') => {
    const mockUser = {
      id: 'user-1',
      role: role
    };
    return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: mockUser,
          hasRole: () => role === 'admin' || role === 'staff'
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SocketContext.SocketProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_StaffScheduling.default, {})
        })
      })
    }));
  };
  beforeEach(() => {
    jest.clearAllMocks();
    _axios.default.get.mockResolvedValue({
      data: mockSchedules
    });
  });
  it('renders access denied for unauthorized users', () => {
    renderComponent('patient');
    expect(_react2.screen.getByText('Access Denied')).toBeInTheDocument();
  });
  it('loads and displays staff schedules', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.get).toHaveBeenCalledWith('/api/staff-schedules');
    });
    expect(_react2.screen.getByText('Staff Scheduling')).toBeInTheDocument();
    expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    expect(_react2.screen.getByText('Dr. Johnson')).toBeInTheDocument();
  });
  it('allows admin to add new schedule', async () => {
    renderComponent();
    const newSchedule = {
      id: 'schedule-3',
      staffId: 'staff-3',
      staffName: 'Dr. Brown',
      shiftType: 'regular',
      department: 'Pediatrics',
      startTime: '2024-03-02T09:00:00Z',
      endTime: '2024-03-02T17:00:00Z',
      notes: 'Morning shift'
    };
    _axios.default.post.mockResolvedValueOnce({
      data: newSchedule
    });

    // Click add schedule button
    const addButton = await _react2.screen.findByText('Add Schedule');
    _react2.fireEvent.click(addButton);

    // Fill out the form
    const staffIdInput = _react2.screen.getByLabelText(/Staff Member/i);
    const departmentInput = _react2.screen.getByLabelText(/Department/i);
    const notesInput = _react2.screen.getByLabelText(/Notes/i);
    _react2.fireEvent.change(staffIdInput, {
      target: {
        value: 'staff-3'
      }
    });
    _react2.fireEvent.change(departmentInput, {
      target: {
        value: 'Pediatrics'
      }
    });
    _react2.fireEvent.change(notesInput, {
      target: {
        value: 'Morning shift'
      }
    });

    // Submit the form
    const saveButton = _react2.screen.getByText('Save');
    _react2.fireEvent.click(saveButton);
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.post).toHaveBeenCalled();
    });
  });
  it('allows admin to edit schedule', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });

    // Click on a schedule to edit
    const scheduleCard = _react2.screen.getByText('Dr. Smith').closest('div');
    _react2.fireEvent.click(scheduleCard);

    // Update the notes
    const notesInput = _react2.screen.getByLabelText(/Notes/i);
    _react2.fireEvent.change(notesInput, {
      target: {
        value: 'Updated shift notes'
      }
    });

    // Save the changes
    const saveButton = _react2.screen.getByText('Save');
    _react2.fireEvent.click(saveButton);
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.put).toHaveBeenCalled();
    });
  });
  it('allows admin to delete schedule', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });

    // Click on a schedule to edit
    const scheduleCard = _react2.screen.getByText('Dr. Smith').closest('div');
    _react2.fireEvent.click(scheduleCard);

    // Click delete button
    const deleteButton = _react2.screen.getByText('Delete');
    _react2.fireEvent.click(deleteButton);
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.delete).toHaveBeenCalledWith('/api/staff-schedules/schedule-1');
    });
  });
  it('handles error states', async () => {
    _axios.default.get.mockRejectedValueOnce(new Error('Failed to load schedules'));
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to load schedules')).toBeInTheDocument();
    });
  });
  it('updates schedule display when receiving WebSocket events', async () => {
    const {
      rerender
    } = renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });

    // Simulate receiving a WebSocket update
    const updatedSchedule = {
      ...mockSchedules[0],
      notes: 'Updated via WebSocket'
    };
    _axios.default.get.mockResolvedValueOnce({
      data: [updatedSchedule, mockSchedules[1]]
    });
    rerender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: {
            id: 'user-1',
            role: 'admin'
          },
          hasRole: () => true
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SocketContext.SocketProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_StaffScheduling.default, {})
        })
      })
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Updated via WebSocket')).toBeInTheDocument();
    });
  });
  it('restricts edit/delete actions for non-admin users', async () => {
    renderComponent('staff');
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });
    expect(_react2.screen.queryByText('Add Schedule')).not.toBeInTheDocument();
    expect(_react2.screen.queryByText('Delete')).not.toBeInTheDocument();
  });
  it('renders the Staff Scheduling page', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_StaffScheduling.default, {}));
    expect(_react2.screen.getByText('Staff Scheduling')).toBeInTheDocument();
    expect(_react2.screen.getByText('Welcome to the Staff Scheduling page.')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZVNvY2tldCIsInNvY2tldCIsIm9uIiwiZm4iLCJvZmYiLCJlbWl0IiwidXBkYXRlU2NoZWR1bGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfcmVhY3RSb3V0ZXJEb20iLCJfQXV0aENvbnRleHQiLCJfU29ja2V0Q29udGV4dCIsIl9TdGFmZlNjaGVkdWxpbmciLCJfYXhpb3MiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwibW9ja1NjaGVkdWxlcyIsImlkIiwic3RhZmZJZCIsInN0YWZmTmFtZSIsInNoaWZ0VHlwZSIsImRlcGFydG1lbnQiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwibm90ZXMiLCJyZW5kZXJDb21wb25lbnQiLCJyb2xlIiwibW9ja1VzZXIiLCJyZW5kZXIiLCJqc3giLCJNZW1vcnlSb3V0ZXIiLCJjaGlsZHJlbiIsIkF1dGhQcm92aWRlciIsInZhbHVlIiwidXNlciIsImhhc1JvbGUiLCJTb2NrZXRQcm92aWRlciIsImRlZmF1bHQiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImF4aW9zIiwiZ2V0IiwibW9ja1Jlc29sdmVkVmFsdWUiLCJkYXRhIiwiaXQiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm5ld1NjaGVkdWxlIiwicG9zdCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImFkZEJ1dHRvbiIsImZpbmRCeVRleHQiLCJmaXJlRXZlbnQiLCJjbGljayIsInN0YWZmSWRJbnB1dCIsImdldEJ5TGFiZWxUZXh0IiwiZGVwYXJ0bWVudElucHV0Iiwibm90ZXNJbnB1dCIsImNoYW5nZSIsInRhcmdldCIsInNhdmVCdXR0b24iLCJ0b0hhdmVCZWVuQ2FsbGVkIiwic2NoZWR1bGVDYXJkIiwiY2xvc2VzdCIsInB1dCIsImRlbGV0ZUJ1dHRvbiIsImRlbGV0ZSIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIkVycm9yIiwicmVyZW5kZXIiLCJ1cGRhdGVkU2NoZWR1bGUiLCJxdWVyeUJ5VGV4dCIsIm5vdCJdLCJzb3VyY2VzIjpbIlN0YWZmU2NoZWR1bGluZy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBNZW1vcnlSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEF1dGhQcm92aWRlciB9IGZyb20gJy4uLy4uL2NvbnRleHQvQXV0aENvbnRleHQnO1xuaW1wb3J0IHsgU29ja2V0UHJvdmlkZXIgfSBmcm9tICcuLi8uLi9jb250ZXh0L1NvY2tldENvbnRleHQnO1xuaW1wb3J0IFN0YWZmU2NoZWR1bGluZyBmcm9tICcuLi8uLi9wYWdlcy9TdGFmZlNjaGVkdWxpbmcnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuLy8gTW9jayB0aGUgbW9kdWxlc1xuamVzdC5tb2NrKCdheGlvcycpO1xuamVzdC5tb2NrKCcuLi8uLi9jb250ZXh0L1NvY2tldENvbnRleHQnLCAoKSA9PiAoe1xuICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJy4uLy4uL2NvbnRleHQvU29ja2V0Q29udGV4dCcpLFxuICB1c2VTb2NrZXQ6ICgpID0+ICh7XG4gICAgc29ja2V0OiB7XG4gICAgICBvbjogamVzdC5mbigpLFxuICAgICAgb2ZmOiBqZXN0LmZuKCksXG4gICAgICBlbWl0OiBqZXN0LmZuKClcbiAgICB9LFxuICAgIHVwZGF0ZVNjaGVkdWxlOiBqZXN0LmZuKClcbiAgfSlcbn0pKTtcblxuZGVzY3JpYmUoJ1N0YWZmU2NoZWR1bGluZyBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tTY2hlZHVsZXMgPSBbXG4gICAge1xuICAgICAgaWQ6ICdzY2hlZHVsZS0xJyxcbiAgICAgIHN0YWZmSWQ6ICdzdGFmZi0xJyxcbiAgICAgIHN0YWZmTmFtZTogJ0RyLiBTbWl0aCcsXG4gICAgICBzaGlmdFR5cGU6ICdyZWd1bGFyJyxcbiAgICAgIGRlcGFydG1lbnQ6ICdDYXJkaW9sb2d5JyxcbiAgICAgIHN0YXJ0VGltZTogJzIwMjQtMDMtMDFUMDk6MDA6MDBaJyxcbiAgICAgIGVuZFRpbWU6ICcyMDI0LTAzLTAxVDE3OjAwOjAwWicsXG4gICAgICBub3RlczogJ01vcm5pbmcgc2hpZnQnXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ3NjaGVkdWxlLTInLFxuICAgICAgc3RhZmZJZDogJ3N0YWZmLTInLFxuICAgICAgc3RhZmZOYW1lOiAnRHIuIEpvaG5zb24nLFxuICAgICAgc2hpZnRUeXBlOiAnb24tY2FsbCcsXG4gICAgICBkZXBhcnRtZW50OiAnRW1lcmdlbmN5JyxcbiAgICAgIHN0YXJ0VGltZTogJzIwMjQtMDMtMDFUMTc6MDA6MDBaJyxcbiAgICAgIGVuZFRpbWU6ICcyMDI0LTAzLTAyVDA5OjAwOjAwWicsXG4gICAgICBub3RlczogJ05pZ2h0IHNoaWZ0J1xuICAgIH1cbiAgXTtcblxuICBjb25zdCByZW5kZXJDb21wb25lbnQgPSAocm9sZSA9ICdhZG1pbicpID0+IHtcbiAgICBjb25zdCBtb2NrVXNlciA9IHtcbiAgICAgIGlkOiAndXNlci0xJyxcbiAgICAgIHJvbGU6IHJvbGVcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlbmRlcihcbiAgICAgIDxNZW1vcnlSb3V0ZXI+XG4gICAgICAgIDxBdXRoUHJvdmlkZXIgdmFsdWU9e3sgdXNlcjogbW9ja1VzZXIsIGhhc1JvbGU6ICgpID0+IHJvbGUgPT09ICdhZG1pbicgfHwgcm9sZSA9PT0gJ3N0YWZmJyB9fT5cbiAgICAgICAgICA8U29ja2V0UHJvdmlkZXI+XG4gICAgICAgICAgICA8U3RhZmZTY2hlZHVsaW5nIC8+XG4gICAgICAgICAgPC9Tb2NrZXRQcm92aWRlcj5cbiAgICAgICAgPC9BdXRoUHJvdmlkZXI+XG4gICAgICA8L01lbW9yeVJvdXRlcj5cbiAgICApO1xuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tTY2hlZHVsZXMgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGFjY2VzcyBkZW5pZWQgZm9yIHVuYXV0aG9yaXplZCB1c2VycycsICgpID0+IHtcbiAgICByZW5kZXJDb21wb25lbnQoJ3BhdGllbnQnKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQWNjZXNzIERlbmllZCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnbG9hZHMgYW5kIGRpc3BsYXlzIHN0YWZmIHNjaGVkdWxlcycsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXJDb21wb25lbnQoKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGF4aW9zLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvc3RhZmYtc2NoZWR1bGVzJyk7XG4gICAgfSk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU3RhZmYgU2NoZWR1bGluZycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdEci4gU21pdGgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnRHIuIEpvaG5zb24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2FsbG93cyBhZG1pbiB0byBhZGQgbmV3IHNjaGVkdWxlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlckNvbXBvbmVudCgpO1xuXG4gICAgY29uc3QgbmV3U2NoZWR1bGUgPSB7XG4gICAgICBpZDogJ3NjaGVkdWxlLTMnLFxuICAgICAgc3RhZmZJZDogJ3N0YWZmLTMnLFxuICAgICAgc3RhZmZOYW1lOiAnRHIuIEJyb3duJyxcbiAgICAgIHNoaWZ0VHlwZTogJ3JlZ3VsYXInLFxuICAgICAgZGVwYXJ0bWVudDogJ1BlZGlhdHJpY3MnLFxuICAgICAgc3RhcnRUaW1lOiAnMjAyNC0wMy0wMlQwOTowMDowMFonLFxuICAgICAgZW5kVGltZTogJzIwMjQtMDMtMDJUMTc6MDA6MDBaJyxcbiAgICAgIG5vdGVzOiAnTW9ybmluZyBzaGlmdCdcbiAgICB9O1xuXG4gICAgYXhpb3MucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBkYXRhOiBuZXdTY2hlZHVsZSB9KTtcblxuICAgIC8vIENsaWNrIGFkZCBzY2hlZHVsZSBidXR0b25cbiAgICBjb25zdCBhZGRCdXR0b24gPSBhd2FpdCBzY3JlZW4uZmluZEJ5VGV4dCgnQWRkIFNjaGVkdWxlJyk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKGFkZEJ1dHRvbik7XG5cbiAgICAvLyBGaWxsIG91dCB0aGUgZm9ybVxuICAgIGNvbnN0IHN0YWZmSWRJbnB1dCA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgvU3RhZmYgTWVtYmVyL2kpO1xuICAgIGNvbnN0IGRlcGFydG1lbnRJbnB1dCA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgvRGVwYXJ0bWVudC9pKTtcbiAgICBjb25zdCBub3Rlc0lucHV0ID0gc2NyZWVuLmdldEJ5TGFiZWxUZXh0KC9Ob3Rlcy9pKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc3RhZmZJZElucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogJ3N0YWZmLTMnIH0gfSk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZShkZXBhcnRtZW50SW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnUGVkaWF0cmljcycgfSB9KTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlKG5vdGVzSW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnTW9ybmluZyBzaGlmdCcgfSB9KTtcblxuICAgIC8vIFN1Ym1pdCB0aGUgZm9ybVxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KCdTYXZlJyk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKHNhdmVCdXR0b24pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoYXhpb3MucG9zdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnYWxsb3dzIGFkbWluIHRvIGVkaXQgc2NoZWR1bGUnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyQ29tcG9uZW50KCk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdEci4gU21pdGgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIC8vIENsaWNrIG9uIGEgc2NoZWR1bGUgdG8gZWRpdFxuICAgIGNvbnN0IHNjaGVkdWxlQ2FyZCA9IHNjcmVlbi5nZXRCeVRleHQoJ0RyLiBTbWl0aCcpLmNsb3Nlc3QoJ2RpdicpO1xuICAgIGZpcmVFdmVudC5jbGljayhzY2hlZHVsZUNhcmQpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBub3Rlc1xuICAgIGNvbnN0IG5vdGVzSW5wdXQgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoL05vdGVzL2kpO1xuICAgIGZpcmVFdmVudC5jaGFuZ2Uobm90ZXNJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6ICdVcGRhdGVkIHNoaWZ0IG5vdGVzJyB9IH0pO1xuXG4gICAgLy8gU2F2ZSB0aGUgY2hhbmdlc1xuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KCdTYXZlJyk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKHNhdmVCdXR0b24pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QoYXhpb3MucHV0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdhbGxvd3MgYWRtaW4gdG8gZGVsZXRlIHNjaGVkdWxlJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlckNvbXBvbmVudCgpO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnRHIuIFNtaXRoJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICAvLyBDbGljayBvbiBhIHNjaGVkdWxlIHRvIGVkaXRcbiAgICBjb25zdCBzY2hlZHVsZUNhcmQgPSBzY3JlZW4uZ2V0QnlUZXh0KCdEci4gU21pdGgnKS5jbG9zZXN0KCdkaXYnKTtcbiAgICBmaXJlRXZlbnQuY2xpY2soc2NoZWR1bGVDYXJkKTtcblxuICAgIC8vIENsaWNrIGRlbGV0ZSBidXR0b25cbiAgICBjb25zdCBkZWxldGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KCdEZWxldGUnKTtcbiAgICBmaXJlRXZlbnQuY2xpY2soZGVsZXRlQnV0dG9uKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KGF4aW9zLmRlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvc3RhZmYtc2NoZWR1bGVzL3NjaGVkdWxlLTEnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgZXJyb3Igc3RhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF4aW9zLmdldC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCBzY2hlZHVsZXMnKSk7XG4gICAgcmVuZGVyQ29tcG9uZW50KCk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdGYWlsZWQgdG8gbG9hZCBzY2hlZHVsZXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3VwZGF0ZXMgc2NoZWR1bGUgZGlzcGxheSB3aGVuIHJlY2VpdmluZyBXZWJTb2NrZXQgZXZlbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlckNvbXBvbmVudCgpO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnRHIuIFNtaXRoJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICAvLyBTaW11bGF0ZSByZWNlaXZpbmcgYSBXZWJTb2NrZXQgdXBkYXRlXG4gICAgY29uc3QgdXBkYXRlZFNjaGVkdWxlID0ge1xuICAgICAgLi4ubW9ja1NjaGVkdWxlc1swXSxcbiAgICAgIG5vdGVzOiAnVXBkYXRlZCB2aWEgV2ViU29ja2V0J1xuICAgIH07XG5cbiAgICBheGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgZGF0YTogW3VwZGF0ZWRTY2hlZHVsZSwgbW9ja1NjaGVkdWxlc1sxXV0gfSk7XG4gICAgcmVyZW5kZXIoXG4gICAgICA8TWVtb3J5Um91dGVyPlxuICAgICAgICA8QXV0aFByb3ZpZGVyIHZhbHVlPXt7IHVzZXI6IHsgaWQ6ICd1c2VyLTEnLCByb2xlOiAnYWRtaW4nIH0sIGhhc1JvbGU6ICgpID0+IHRydWUgfX0+XG4gICAgICAgICAgPFNvY2tldFByb3ZpZGVyPlxuICAgICAgICAgICAgPFN0YWZmU2NoZWR1bGluZyAvPlxuICAgICAgICAgIDwvU29ja2V0UHJvdmlkZXI+XG4gICAgICAgIDwvQXV0aFByb3ZpZGVyPlxuICAgICAgPC9NZW1vcnlSb3V0ZXI+XG4gICAgKTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1VwZGF0ZWQgdmlhIFdlYlNvY2tldCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgncmVzdHJpY3RzIGVkaXQvZGVsZXRlIGFjdGlvbnMgZm9yIG5vbi1hZG1pbiB1c2VycycsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXJDb21wb25lbnQoJ3N0YWZmJyk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdEci4gU21pdGgnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoJ0FkZCBTY2hlZHVsZScpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCdEZWxldGUnKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSBTdGFmZiBTY2hlZHVsaW5nIHBhZ2UnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxTdGFmZlNjaGVkdWxpbmcgLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTdGFmZiBTY2hlZHVsaW5nJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1dlbGNvbWUgdG8gdGhlIFN0YWZmIFNjaGVkdWxpbmcgcGFnZS4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG59KTsgIl0sIm1hcHBpbmdzIjoiOztBQVFBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNsQkQsV0FBQSxHQUFLQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsT0FBTztFQUM5QyxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQztFQUNwREMsU0FBUyxFQUFFQSxDQUFBLE1BQU87SUFDaEJDLE1BQU0sRUFBRTtNQUNOQyxFQUFFLEVBQUVKLElBQUksQ0FBQ0ssRUFBRSxDQUFDLENBQUM7TUFDYkMsR0FBRyxFQUFFTixJQUFJLENBQUNLLEVBQUUsQ0FBQyxDQUFDO01BQ2RFLElBQUksRUFBRVAsSUFBSSxDQUFDSyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUNERyxjQUFjLEVBQUVSLElB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