aed44e95e2b8404a6359514fc9b67190
"use strict";

// Mock the modules
_getJestObj().mock('axios');
_getJestObj().mock('../../context/SocketContext', () => ({
  ...jest.requireActual('../../context/SocketContext'),
  useSocket: () => ({
    socket: {
      on: jest.fn(),
      off: jest.fn(),
      emit: jest.fn()
    },
    joinTelemedicineSession: jest.fn(),
    leaveTelemedicineSession: jest.fn()
  })
}));

// Mock getUserMedia
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../../context/AuthContext");
var _SocketContext = require("../../context/SocketContext");
var _Telemedicine = _interopRequireDefault(require("../../pages/Telemedicine"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockGetUserMedia = jest.fn(async () => ({
  getTracks: () => [{
    enabled: true,
    stop: jest.fn()
  }]
}));
Object.defineProperty(global.navigator, 'mediaDevices', {
  value: {
    getUserMedia: mockGetUserMedia
  }
});

// Mock RTCPeerConnection
global.RTCPeerConnection = jest.fn().mockImplementation(() => ({
  addTrack: jest.fn(),
  createOffer: jest.fn().mockResolvedValue({
    sdp: 'test-sdp'
  }),
  setLocalDescription: jest.fn(),
  setRemoteDescription: jest.fn(),
  addIceCandidate: jest.fn(),
  close: jest.fn(),
  ontrack: null,
  onicecandidate: null
}));
describe('Telemedicine Component', () => {
  const mockSession = {
    id: 'test-session',
    doctorId: 'doctor-1',
    patientId: 'patient-1',
    scheduledTime: new Date().toISOString(),
    status: 'scheduled'
  };
  const renderComponent = (role = 'doctor') => {
    const mockUser = {
      id: 'user-1',
      role: role
    };
    return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      initialEntries: ['/telemedicine/test-session'],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: mockUser,
          hasRole: () => true
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SocketContext.SocketProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Routes, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
              path: "/telemedicine/:sessionId",
              element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Telemedicine.default, {})
            })
          })
        })
      })
    }));
  };
  beforeEach(() => {
    jest.clearAllMocks();
    _axios.default.get.mockResolvedValue({
      data: mockSession
    });
  });
  it('renders access denied for unauthorized users', () => {
    const mockUser = {
      id: 'user-1',
      role: 'staff'
    };
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: mockUser,
          hasRole: () => false
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SocketContext.SocketProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Telemedicine.default, {})
        })
      })
    }));
    expect(_react2.screen.getByText('Access Denied')).toBeInTheDocument();
  });
  it('loads and displays telemedicine session', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.get).toHaveBeenCalledWith('/api/telemedicine/sessions/test-session');
    });
    expect(_react2.screen.getByText(/Telemedicine Session/)).toBeInTheDocument();
  });
  it('handles media stream initialization', async () => {
    renderComponent();
    const startCallButton = await _react2.screen.findByText('Start Call');
    _react2.fireEvent.click(startCallButton);
    await (0, _react2.waitFor)(() => {
      expect(mockGetUserMedia).toHaveBeenCalledWith({
        video: true,
        audio: true
      });
    });
  });
  it('toggles audio and video', async () => {
    renderComponent();

    // Start the call
    const startCallButton = await _react2.screen.findByText('Start Call');
    _react2.fireEvent.click(startCallButton);
    await (0, _react2.waitFor)(() => {
      expect(mockGetUserMedia).toHaveBeenCalled();
    });

    // Toggle audio
    const audioButton = _react2.screen.getByRole('button', {
      name: /audio/i
    });
    _react2.fireEvent.click(audioButton);

    // Toggle video
    const videoButton = _react2.screen.getByRole('button', {
      name: /video/i
    });
    _react2.fireEvent.click(videoButton);
  });
  it('handles error states', async () => {
    _axios.default.get.mockRejectedValueOnce(new Error('Failed to load session'));
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Error')).toBeInTheDocument();
      expect(_react2.screen.getByText('Failed to load session')).toBeInTheDocument();
    });
  });
  it('cleans up resources on unmount', async () => {
    const {
      unmount
    } = renderComponent();

    // Start the call
    const startCallButton = await _react2.screen.findByText('Start Call');
    _react2.fireEvent.click(startCallButton);
    await (0, _react2.waitFor)(() => {
      expect(mockGetUserMedia).toHaveBeenCalled();
    });
    unmount();

    // Verify cleanup
    expect(mockGetUserMedia().getTracks()[0].stop).toHaveBeenCalled();
  });
  it('renders the Telemedicine page', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Telemedicine.default, {}));
    expect(_react2.screen.getByText('Telemedicine')).toBeInTheDocument();
    expect(_react2.screen.getByText('Welcome to the Telemedicine page.')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,