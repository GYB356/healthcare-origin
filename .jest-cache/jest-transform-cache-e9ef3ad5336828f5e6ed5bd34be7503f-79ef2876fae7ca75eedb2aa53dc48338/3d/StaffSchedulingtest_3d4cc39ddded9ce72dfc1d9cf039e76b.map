{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_StaffScheduling","_AuthContext","_jsxRuntime","mockUser","id","role","renderWithAuthContext","component","render","jsx","AuthContext","Provider","value","user","isAuthenticated","children","describe","test","default","expect","screen","getByText","toBeInTheDocument","getByRole","fireEvent","click","getByLabelText"],"sources":["StaffScheduling.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport StaffScheduling from '../StaffScheduling';\nimport { AuthContext } from '../../contexts/AuthContext';\n\nconst mockUser = { id: '1', role: 'admin' };\n\nconst renderWithAuthContext = (component) => {\n  return render(\n    <AuthContext.Provider value={{ user: mockUser, isAuthenticated: true }}>\n      {component}\n    </AuthContext.Provider>\n  );\n};\n\ndescribe('StaffScheduling Component', () => {\n  test('renders without crashing', () => {\n    renderWithAuthContext(<StaffScheduling />);\n    expect(screen.getByText('Staff Scheduling')).toBeInTheDocument();\n  });\n\n  test('displays loading spinner initially', () => {\n    renderWithAuthContext(<StaffScheduling />);\n    expect(screen.getByRole('status')).toBeInTheDocument();\n  });\n\n  test('displays schedules when loaded', async () => {\n    renderWithAuthContext(<StaffScheduling />);\n    // Mock fetch and socket data here\n    // Check if schedules are displayed\n  });\n\n  test('handles add schedule', async () => {\n    renderWithAuthContext(<StaffScheduling />);\n    fireEvent.click(screen.getByLabelText('Add Schedule'));\n    // Check if modal opens and form is displayed\n  });\n\n  test('handles edit schedule', async () => {\n    renderWithAuthContext(<StaffScheduling />);\n    // Mock schedule data\n    fireEvent.click(screen.getByLabelText('Edit Schedule'));\n    // Check if edit form is displayed\n  });\n\n  test('handles delete schedule', async () => {\n    renderWithAuthContext(<StaffScheduling />);\n    // Mock schedule data\n    fireEvent.click(screen.getByLabelText('Delete Schedule'));\n    // Check if schedule is removed\n  });\n}); "],"mappings":";;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACAA,OAAA;AACA,IAAAE,gBAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AAAyD,IAAAI,WAAA,GAAAJ,OAAA;AAEzD,MAAMK,QAAQ,GAAG;EAAEC,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAQ,CAAC;AAE3C,MAAMC,qBAAqB,GAAIC,SAAS,IAAK;EAC3C,OAAO,IAAAC,cAAM,eACX,IAAAN,WAAA,CAAAO,GAAA,EAACR,YAAA,CAAAS,WAAW,CAACC,QAAQ;IAACC,KAAK,EAAE;MAAEC,IAAI,EAAEV,QAAQ;MAAEW,eAAe,EAAE;IAAK,CAAE;IAAAC,QAAA,EACpER;EAAS,CACU,CACxB,CAAC;AACH,CAAC;AAEDS,QAAQ,CAAC,2BAA2B,EAAE,MAAM;EAC1CC,IAAI,CAAC,0BAA0B,EAAE,MAAM;IACrCX,qBAAqB,cAAC,IAAAJ,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAkB,OAAe,IAAE,CAAC,CAAC;IAC1CC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAClE,CAAC,CAAC;EAEFL,IAAI,CAAC,oCAAoC,EAAE,MAAM;IAC/CX,qBAAqB,cAAC,IAAAJ,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAkB,OAAe,IAAE,CAAC,CAAC;IAC1CC,MAAM,CAACC,cAAM,CAACG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAACD,iBAAiB,CAAC,CAAC;EACxD,CAAC,CAAC;EAEFL,IAAI,CAAC,gCAAgC,EAAE,YAAY;IACjDX,qBAAqB,cAAC,IAAAJ,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAkB,OAAe,IAAE,CAAC,CAAC;IAC1C;IACA;EACF,CAAC,CAAC;EAEFD,IAAI,CAAC,sBAAsB,EAAE,YAAY;IACvCX,qBAAqB,cAAC,IAAAJ,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAkB,OAAe,IAAE,CAAC,CAAC;IAC1CM,iBAAS,CAACC,KAAK,CAACL,cAAM,CAACM,cAAc,CAAC,cAAc,CAAC,CAAC;IACtD;EACF,CAAC,CAAC;EAEFT,IAAI,CAAC,uBAAuB,EAAE,YAAY;IACxCX,qBAAqB,cAAC,IAAAJ,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAkB,OAAe,IAAE,CAAC,CAAC;IAC1C;IACAM,iBAAS,CAACC,KAAK,CAACL,cAAM,CAACM,cAAc,CAAC,eAAe,CAAC,CAAC;IACvD;EACF,CAAC,CAAC;EAEFT,IAAI,CAAC,yBAAyB,EAAE,YAAY;IAC1CX,qBAAqB,cAAC,IAAAJ,WAAA,CAAAO,GAAA,EAACT,gBAAA,CAAAkB,OAAe,IAAE,CAAC,CAAC;IAC1C;IACAM,iBAAS,CAACC,KAAK,CAACL,cAAM,CAACM,cAAc,CAAC,iBAAiB,CAAC,CAAC;IACzD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}