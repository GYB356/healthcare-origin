{"version":3,"names":["_react","require","_reactRouterDom","_AuthContext","_Login","_interopRequireDefault","_jsxRuntime","global","fetch","jest","fn","mockFetchResponse","status","data","mockImplementationOnce","Promise","resolve","ok","json","describe","beforeEach","localStorage","clear","mockClear","roleTests","role","expectedRedirect","userData","id","email","name","forEach","test","mockNavigate","token","refreshToken","user","render","jsx","BrowserRouter","children","AuthProvider","default","fireEvent","change","screen","getByLabelText","target","value","click","getByRole","waitFor","expect","toHaveBeenCalledWith","getItem","toBe","errorTests","scenario","response","message","attemptsRemaining","expectedError","lockUntil","Date","now","toISOString","requires2FA","getByText","toBeInTheDocument","setItem"],"sources":["auth.test.js"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from '../contexts/AuthContext';\nimport Login from '../components/auth/Login';\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Helper to setup mock responses\nconst mockFetchResponse = (status, data) => {\n  global.fetch.mockImplementationOnce(() =>\n    Promise.resolve({\n      ok: status === 200,\n      status,\n      json: () => Promise.resolve(data)\n    })\n  );\n};\n\ndescribe('Login Component', () => {\n  beforeEach(() => {\n    // Clear localStorage and fetch mocks before each test\n    localStorage.clear();\n    global.fetch.mockClear();\n  });\n\n  // Test successful login for different roles\n  const roleTests = [\n    {\n      role: 'admin',\n      expectedRedirect: '/admin/dashboard',\n      userData: {\n        id: '1',\n        email: 'admin@test.com',\n        role: 'admin',\n        name: 'Admin User'\n      }\n    },\n    {\n      role: 'provider',\n      expectedRedirect: '/provider/dashboard',\n      userData: {\n        id: '2',\n        email: 'provider@test.com',\n        role: 'provider',\n        name: 'Provider User'\n      }\n    },\n    {\n      role: 'patient',\n      expectedRedirect: '/patient/dashboard',\n      userData: {\n        id: '3',\n        email: 'patient@test.com',\n        role: 'patient',\n        name: 'Patient User'\n      }\n    }\n  ];\n\n  roleTests.forEach(({ role, expectedRedirect, userData }) => {\n    test(`should login successfully and redirect ${role} to correct dashboard`, async () => {\n      const mockNavigate = jest.fn();\n      \n      // Mock successful login response\n      mockFetchResponse(200, {\n        token: 'fake-token',\n        refreshToken: 'fake-refresh-token',\n        user: userData\n      });\n\n      // Mock user data fetch response\n      mockFetchResponse(200, { user: userData });\n\n      render(\n        <BrowserRouter>\n          <AuthProvider>\n            <Login />\n          </AuthProvider>\n        </BrowserRouter>\n      );\n\n      // Fill in login form\n      fireEvent.change(screen.getByLabelText(/email/i), {\n        target: { value: userData.email }\n      });\n      fireEvent.change(screen.getByLabelText(/password/i), {\n        target: { value: 'password123' }\n      });\n\n      // Submit form\n      fireEvent.click(screen.getByRole('button', { name: /sign in/i }));\n\n      // Verify redirect\n      await waitFor(() => {\n        expect(mockNavigate).toHaveBeenCalledWith(expectedRedirect);\n      });\n\n      // Verify local storage\n      expect(localStorage.getItem('token')).toBe('fake-token');\n      expect(localStorage.getItem('refreshToken')).toBe('fake-refresh-token');\n      expect(localStorage.getItem('userRole')).toBe(role);\n    });\n  });\n\n  // Test error scenarios\n  const errorTests = [\n    {\n      scenario: 'invalid credentials',\n      response: {\n        status: 401,\n        data: {\n          message: 'Invalid credentials',\n          attemptsRemaining: 4\n        }\n      },\n      expectedError: 'Invalid credentials. 4 attempts remaining.'\n    },\n    {\n      scenario: 'account locked',\n      response: {\n        status: 401,\n        data: {\n          message: 'Account locked',\n          lockUntil: new Date(Date.now() + 15 * 60000).toISOString()\n        }\n      },\n      expectedError: 'Account is locked. Please try again in 15 minutes.'\n    },\n    {\n      scenario: '2FA required',\n      response: {\n        status: 401,\n        data: {\n          requires2FA: true\n        }\n      },\n      expectedError: 'Please enter your 2FA code'\n    }\n  ];\n\n  errorTests.forEach(({ scenario, response, expectedError }) => {\n    test(`should handle ${scenario} error correctly`, async () => {\n      mockFetchResponse(response.status, response.data);\n\n      render(\n        <BrowserRouter>\n          <AuthProvider>\n            <Login />\n          </AuthProvider>\n        </BrowserRouter>\n      );\n\n      // Fill in login form\n      fireEvent.change(screen.getByLabelText(/email/i), {\n        target: { value: 'test@example.com' }\n      });\n      fireEvent.change(screen.getByLabelText(/password/i), {\n        target: { value: 'password123' }\n      });\n\n      // Submit form\n      fireEvent.click(screen.getByRole('button', { name: /sign in/i }));\n\n      // Verify error message\n      await waitFor(() => {\n        expect(screen.getByText(expectedError)).toBeInTheDocument();\n      });\n    });\n  });\n\n  // Test session persistence\n  test('should persist session after page refresh', async () => {\n    const userData = {\n      id: '1',\n      email: 'test@example.com',\n      role: 'admin',\n      name: 'Test User'\n    };\n\n    // Set up initial auth state\n    localStorage.setItem('token', 'fake-token');\n    localStorage.setItem('refreshToken', 'fake-refresh-token');\n    localStorage.setItem('userRole', 'admin');\n\n    // Mock user data fetch response\n    mockFetchResponse(200, { user: userData });\n\n    render(\n      <BrowserRouter>\n        <AuthProvider>\n          <Login />\n        </AuthProvider>\n      </BrowserRouter>\n    );\n\n    // Verify that the component redirects to dashboard\n    await waitFor(() => {\n      expect(mockNavigate).toHaveBeenCalledWith('/admin/dashboard');\n    });\n\n    // Verify auth state persists\n    expect(localStorage.getItem('token')).toBe('fake-token');\n    expect(localStorage.getItem('refreshToken')).toBe('fake-refresh-token');\n    expect(localStorage.getItem('userRole')).toBe('admin');\n  });\n}); "],"mappings":"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","ignoreList":[]}