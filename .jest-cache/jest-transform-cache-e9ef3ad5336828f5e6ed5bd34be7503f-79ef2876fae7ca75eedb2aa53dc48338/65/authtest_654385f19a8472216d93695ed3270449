8eb0adb57666e266a6dacc6ba46ba9b2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../contexts/AuthContext");
var _Login = _interopRequireDefault(require("../components/auth/Login"));
var _jsxRuntime = require("react/jsx-runtime");
// Mock fetch globally
global.fetch = jest.fn();

// Helper to setup mock responses
const mockFetchResponse = (status, data) => {
  global.fetch.mockImplementationOnce(() => Promise.resolve({
    ok: status === 200,
    status,
    json: () => Promise.resolve(data)
  }));
};
describe('Login Component', () => {
  beforeEach(() => {
    // Clear localStorage and fetch mocks before each test
    localStorage.clear();
    global.fetch.mockClear();
  });

  // Test successful login for different roles
  const roleTests = [{
    role: 'admin',
    expectedRedirect: '/admin/dashboard',
    userData: {
      id: '1',
      email: 'admin@test.com',
      role: 'admin',
      name: 'Admin User'
    }
  }, {
    role: 'provider',
    expectedRedirect: '/provider/dashboard',
    userData: {
      id: '2',
      email: 'provider@test.com',
      role: 'provider',
      name: 'Provider User'
    }
  }, {
    role: 'patient',
    expectedRedirect: '/patient/dashboard',
    userData: {
      id: '3',
      email: 'patient@test.com',
      role: 'patient',
      name: 'Patient User'
    }
  }];
  roleTests.forEach(({
    role,
    expectedRedirect,
    userData
  }) => {
    test(`should login successfully and redirect ${role} to correct dashboard`, async () => {
      const mockNavigate = jest.fn();

      // Mock successful login response
      mockFetchResponse(200, {
        token: 'fake-token',
        refreshToken: 'fake-refresh-token',
        user: userData
      });

      // Mock user data fetch response
      mockFetchResponse(200, {
        user: userData
      });
      (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Login.default, {})
        })
      }));

      // Fill in login form
      _react.fireEvent.change(_react.screen.getByLabelText(/email/i), {
        target: {
          value: userData.email
        }
      });
      _react.fireEvent.change(_react.screen.getByLabelText(/password/i), {
        target: {
          value: 'password123'
        }
      });

      // Submit form
      _react.fireEvent.click(_react.screen.getByRole('button', {
        name: /sign in/i
      }));

      // Verify redirect
      await (0, _react.waitFor)(() => {
        expect(mockNavigate).toHaveBeenCalledWith(expectedRedirect);
      });

      // Verify local storage
      expect(localStorage.getItem('token')).toBe('fake-token');
      expect(localStorage.getItem('refreshToken')).toBe('fake-refresh-token');
      expect(localStorage.getItem('userRole')).toBe(role);
    });
  });

  // Test error scenarios
  const errorTests = [{
    scenario: 'invalid credentials',
    response: {
      status: 401,
      data: {
        message: 'Invalid credentials',
        attemptsRemaining: 4
      }
    },
    expectedError: 'Invalid credentials. 4 attempts remaining.'
  }, {
    scenario: 'account locked',
    response: {
      status: 401,
      data: {
        message: 'Account locked',
        lockUntil: new Date(Date.now() + 15 * 60000).toISOString()
      }
    },
    expectedError: 'Account is locked. Please try again in 15 minutes.'
  }, {
    scenario: '2FA required',
    response: {
      status: 401,
      data: {
        requires2FA: true
      }
    },
    expectedError: 'Please enter your 2FA code'
  }];
  errorTests.forEach(({
    scenario,
    response,
    expectedError
  }) => {
    test(`should handle ${scenario} error correctly`, async () => {
      mockFetchResponse(response.status, response.data);
      (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Login.default, {})
        })
      }));

      // Fill in login form
      _react.fireEvent.change(_react.screen.getByLabelText(/email/i), {
        target: {
          value: 'test@example.com'
        }
      });
      _react.fireEvent.change(_react.screen.getByLabelText(/password/i), {
        target: {
          value: 'password123'
        }
      });

      // Submit form
      _react.fireEvent.click(_react.screen.getByRole('button', {
        name: /sign in/i
      }));

      // Verify error message
      await (0, _react.waitFor)(() => {
        expect(_react.screen.getByText(expectedError)).toBeInTheDocument();
      });
    });
  });

  // Test session persistence
  test('should persist session after page refresh', async () => {
    const userData = {
      id: '1',
      email: 'test@example.com',
      role: 'admin',
      name: 'Test User'
    };

    // Set up initial auth state
    localStorage.setItem('token', 'fake-token');
    localStorage.setItem('refreshToken', 'fake-refresh-token');
    localStorage.setItem('userRole', 'admin');

    // Mock user data fetch response
    mockFetchResponse(200, {
      user: userData
    });
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Login.default, {})
      })
    }));

    // Verify that the component redirects to dashboard
    await (0, _react.waitFor)(() => {
      expect(mockNavigate).toHaveBeenCalledWith('/admin/dashboard');
    });

    // Verify auth state persists
    expect(localStorage.getItem('token')).toBe('fake-token');
    expect(localStorage.getItem('refreshToken')).toBe('fake-refresh-token');
    expect(localStorage.getItem('userRole')).toBe('admin');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,