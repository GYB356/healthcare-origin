b984dd6fdd648bfc3ffdf2dc2b888d89
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 * @private
 */
var debug = require('debug')('express:router:route');
var flatten = require('array-flatten');
var Layer = require('./layer');
var methods = require('methods');

/**
 * Module variables.
 * @private
 */

var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

/**
 * Module exports.
 * @public
 */

module.exports = Route;

/**
 * Initialize `Route` with the given `path`,
 *
 * @param {String} path
 * @public
 */

function Route(path) {
  this.path = path;
  this.stack = [];
  debug('new %o', path);

  // route handlers for various http methods
  this.methods = {};
}

/**
 * Determine if the route handles a given method.
 * @private
 */

Route.prototype._handles_method = function _handles_method(method) {
  if (this.methods._all) {
    return true;
  }

  // normalize name
  var name = typeof method === 'string' ? method.toLowerCase() : method;
  if (name === 'head' && !this.methods['head']) {
    name = 'get';
  }
  return Boolean(this.methods[name]);
};

/**
 * @return {Array} supported HTTP methods
 * @private
 */

Route.prototype._options = function _options() {
  var methods = Object.keys(this.methods);

  // append automatic head
  if (this.methods.get && !this.methods.head) {
    methods.push('head');
  }
  for (var i = 0; i < methods.length; i++) {
    // make upper case
    methods[i] = methods[i].toUpperCase();
  }
  return methods;
};

/**
 * dispatch req, res into this route
 * @private
 */

Route.prototype.dispatch = function dispatch(req, res, done) {
  var idx = 0;
  var stack = this.stack;
  var sync = 0;
  if (stack.length === 0) {
    return done();
  }
  var method = typeof req.method === 'string' ? req.method.toLowerCase() : req.method;
  if (method === 'head' && !this.methods['head']) {
    method = 'get';
  }
  req.route = this;
  next();
  function next(err) {
    // signal to exit route
    if (err && err === 'route') {
      return done();
    }

    // signal to exit router
    if (err && err === 'router') {
      return done(err);
    }

    // max sync stack
    if (++sync > 100) {
      return setImmediate(next, err);
    }
    var layer = stack[idx++];

    // end of layers
    if (!layer) {
      return done(err);
    }
    if (layer.method && layer.method !== method) {
      next(err);
    } else if (err) {
      layer.handle_error(err, req, res, next);
    } else {
      layer.handle_request(req, res, next);
    }
    sync = 0;
  }
};

/**
 * Add a handler for all HTTP verbs to this route.
 *
 * Behaves just like middleware and can respond or call `next`
 * to continue processing.
 *
 * You can use multiple `.all` call to add multiple handlers.
 *
 *   function check_something(req, res, next){
 *     next();
 *   };
 *
 *   function validate_user(req, res, next){
 *     next();
 *   };
 *
 *   route
 *   .all(validate_user)
 *   .all(check_something)
 *   .get(function(req, res, next){
 *     res.send('hello world');
 *   });
 *
 * @param {function} handler
 * @return {Route} for chaining
 * @api public
 */

Route.prototype.all = function all() {
  var handles = flatten(slice.call(arguments));
  for (var i = 0; i < handles.length; i++) {
    var handle = handles[i];
    if (typeof handle !== 'function') {
      var type = toString.call(handle);
      var msg = 'Route.all() requires a callback function but got a ' + type;
      throw new TypeError(msg);
    }
    var layer = Layer('/', {}, handle);
    layer.method = undefined;
    this.methods._all = true;
    this.stack.push(layer);
  }
  return this;
};
methods.forEach(function (method) {
  Route.prototype[method] = function () {
    var handles = flatten(slice.call(arguments));
    for (var i = 0; i < handles.length; i++) {
      var handle = handles[i];
      if (typeof handle !== 'function') {
        var type = toString.call(handle);
        var msg = 'Route.' + method + '() requires a callback function but got a ' + type;
        throw new Error(msg);
      }
      debug('%s %o', method, this.path);
      var layer = Layer('/', {}, handle);
      layer.method = method;
      this.methods[method] = true;
      this.stack.push(layer);
    }
    return this;
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJmbGF0dGVuIiwiTGF5ZXIiLCJtZXRob2RzIiwic2xpY2UiLCJBcnJheSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiT2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsIlJvdXRlIiwicGF0aCIsInN0YWNrIiwiX2hhbmRsZXNfbWV0aG9kIiwibWV0aG9kIiwiX2FsbCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsIkJvb2xlYW4iLCJfb3B0aW9ucyIsImtleXMiLCJnZXQiLCJoZWFkIiwicHVzaCIsImkiLCJsZW5ndGgiLCJ0b1VwcGVyQ2FzZSIsImRpc3BhdGNoIiwicmVxIiwicmVzIiwiZG9uZSIsImlkeCIsInN5bmMiLCJyb3V0ZSIsIm5leHQiLCJlcnIiLCJzZXRJbW1lZGlhdGUiLCJsYXllciIsImhhbmRsZV9lcnJvciIsImhhbmRsZV9yZXF1ZXN0IiwiYWxsIiwiaGFuZGxlcyIsImNhbGwiLCJhcmd1bWVudHMiLCJoYW5kbGUiLCJ0eXBlIiwibXNnIiwiVHlwZUVycm9yIiwidW5kZWZpbmVkIiwiZm9yRWFjaCIsIkVycm9yIl0sInNvdXJjZXMiOlsicm91dGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBleHByZXNzXG4gKiBDb3B5cmlnaHQoYykgMjAwOS0yMDEzIFRKIEhvbG93YXljaHVrXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2V4cHJlc3M6cm91dGVyOnJvdXRlJyk7XG52YXIgZmxhdHRlbiA9IHJlcXVpcmUoJ2FycmF5LWZsYXR0ZW4nKTtcbnZhciBMYXllciA9IHJlcXVpcmUoJy4vbGF5ZXInKTtcbnZhciBtZXRob2RzID0gcmVxdWlyZSgnbWV0aG9kcycpO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSb3V0ZTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGBSb3V0ZWAgd2l0aCB0aGUgZ2l2ZW4gYHBhdGhgLFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUm91dGUocGF0aCkge1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLnN0YWNrID0gW107XG5cbiAgZGVidWcoJ25ldyAlbycsIHBhdGgpXG5cbiAgLy8gcm91dGUgaGFuZGxlcnMgZm9yIHZhcmlvdXMgaHR0cCBtZXRob2RzXG4gIHRoaXMubWV0aG9kcyA9IHt9O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgcm91dGUgaGFuZGxlcyBhIGdpdmVuIG1ldGhvZC5cbiAqIEBwcml2YXRlXG4gKi9cblxuUm91dGUucHJvdG90eXBlLl9oYW5kbGVzX21ldGhvZCA9IGZ1bmN0aW9uIF9oYW5kbGVzX21ldGhvZChtZXRob2QpIHtcbiAgaWYgKHRoaXMubWV0aG9kcy5fYWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBub3JtYWxpemUgbmFtZVxuICB2YXIgbmFtZSA9IHR5cGVvZiBtZXRob2QgPT09ICdzdHJpbmcnXG4gICAgPyBtZXRob2QudG9Mb3dlckNhc2UoKVxuICAgIDogbWV0aG9kXG5cbiAgaWYgKG5hbWUgPT09ICdoZWFkJyAmJiAhdGhpcy5tZXRob2RzWydoZWFkJ10pIHtcbiAgICBuYW1lID0gJ2dldCc7XG4gIH1cblxuICByZXR1cm4gQm9vbGVhbih0aGlzLm1ldGhvZHNbbmFtZV0pO1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtBcnJheX0gc3VwcG9ydGVkIEhUVFAgbWV0aG9kc1xuICogQHByaXZhdGVcbiAqL1xuXG5Sb3V0ZS5wcm90b3R5cGUuX29wdGlvbnMgPSBmdW5jdGlvbiBfb3B0aW9ucygpIHtcbiAgdmFyIG1ldGhvZHMgPSBPYmplY3Qua2V5cyh0aGlzLm1ldGhvZHMpO1xuXG4gIC8vIGFwcGVuZCBhdXRvbWF0aWMgaGVhZFxuICBpZiAodGhpcy5tZXRob2RzLmdldCAmJiAhdGhpcy5tZXRob2RzLmhlYWQpIHtcbiAgICBtZXRob2RzLnB1c2goJ2hlYWQnKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0aG9kcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIG1ha2UgdXBwZXIgY2FzZVxuICAgIG1ldGhvZHNbaV0gPSBtZXRob2RzW2ldLnRvVXBwZXJDYXNlKCk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cbi8qKlxuICogZGlzcGF0Y2ggcmVxLCByZXMgaW50byB0aGlzIHJvdXRlXG4gKiBAcHJpdmF0ZVxuICovXG5cblJvdXRlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKHJlcSwgcmVzLCBkb25lKSB7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgc3RhY2sgPSB0aGlzLnN0YWNrO1xuICB2YXIgc3luYyA9IDBcblxuICBpZiAoc3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGRvbmUoKTtcbiAgfVxuICB2YXIgbWV0aG9kID0gdHlwZW9mIHJlcS5tZXRob2QgPT09ICdzdHJpbmcnXG4gICAgPyByZXEubWV0aG9kLnRvTG93ZXJDYXNlKClcbiAgICA6IHJlcS5tZXRob2RcblxuICBpZiAobWV0aG9kID09PSAnaGVhZCcgJiYgIXRoaXMubWV0aG9kc1snaGVhZCddKSB7XG4gICAgbWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICByZXEucm91dGUgPSB0aGlzO1xuXG4gIG5leHQoKTtcblxuICBmdW5jdGlvbiBuZXh0KGVycikge1xuICAgIC8vIHNpZ25hbCB0byBleGl0IHJvdXRlXG4gICAgaWYgKGVyciAmJiBlcnIgPT09ICdyb3V0ZScpIHtcbiAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxuXG4gICAgLy8gc2lnbmFsIHRvIGV4aXQgcm91dGVyXG4gICAgaWYgKGVyciAmJiBlcnIgPT09ICdyb3V0ZXInKSB7XG4gICAgICByZXR1cm4gZG9uZShlcnIpXG4gICAgfVxuXG4gICAgLy8gbWF4IHN5bmMgc3RhY2tcbiAgICBpZiAoKytzeW5jID4gMTAwKSB7XG4gICAgICByZXR1cm4gc2V0SW1tZWRpYXRlKG5leHQsIGVycilcbiAgICB9XG5cbiAgICB2YXIgbGF5ZXIgPSBzdGFja1tpZHgrK11cblxuICAgIC8vIGVuZCBvZiBsYXllcnNcbiAgICBpZiAoIWxheWVyKSB7XG4gICAgICByZXR1cm4gZG9uZShlcnIpXG4gICAgfVxuXG4gICAgaWYgKGxheWVyLm1ldGhvZCAmJiBsYXllci5tZXRob2QgIT09IG1ldGhvZCkge1xuICAgICAgbmV4dChlcnIpXG4gICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgIGxheWVyLmhhbmRsZV9lcnJvcihlcnIsIHJlcSwgcmVzLCBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGF5ZXIuaGFuZGxlX3JlcXVlc3QocmVxLCByZXMsIG5leHQpO1xuICAgIH1cblxuICAgIHN5bmMgPSAwXG4gIH1cbn07XG5cbi8qKlxuICogQWRkIGEgaGFuZGxlciBmb3IgYWxsIEhUVFAgdmVyYnMgdG8gdGhpcyByb3V0ZS5cbiAqXG4gKiBCZWhhdmVzIGp1c3QgbGlrZSBtaWRkbGV3YXJlIGFuZCBjYW4gcmVzcG9uZCBvciBjYWxsIGBuZXh0YFxuICogdG8gY29udGludWUgcHJvY2Vzc2luZy5cbiAqXG4gKiBZb3UgY2FuIHVzZSBtdWx0aXBsZSBgLmFsbGAgY2FsbCB0byBhZGQgbXVsdGlwbGUgaGFuZGxlcnMuXG4gKlxuICogICBmdW5jdGlvbiBjaGVja19zb21ldGhpbmcocmVxLCByZXMsIG5leHQpe1xuICogICAgIG5leHQoKTtcbiAqICAgfTtcbiAqXG4gKiAgIGZ1bmN0aW9uIHZhbGlkYXRlX3VzZXIocmVxLCByZXMsIG5leHQpe1xuICogICAgIG5leHQoKTtcbiAqICAgfTtcbiAqXG4gKiAgIHJvdXRlXG4gKiAgIC5hbGwodmFsaWRhdGVfdXNlcilcbiAqICAgLmFsbChjaGVja19zb21ldGhpbmcpXG4gKiAgIC5nZXQoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpe1xuICogICAgIHJlcy5zZW5kKCdoZWxsbyB3b3JsZCcpO1xuICogICB9KTtcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyXG4gKiBAcmV0dXJuIHtSb3V0ZX0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJvdXRlLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiBhbGwoKSB7XG4gIHZhciBoYW5kbGVzID0gZmxhdHRlbihzbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBoYW5kbGUgPSBoYW5kbGVzW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBoYW5kbGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0eXBlID0gdG9TdHJpbmcuY2FsbChoYW5kbGUpO1xuICAgICAgdmFyIG1zZyA9ICdSb3V0ZS5hbGwoKSByZXF1aXJlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIGJ1dCBnb3QgYSAnICsgdHlwZVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICAgIH1cblxuICAgIHZhciBsYXllciA9IExheWVyKCcvJywge30sIGhhbmRsZSk7XG4gICAgbGF5ZXIubWV0aG9kID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5tZXRob2RzLl9hbGwgPSB0cnVlO1xuICAgIHRoaXMuc3RhY2sucHVzaChsYXllcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbm1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2Qpe1xuICBSb3V0ZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGhhbmRsZXMgPSBmbGF0dGVuKHNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoYW5kbGUgPSBoYW5kbGVzW2ldO1xuXG4gICAgICBpZiAodHlwZW9mIGhhbmRsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgdHlwZSA9IHRvU3RyaW5nLmNhbGwoaGFuZGxlKTtcbiAgICAgICAgdmFyIG1zZyA9ICdSb3V0ZS4nICsgbWV0aG9kICsgJygpIHJlcXVpcmVzIGEgY2FsbGJhY2sgZnVuY3Rpb24gYnV0IGdvdCBhICcgKyB0eXBlXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfVxuXG4gICAgICBkZWJ1ZygnJXMgJW8nLCBtZXRob2QsIHRoaXMucGF0aClcblxuICAgICAgdmFyIGxheWVyID0gTGF5ZXIoJy8nLCB7fSwgaGFuZGxlKTtcbiAgICAgIGxheWVyLm1ldGhvZCA9IG1ldGhvZDtcblxuICAgICAgdGhpcy5tZXRob2RzW21ldGhvZF0gPSB0cnVlO1xuICAgICAgdGhpcy5zdGFjay5wdXNoKGxheWVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsc0JBQXNCLENBQUM7QUFDcEQsSUFBSUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3RDLElBQUlFLEtBQUssR0FBR0YsT0FBTyxDQUFDLFNBQVMs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