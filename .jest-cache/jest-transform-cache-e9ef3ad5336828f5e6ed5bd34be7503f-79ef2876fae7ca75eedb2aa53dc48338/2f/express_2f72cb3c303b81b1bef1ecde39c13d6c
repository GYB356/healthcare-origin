94b069f5d9d4d9ebc80546b7ff9723d7
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 */
var bodyParser = require('body-parser');
var EventEmitter = require('events').EventEmitter;
var mixin = require('merge-descriptors');
var proto = require('./application');
var Route = require('./router/route');
var Router = require('./router');
var req = require('./request');
var res = require('./response');

/**
 * Expose `createApplication()`.
 */

exports = module.exports = createApplication;

/**
 * Create an express application.
 *
 * @return {Function}
 * @api public
 */

function createApplication() {
  var app = function (req, res, next) {
    app.handle(req, res, next);
  };
  mixin(app, EventEmitter.prototype, false);
  mixin(app, proto, false);

  // expose the prototype that will get set on requests
  app.request = Object.create(req, {
    app: {
      configurable: true,
      enumerable: true,
      writable: true,
      value: app
    }
  });

  // expose the prototype that will get set on responses
  app.response = Object.create(res, {
    app: {
      configurable: true,
      enumerable: true,
      writable: true,
      value: app
    }
  });
  app.init();
  return app;
}

/**
 * Expose the prototypes.
 */

exports.application = proto;
exports.request = req;
exports.response = res;

/**
 * Expose constructors.
 */

exports.Route = Route;
exports.Router = Router;

/**
 * Expose middleware
 */

exports.json = bodyParser.json;
exports.query = require('./middleware/query');
exports.raw = bodyParser.raw;
exports.static = require('serve-static');
exports.text = bodyParser.text;
exports.urlencoded = bodyParser.urlencoded;

/**
 * Replace removed middleware with an appropriate error message.
 */

var removedMiddlewares = ['bodyParser', 'compress', 'cookieSession', 'session', 'logger', 'cookieParser', 'favicon', 'responseTime', 'errorHandler', 'timeout', 'methodOverride', 'vhost', 'csrf', 'directory', 'limit', 'multipart', 'staticCache'];
removedMiddlewares.forEach(function (name) {
  Object.defineProperty(exports, name, {
    get: function () {
      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
    },
    configurable: true
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJib2R5UGFyc2VyIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsIm1peGluIiwicHJvdG8iLCJSb3V0ZSIsIlJvdXRlciIsInJlcSIsInJlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJjcmVhdGVBcHBsaWNhdGlvbiIsImFwcCIsIm5leHQiLCJoYW5kbGUiLCJwcm90b3R5cGUiLCJyZXF1ZXN0IiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJyZXNwb25zZSIsImluaXQiLCJhcHBsaWNhdGlvbiIsImpzb24iLCJxdWVyeSIsInJhdyIsInN0YXRpYyIsInRleHQiLCJ1cmxlbmNvZGVkIiwicmVtb3ZlZE1pZGRsZXdhcmVzIiwiZm9yRWFjaCIsIm5hbWUiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIkVycm9yIl0sInNvdXJjZXMiOlsiZXhwcmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGV4cHJlc3NcbiAqIENvcHlyaWdodChjKSAyMDA5LTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodChjKSAyMDEzIFJvbWFuIFNodHlsbWFuXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJylcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgbWl4aW4gPSByZXF1aXJlKCdtZXJnZS1kZXNjcmlwdG9ycycpO1xudmFyIHByb3RvID0gcmVxdWlyZSgnLi9hcHBsaWNhdGlvbicpO1xudmFyIFJvdXRlID0gcmVxdWlyZSgnLi9yb3V0ZXIvcm91dGUnKTtcbnZhciBSb3V0ZXIgPSByZXF1aXJlKCcuL3JvdXRlcicpO1xudmFyIHJlcSA9IHJlcXVpcmUoJy4vcmVxdWVzdCcpO1xudmFyIHJlcyA9IHJlcXVpcmUoJy4vcmVzcG9uc2UnKTtcblxuLyoqXG4gKiBFeHBvc2UgYGNyZWF0ZUFwcGxpY2F0aW9uKClgLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFwcGxpY2F0aW9uO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBleHByZXNzIGFwcGxpY2F0aW9uLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVBcHBsaWNhdGlvbigpIHtcbiAgdmFyIGFwcCA9IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgYXBwLmhhbmRsZShyZXEsIHJlcywgbmV4dCk7XG4gIH07XG5cbiAgbWl4aW4oYXBwLCBFdmVudEVtaXR0ZXIucHJvdG90eXBlLCBmYWxzZSk7XG4gIG1peGluKGFwcCwgcHJvdG8sIGZhbHNlKTtcblxuICAvLyBleHBvc2UgdGhlIHByb3RvdHlwZSB0aGF0IHdpbGwgZ2V0IHNldCBvbiByZXF1ZXN0c1xuICBhcHAucmVxdWVzdCA9IE9iamVjdC5jcmVhdGUocmVxLCB7XG4gICAgYXBwOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiBhcHAgfVxuICB9KVxuXG4gIC8vIGV4cG9zZSB0aGUgcHJvdG90eXBlIHRoYXQgd2lsbCBnZXQgc2V0IG9uIHJlc3BvbnNlc1xuICBhcHAucmVzcG9uc2UgPSBPYmplY3QuY3JlYXRlKHJlcywge1xuICAgIGFwcDogeyBjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogYXBwIH1cbiAgfSlcblxuICBhcHAuaW5pdCgpO1xuICByZXR1cm4gYXBwO1xufVxuXG4vKipcbiAqIEV4cG9zZSB0aGUgcHJvdG90eXBlcy5cbiAqL1xuXG5leHBvcnRzLmFwcGxpY2F0aW9uID0gcHJvdG87XG5leHBvcnRzLnJlcXVlc3QgPSByZXE7XG5leHBvcnRzLnJlc3BvbnNlID0gcmVzO1xuXG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMuXG4gKi9cblxuZXhwb3J0cy5Sb3V0ZSA9IFJvdXRlO1xuZXhwb3J0cy5Sb3V0ZXIgPSBSb3V0ZXI7XG5cbi8qKlxuICogRXhwb3NlIG1pZGRsZXdhcmVcbiAqL1xuXG5leHBvcnRzLmpzb24gPSBib2R5UGFyc2VyLmpzb25cbmV4cG9ydHMucXVlcnkgPSByZXF1aXJlKCcuL21pZGRsZXdhcmUvcXVlcnknKTtcbmV4cG9ydHMucmF3ID0gYm9keVBhcnNlci5yYXdcbmV4cG9ydHMuc3RhdGljID0gcmVxdWlyZSgnc2VydmUtc3RhdGljJyk7XG5leHBvcnRzLnRleHQgPSBib2R5UGFyc2VyLnRleHRcbmV4cG9ydHMudXJsZW5jb2RlZCA9IGJvZHlQYXJzZXIudXJsZW5jb2RlZFxuXG4vKipcbiAqIFJlcGxhY2UgcmVtb3ZlZCBtaWRkbGV3YXJlIHdpdGggYW4gYXBwcm9wcmlhdGUgZXJyb3IgbWVzc2FnZS5cbiAqL1xuXG52YXIgcmVtb3ZlZE1pZGRsZXdhcmVzID0gW1xuICAnYm9keVBhcnNlcicsXG4gICdjb21wcmVzcycsXG4gICdjb29raWVTZXNzaW9uJyxcbiAgJ3Nlc3Npb24nLFxuICAnbG9nZ2VyJyxcbiAgJ2Nvb2tpZVBhcnNlcicsXG4gICdmYXZpY29uJyxcbiAgJ3Jlc3BvbnNlVGltZScsXG4gICdlcnJvckhhbmRsZXInLFxuICAndGltZW91dCcsXG4gICdtZXRob2RPdmVycmlkZScsXG4gICd2aG9zdCcsXG4gICdjc3JmJyxcbiAgJ2RpcmVjdG9yeScsXG4gICdsaW1pdCcsXG4gICdtdWx0aXBhcnQnLFxuICAnc3RhdGljQ2FjaGUnXG5dXG5cbnJlbW92ZWRNaWRkbGV3YXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vc3QgbWlkZGxld2FyZSAobGlrZSAnICsgbmFtZSArICcpIGlzIG5vIGxvbmdlciBidW5kbGVkIHdpdGggRXhwcmVzcyBhbmQgbXVzdCBiZSBpbnN0YWxsZWQgc2VwYXJhdGVseS4gUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vc2VuY2hhbGFicy9jb25uZWN0I21pZGRsZXdhcmUuJyk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFFQSxJQUFJQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdkMsSUFBSUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUNDLFlBQVk7QUFDakQsSUFBSUMsS0FBSyxHQUFHRixPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDeEMsSUFBSUcsS0FBSyxHQUFHSCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3BDLElBQUlJLEtBQUssR0FBR0osT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBQ3JDLElBQUlLLE1BQU0sR0FBR0wsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNoQyxJQUFJTSxHQUFHLEdBQUdOLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDOUIsSUFBSU8sR0FBRyxHQUFHUCxPQUFPLENBQUMsWUFBWSxDQUFDOztBQUUvQjtBQUNBO0FBQ0E7O0FBRUFRLE9BQU8sR0FBR0MsTUFBTSxDQUFDRCxPQUFPLEdBQUdFLGlCQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLGlCQUFpQkEsQ0FBQSxFQUFHO0VBQzNCLElBQUlDLEdBQUcsR0FBRyxTQUFBQSxDQUFTTCxHQUFHLEVBQUVDLEdBQUcsRUFBRUssSUFBSSxFQUFF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