533a6d69587177e2b171bc9b30276ddc
"use strict";

_getJestObj().mock('react-router-dom', () => _objectSpread(_objectSpread({}, jest.requireActual('react-router-dom')), {}, {
  useNavigate: () => mockNavigate
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _Login = _interopRequireDefault(require("./Login.jsx"));
var _AuthContext = require("../../contexts/AuthContext");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\src\\components\\auth\\Login.test.js";
var __jsx = _react.default.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockLogin = jest.fn();
const mockNavigate = jest.fn();
describe('Login Component', () => {
  beforeEach(() => {
    mockLogin.mockClear();
    mockNavigate.mockClear();
  });
  const renderLogin = () => {
    return (0, _react2.render)(__jsx(_AuthContext.AuthContext.Provider, {
      value: {
        login: mockLogin
      },
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 23,
        columnNumber: 7
      }
    }, __jsx(_reactRouterDom.BrowserRouter, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 9
      }
    }, __jsx(_Login.default, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 25,
        columnNumber: 11
      }
    }))));
  };
  it('renders login form', () => {
    renderLogin();
    expect(_react2.screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(_react2.screen.getByLabelText(/password/i)).toBeInTheDocument();
    expect(_react2.screen.getByRole('button', {
      name: /sign in/i
    })).toBeInTheDocument();
  });
  it('handles form submission', async () => {
    renderLogin();
    const email = 'test@example.com';
    const password = 'password123';
    _react2.fireEvent.change(_react2.screen.getByLabelText(/email/i), {
      target: {
        value: email
      }
    });
    _react2.fireEvent.change(_react2.screen.getByLabelText(/password/i), {
      target: {
        value: password
      }
    });
    _react2.fireEvent.click(_react2.screen.getByRole('button', {
      name: /sign in/i
    }));
    await (0, _react2.waitFor)(() => {
      expect(mockLogin).toHaveBeenCalledWith(email, password);
    });
  });
  it('shows error message on invalid submission', async () => {
    mockLogin.mockRejectedValueOnce(new Error('Invalid credentials'));
    renderLogin();
    _react2.fireEvent.click(_react2.screen.getByRole('button', {
      name: /sign in/i
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText(/invalid credentials/i)).toBeInTheDocument();
    });
  });
  it('navigates to dashboard on successful login', async () => {
    mockLogin.mockResolvedValueOnce({
      success: true
    });
    renderLogin();
    _react2.fireEvent.click(_react2.screen.getByRole('button', {
      name: /sign in/i
    }));
    await (0, _react2.waitFor)(() => {
      expect(mockNavigate).toHaveBeenCalledWith('/dashboard');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,