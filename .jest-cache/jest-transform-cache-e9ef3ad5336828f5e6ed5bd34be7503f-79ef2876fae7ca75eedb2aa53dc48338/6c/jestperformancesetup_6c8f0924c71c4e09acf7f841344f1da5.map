{"version":3,"names":["testTimes","slowTestThreshold","memorySnapshots","memoryLeakThreshold","beforeEach","testName","expect","getState","currentTestName","Date","now","process","memoryUsage","jest","clearAllTimers","afterEach","startTime","endTime","duration","console","warn","startMemory","endMemory","heapDiff","heapUsed","Math","round","useFakeTimers","doNotFake","global","fetch","fn","mockImplementation","Promise","resolve","ok","json","text","blob","Blob","arrayBuffer","ArrayBuffer","window","Object","defineProperty","value","getItem","setItem","removeItem","clear","writable","scrollTo","IntersectionObserver","constructor","callback","observe","unobserve","disconnect","test","concurrent","it","retryTimes","initialMemory","afterAll","finalMemory","memoryDiff","rss","heapTotal","external","log","toFixed","gc"],"sources":["jest.performance.setup.js"],"sourcesContent":["/**\r\n * Jest Performance Setup\r\n * \r\n * This file contains performance optimizations for Jest tests:\r\n * - Enabling parallel test execution where appropriate\r\n * - Mocking expensive operations\r\n * - Setting performance thresholds and monitoring\r\n * - Managing resources efficiently\r\n */\r\n\r\n// Track test execution time\r\nconst testTimes = {};\r\nconst slowTestThreshold = 500; // ms\r\n\r\n// Memory leak detection\r\nconst memorySnapshots = {};\r\nconst memoryLeakThreshold = 10 * 1024 * 1024; // 10MB\r\n\r\n// Performance monitoring\r\nbeforeEach(async () => {\r\n  // Store the start time for this test\r\n  const testName = expect.getState().currentTestName;\r\n  testTimes[testName] = Date.now();\r\n  \r\n  // Take memory snapshot for leak detection\r\n  memorySnapshots[testName] = process.memoryUsage();\r\n  \r\n  // Reset pending timers and intervals for each test\r\n  jest.clearAllTimers();\r\n});\r\n\r\nafterEach(async () => {\r\n  const testName = expect.getState().currentTestName;\r\n  const startTime = testTimes[testName];\r\n  const endTime = Date.now();\r\n  const duration = endTime - startTime;\r\n  \r\n  // Flag slow tests\r\n  if (duration > slowTestThreshold) {\r\n    console.warn(`⚠️ Slow test detected: ${testName} took ${duration}ms`);\r\n  }\r\n  \r\n  // Check for memory leaks\r\n  const startMemory = memorySnapshots[testName];\r\n  const endMemory = process.memoryUsage();\r\n  const heapDiff = endMemory.heapUsed - startMemory.heapUsed;\r\n  \r\n  if (heapDiff > memoryLeakThreshold) {\r\n    console.warn(`⚠️ Possible memory leak detected in test: ${testName}`);\r\n    console.warn(`   Heap usage increased by ${Math.round(heapDiff / 1024 / 1024)}MB`);\r\n  }\r\n  \r\n  // Clean up\r\n  delete testTimes[testName];\r\n  delete memorySnapshots[testName];\r\n});\r\n\r\n// Avoid real timers for faster tests\r\njest.useFakeTimers({ doNotFake: ['nextTick', 'setImmediate'] });\r\n\r\n// Create optimized fetch mock\r\nglobal.fetch = jest.fn().mockImplementation(() => \r\n  Promise.resolve({\r\n    ok: true,\r\n    json: () => Promise.resolve({}),\r\n    text: () => Promise.resolve(''),\r\n    blob: () => Promise.resolve(new Blob()),\r\n    arrayBuffer: () => Promise.resolve(new ArrayBuffer(0)),\r\n  })\r\n);\r\n\r\n// Mock expensive browser APIs when in Node environment\r\nif (typeof window !== 'undefined') {\r\n  // Fast localStorage mock\r\n  Object.defineProperty(window, 'localStorage', {\r\n    value: {\r\n      getItem: jest.fn(),\r\n      setItem: jest.fn(),\r\n      removeItem: jest.fn(),\r\n      clear: jest.fn(),\r\n    },\r\n    writable: true\r\n  });\r\n  \r\n  // Fast sessionStorage mock\r\n  Object.defineProperty(window, 'sessionStorage', {\r\n    value: {\r\n      getItem: jest.fn(),\r\n      setItem: jest.fn(),\r\n      removeItem: jest.fn(),\r\n      clear: jest.fn(),\r\n    },\r\n    writable: true\r\n  });\r\n  \r\n  // Mock scrollTo\r\n  window.scrollTo = jest.fn();\r\n  \r\n  // Mock IntersectionObserver\r\n  window.IntersectionObserver = class IntersectionObserver {\r\n    constructor(callback) {\r\n      this.callback = callback;\r\n    }\r\n    observe() { return null; }\r\n    unobserve() { return null; }\r\n    disconnect() { return null; }\r\n  };\r\n}\r\n\r\n// Enable parallel testing for suitable tests\r\nglobal.test.concurrent = test.concurrent;\r\nglobal.it.concurrent = test.concurrent;\r\n\r\n// Optimize async test handling\r\njest.retryTimes(1); // Retry flaky tests once\r\n\r\n// Track memory leaks\r\nconst initialMemory = process.memoryUsage();\r\nafterAll(() => {\r\n  const finalMemory = process.memoryUsage();\r\n  const memoryDiff = {\r\n    rss: finalMemory.rss - initialMemory.rss,\r\n    heapTotal: finalMemory.heapTotal - initialMemory.heapTotal,\r\n    heapUsed: finalMemory.heapUsed - initialMemory.heapUsed,\r\n    external: finalMemory.external - initialMemory.external,\r\n  };\r\n  \r\n  console.log('Memory usage difference:', {\r\n    rss: `${(memoryDiff.rss / 1024 / 1024).toFixed(2)} MB`,\r\n    heapTotal: `${(memoryDiff.heapTotal / 1024 / 1024).toFixed(2)} MB`,\r\n    heapUsed: `${(memoryDiff.heapUsed / 1024 / 1024).toFixed(2)} MB`,\r\n    external: `${(memoryDiff.external / 1024 / 1024).toFixed(2)} MB`,\r\n  });\r\n  \r\n  // Force garbage collection to help find leaks\r\n  if (global.gc) {\r\n    global.gc();\r\n  }\r\n}); "],"mappings":"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","ignoreList":[]}