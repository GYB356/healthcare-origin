147b44d2072c44d34c1bac9649e62d6d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _api = require("../../services/api");
var _jestFetchMock = _interopRequireDefault(require("jest-fetch-mock"));
describe('ApiService', () => {
  beforeEach(() => {
    _jestFetchMock.default.resetMocks();
  });
  test('login should return token and user data on success', async () => {
    _jestFetchMock.default.mockResponseOnce(JSON.stringify({
      token: 'mock-token',
      user: {
        _id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        role: 'doctor'
      }
    }));
    const response = await _api.ApiService.login('john@example.com', 'password123');
    expect(response.success).toBe(true);
    expect(response.data).toHaveProperty('token', 'mock-token');
    expect(response.data).toHaveProperty('user');
  });
  test('login should return error message on failure', async () => {
    _jestFetchMock.default.mockRejectOnce(new Error('Invalid credentials'));
    const response = await _api.ApiService.login('john@example.com', 'wrongpassword');
    expect(response.success).toBe(false);
    expect(response.error).toBe('Something went wrong');
  });
  test('getAppointments should return appointments on success', async () => {
    _jestFetchMock.default.mockResponseOnce(JSON.stringify([{
      _id: '1',
      doctor: 'Dr. Smith',
      patient: 'John Doe',
      date: '2023-01-01',
      time: '10:00 AM',
      status: 'scheduled'
    }]));
    const response = await _api.ApiService.getAppointments();
    expect(response.success).toBe(true);
    expect(response.data).toHaveLength(1);
  });
  test('getAppointments should return error message on failure', async () => {
    _jestFetchMock.default.mockRejectOnce(new Error('Failed to fetch appointments'));
    const response = await _api.ApiService.getAppointments();
    expect(response.success).toBe(false);
    expect(response.error).toBe('Something went wrong');
  });
  test('createReport should return report data on success', async () => {
    _jestFetchMock.default.mockResponseOnce(JSON.stringify({
      message: 'Report saved',
      report: {
        _id: '1',
        report: 'Test report content'
      }
    }));
    const response = await _api.ApiService.createReport('123', 'Test transcript');
    expect(response.success).toBe(true);
    expect(response.data).toHaveProperty('report');
  });
  test('createReport should return error message on failure', async () => {
    _jestFetchMock.default.mockRejectOnce(new Error('Failed to create report'));
    const response = await _api.ApiService.createReport('123', 'Test transcript');
    expect(response.success).toBe(false);
    expect(response.error).toBe('Something went wrong');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBpIiwicmVxdWlyZSIsIl9qZXN0RmV0Y2hNb2NrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImZldGNoTW9jayIsInJlc2V0TW9ja3MiLCJ0ZXN0IiwibW9ja1Jlc3BvbnNlT25jZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b2tlbiIsInVzZXIiLCJfaWQiLCJuYW1lIiwiZW1haWwiLCJyb2xlIiwicmVzcG9uc2UiLCJBcGlTZXJ2aWNlIiwibG9naW4iLCJleHBlY3QiLCJzdWNjZXNzIiwidG9CZSIsImRhdGEiLCJ0b0hhdmVQcm9wZXJ0eSIsIm1vY2tSZWplY3RPbmNlIiwiRXJyb3IiLCJlcnJvciIsImRvY3RvciIsInBhdGllbnQiLCJkYXRlIiwidGltZSIsInN0YXR1cyIsImdldEFwcG9pbnRtZW50cyIsInRvSGF2ZUxlbmd0aCIsIm1lc3NhZ2UiLCJyZXBvcnQiLCJjcmVhdGVSZXBvcnQiXSwic291cmNlcyI6WyJhcGkudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXBpJztcbmltcG9ydCBmZXRjaE1vY2sgZnJvbSAnamVzdC1mZXRjaC1tb2NrJztcblxuZGVzY3JpYmUoJ0FwaVNlcnZpY2UnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGZldGNoTW9jay5yZXNldE1vY2tzKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2xvZ2luIHNob3VsZCByZXR1cm4gdG9rZW4gYW5kIHVzZXIgZGF0YSBvbiBzdWNjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgIGZldGNoTW9jay5tb2NrUmVzcG9uc2VPbmNlKEpTT04uc3RyaW5naWZ5KHsgdG9rZW46ICdtb2NrLXRva2VuJywgdXNlcjogeyBfaWQ6ICcxJywgbmFtZTogJ0pvaG4gRG9lJywgZW1haWw6ICdqb2huQGV4YW1wbGUuY29tJywgcm9sZTogJ2RvY3RvcicgfSB9KSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEFwaVNlcnZpY2UubG9naW4oJ2pvaG5AZXhhbXBsZS5jb20nLCAncGFzc3dvcmQxMjMnKTtcbiAgICBleHBlY3QocmVzcG9uc2Uuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzcG9uc2UuZGF0YSkudG9IYXZlUHJvcGVydHkoJ3Rva2VuJywgJ21vY2stdG9rZW4nKTtcbiAgICBleHBlY3QocmVzcG9uc2UuZGF0YSkudG9IYXZlUHJvcGVydHkoJ3VzZXInKTtcbiAgfSk7XG5cbiAgdGVzdCgnbG9naW4gc2hvdWxkIHJldHVybiBlcnJvciBtZXNzYWdlIG9uIGZhaWx1cmUnLCBhc3luYyAoKSA9PiB7XG4gICAgZmV0Y2hNb2NrLm1vY2tSZWplY3RPbmNlKG5ldyBFcnJvcignSW52YWxpZCBjcmVkZW50aWFscycpKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQXBpU2VydmljZS5sb2dpbignam9obkBleGFtcGxlLmNvbScsICd3cm9uZ3Bhc3N3b3JkJyk7XG4gICAgZXhwZWN0KHJlc3BvbnNlLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChyZXNwb25zZS5lcnJvcikudG9CZSgnU29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcbiAgfSk7XG5cbiAgdGVzdCgnZ2V0QXBwb2ludG1lbnRzIHNob3VsZCByZXR1cm4gYXBwb2ludG1lbnRzIG9uIHN1Y2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgZmV0Y2hNb2NrLm1vY2tSZXNwb25zZU9uY2UoSlNPTi5zdHJpbmdpZnkoW3sgX2lkOiAnMScsIGRvY3RvcjogJ0RyLiBTbWl0aCcsIHBhdGllbnQ6ICdKb2huIERvZScsIGRhdGU6ICcyMDIzLTAxLTAxJywgdGltZTogJzEwOjAwIEFNJywgc3RhdHVzOiAnc2NoZWR1bGVkJyB9XSkpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBBcGlTZXJ2aWNlLmdldEFwcG9pbnRtZW50cygpO1xuICAgIGV4cGVjdChyZXNwb25zZS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChyZXNwb25zZS5kYXRhKS50b0hhdmVMZW5ndGgoMSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2dldEFwcG9pbnRtZW50cyBzaG91bGQgcmV0dXJuIGVycm9yIG1lc3NhZ2Ugb24gZmFpbHVyZScsIGFzeW5jICgpID0+IHtcbiAgICBmZXRjaE1vY2subW9ja1JlamVjdE9uY2UobmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggYXBwb2ludG1lbnRzJykpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBBcGlTZXJ2aWNlLmdldEFwcG9pbnRtZW50cygpO1xuICAgIGV4cGVjdChyZXNwb25zZS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QocmVzcG9uc2UuZXJyb3IpLnRvQmUoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NyZWF0ZVJlcG9ydCBzaG91bGQgcmV0dXJuIHJlcG9ydCBkYXRhIG9uIHN1Y2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgZmV0Y2hNb2NrLm1vY2tSZXNwb25zZU9uY2UoSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiAnUmVwb3J0IHNhdmVkJywgcmVwb3J0OiB7IF9pZDogJzEnLCByZXBvcnQ6ICdUZXN0IHJlcG9ydCBjb250ZW50JyB9IH0pKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgQXBpU2VydmljZS5jcmVhdGVSZXBvcnQoJzEyMycsICdUZXN0IHRyYW5zY3JpcHQnKTtcbiAgICBleHBlY3QocmVzcG9uc2Uuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzcG9uc2UuZGF0YSkudG9IYXZlUHJvcGVydHkoJ3JlcG9ydCcpO1xuICB9KTtcblxuICB0ZXN0KCdjcmVhdGVSZXBvcnQgc2hvdWxkIHJldHVybiBlcnJvciBtZXNzYWdlIG9uIGZhaWx1cmUnLCBhc3luYyAoKSA9PiB7XG4gICAgZmV0Y2hNb2NrLm1vY2tSZWplY3RPbmNlKG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSByZXBvcnQnKSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEFwaVNlcnZpY2UuY3JlYXRlUmVwb3J0KCcxMjMnLCAnVGVzdCB0cmFuc2NyaXB0Jyk7XG4gICAgZXhwZWN0KHJlc3BvbnNlLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdChyZXNwb25zZS5lcnJvcikudG9CZSgnU29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsSUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsY0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsTUFBTTtFQUMzQkMsVUFBVSxDQUFDLE1BQU07SUFDZkMsc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxvREFBb0QsRUFBRSxZQUFZO0lBQ3JFRixzQkFBUyxDQUFDRyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUM7TUFBRUMsS0FBSyxFQUFFLFlBQVk7TUFBRUMsSUFBSSxFQUFFO1FBQUVDLEdBQUcsRUFBRSxHQUFHO1FBQUVDLElBQUksRUFBRSxVQUFVO1FBQUVDLEtBQUssRUFBRSxrQkFBa0I7UUFBRUMsSUFBSSxFQUFFO01BQVM7SUFBRSxDQUFDLENBQUMsQ0FBQztJQUVwSixNQUFNQyxRQUFRLEdBQUcsTUFBTUMsZUFBVSxDQUFDQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDO0lBQzFFQyxNQUFNLENBQUNILFFBQVEsQ0FBQ0ksT0FBTyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkNGLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDTSxJQUFJLENBQUMsQ0FBQ0MsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7SUFDM0RKLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDTSxJQUFJ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