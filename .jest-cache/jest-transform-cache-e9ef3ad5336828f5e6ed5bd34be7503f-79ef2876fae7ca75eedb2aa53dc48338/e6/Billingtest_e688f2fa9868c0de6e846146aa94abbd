6e015df019b87fb4267cb663bd556c84
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _Billing = _interopRequireDefault(require("../Billing"));
var _AuthContext = require("../../contexts/AuthContext");
var _jsxRuntime = require("react/jsx-runtime");
describe('Billing Component', () => {
  const mockUser = {
    id: 1,
    name: 'John Doe',
    email: 'john@example.com',
    role: 'PATIENT'
  };
  const mockBillingData = {
    invoices: [{
      id: 1,
      amount: 100,
      date: '2024-03-20',
      status: 'PENDING'
    }],
    insurance: {
      provider: 'Test Insurance',
      policyNumber: '12345'
    }
  };
  it('renders billing information', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
      value: {
        user: mockUser
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {
        data: mockBillingData
      })
    }));
    expect(_react2.screen.getByText('Billing Dashboard')).toBeInTheDocument();
    expect(_react2.screen.getByText('Test Insurance')).toBeInTheDocument();
    expect(_react2.screen.getByText('12345')).toBeInTheDocument();
    expect(_react2.screen.getByText('$100')).toBeInTheDocument();
  });
  it('handles payment submission', () => {
    const mockHandlePayment = jest.fn();
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
      value: {
        user: mockUser
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {
        data: mockBillingData,
        onPayment: mockHandlePayment
      })
    }));
    _react2.fireEvent.click(_react2.screen.getByText('Pay Now'));
    expect(mockHandlePayment).toHaveBeenCalledWith(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfQmlsbGluZyIsIl9BdXRoQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiZGVzY3JpYmUiLCJtb2NrVXNlciIsImlkIiwibmFtZSIsImVtYWlsIiwicm9sZSIsIm1vY2tCaWxsaW5nRGF0YSIsImludm9pY2VzIiwiYW1vdW50IiwiZGF0ZSIsInN0YXR1cyIsImluc3VyYW5jZSIsInByb3ZpZGVyIiwicG9saWN5TnVtYmVyIiwiaXQiLCJyZW5kZXIiLCJqc3giLCJBdXRoQ29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VyIiwiY2hpbGRyZW4iLCJkZWZhdWx0IiwiZGF0YSIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwibW9ja0hhbmRsZVBheW1lbnQiLCJqZXN0IiwiZm4iLCJvblBheW1lbnQiLCJmaXJlRXZlbnQiLCJjbGljayIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sInNvdXJjZXMiOlsiQmlsbGluZy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdCc7XG5pbXBvcnQgQmlsbGluZyBmcm9tICcuLi9CaWxsaW5nJztcbmltcG9ydCB7IEF1dGhDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dHMvQXV0aENvbnRleHQnO1xuXG5kZXNjcmliZSgnQmlsbGluZyBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tVc2VyID0ge1xuICAgIGlkOiAxLFxuICAgIG5hbWU6ICdKb2huIERvZScsXG4gICAgZW1haWw6ICdqb2huQGV4YW1wbGUuY29tJyxcbiAgICByb2xlOiAnUEFUSUVOVCdcbiAgfTtcblxuICBjb25zdCBtb2NrQmlsbGluZ0RhdGEgPSB7XG4gICAgaW52b2ljZXM6IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGFtb3VudDogMTAwLFxuICAgICAgICBkYXRlOiAnMjAyNC0wMy0yMCcsXG4gICAgICAgIHN0YXR1czogJ1BFTkRJTkcnXG4gICAgICB9XG4gICAgXSxcbiAgICBpbnN1cmFuY2U6IHtcbiAgICAgIHByb3ZpZGVyOiAnVGVzdCBJbnN1cmFuY2UnLFxuICAgICAgcG9saWN5TnVtYmVyOiAnMTIzNDUnXG4gICAgfVxuICB9O1xuXG4gIGl0KCdyZW5kZXJzIGJpbGxpbmcgaW5mb3JtYXRpb24nLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPEF1dGhDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IHVzZXI6IG1vY2tVc2VyIH19PlxuICAgICAgICA8QmlsbGluZyBkYXRhPXttb2NrQmlsbGluZ0RhdGF9IC8+XG4gICAgICA8L0F1dGhDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQmlsbGluZyBEYXNoYm9hcmQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGVzdCBJbnN1cmFuY2UnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMTIzNDUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnJDEwMCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBwYXltZW50IHN1Ym1pc3Npb24nLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0hhbmRsZVBheW1lbnQgPSBqZXN0LmZuKCk7XG5cbiAgICByZW5kZXIoXG4gICAgICA8QXV0aENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgdXNlcjogbW9ja1VzZXIgfX0+XG4gICAgICAgIDxCaWxsaW5nIGRhdGE9e21vY2tCaWxsaW5nRGF0YX0gb25QYXltZW50PXttb2NrSGFuZGxlUGF5bWVudH0gLz5cbiAgICAgIDwvQXV0aENvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcblxuICAgIGZpcmVFdmVudC5jbGljayhzY3JlZW4uZ2V0QnlUZXh0KCdQYXkgTm93JykpO1xuICAgIGV4cGVjdChtb2NrSGFuZGxlUGF5bWVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoMSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUF5RCxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFFekRLLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNO0VBQ2xDLE1BQU1DLFFBQVEsR0FBRztJQUNmQyxFQUFFLEVBQUUsQ0FBQztJQUNMQyxJQUFJLEVBQUUsVUFBVTtJQUNoQkMsS0FBSyxFQUFFLGtCQUFrQjtJQUN6QkMsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUVELE1BQU1DLGVBQWUsR0FBRztJQUN0QkMsUUFBUSxFQUFFLENBQ1I7TUFDRUwsRUFBRSxFQUFFLENBQUM7TUFDTE0sTUFBTSxFQUFFLEdBQUc7TUFDWEMsSUFBSSxFQUFFLFlBQVk7TUFDbEJDLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FDRjtJQUNEQyxTQUFTLEVBQUU7TUFDVEMsUUFBUSxFQUFFLGdCQUFnQjtNQUMxQkMsWUFBWSxFQUFFO0lBQ2hCO0VBQ0YsQ0FBQztFQUVEQyxFQUFFLENBQUMsNkJBQTZCLEVBQUUsTUFBTTtJQUN0QyxJQUFBQyxjQUFNLGVBQ0osSUFBQWhCLFdBQUEsQ0FBQWlCLEdBQUEsRUFBQ2xCLFlBQUEsQ0FBQW1CLFdBQVcsQ0FBQ0MsUUFBUTtNQUFDQyxLQUFLLEVBQUU7UUFBRUMsSUFBSSxFQUFFbkI7TUFBUyxDQUFFO01BQUFvQixRQUFBLGVBQzlDLElBQUF0QixXQUFBLENBQUFpQixHQUFBLEVBQUNuQixRQUFBLENBQUF5QixPQUFPO1FBQUNDLElBQUksRUFBRWpCO01BQWdCLENBQUU7SUFBQyxDQUNkLENBQ3hCLENBQUM7SUFFRGtCLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pFSCxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztJQUM5REgsTUFBTSxDQUFDQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JESCxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDdEQsQ0FBQyxDQUFDO0VBRUZiLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxNQUFNO0lBQ3JDLE1BQU1jLGlCQUFpQixHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBRW5DLElBQUFmLGNBQU0sZUFDSixJQUFBaEIsV0FBQSxDQUFBaUIsR0FBQSxFQUFDbEIsWUFBQSxDQUFBbUIsV0FBVyxDQUFDQyxRQUFRO01BQUNDLEtBQUssRUFBRTtRQUFFQyxJQUFJLEVBQUVuQjtNQUFTLENBQUU7TUFBQW9CLFFBQUEsZUFDOUMsSUFBQXRCLFdBQUEsQ0FBQWlCLEdBQUEsRUFBQ25CLFFBQUEsQ0FBQXlCLE9BQU87UUFBQ0MsSUFBSSxFQUFFakIsZUFBZ0I7UUFBQ3lCLFNBQVMsRUFBRUg7TUFBa0IsQ0FBRTtJQUFDLENBQzVDLENBQ3hCLENBQUM7SUFFREksaUJBQVMsQ0FBQ0MsS0FBSyxDQUFDUixjQUFNLENBQUNDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1Q0YsTUFBTSxDQUFDSSxpQkFBaUIsQ0FBQyxDQUFDTSxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7RUFDbkQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119