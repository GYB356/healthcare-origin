{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_InvoiceList","_jsxRuntime","mockInvoices","_id","amount","status","date","describe","test","render","jsx","default","invoices","expect","screen","getByText","toBeInTheDocument","getAllByRole","toHaveLength","length","it","number","dueDate"],"sources":["InvoiceList.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport InvoiceList from '../InvoiceList';\n\nconst mockInvoices = [\n  { _id: '1', amount: 100, status: 'paid', date: '2023-01-01' },\n  { _id: '2', amount: 200, status: 'unpaid', date: '2023-02-01' }\n];\n\ndescribe('InvoiceList Component', () => {\n  test('renders without crashing', () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    expect(screen.getByText('Invoices')).toBeInTheDocument();\n  });\n\n  test('displays the correct number of invoices', () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    expect(screen.getAllByRole('listitem')).toHaveLength(mockInvoices.length);\n  });\n\n  test('displays invoice details correctly', () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    expect(screen.getByText('$100')).toBeInTheDocument();\n    expect(screen.getByText('paid')).toBeInTheDocument();\n  });\n});\n\n// Test to check if InvoiceList renders correctly with no invoices\nit('renders no invoices message when invoice list is empty', () => {\n  render(<InvoiceList invoices={[]} />);\n  expect(screen.getByText(/no invoices available/i)).toBeInTheDocument();\n});\n\n// Test to check if InvoiceList renders invoices correctly\nit('renders invoices correctly', () => {\n  const invoices = [\n    { _id: '1', number: 'INV-001', amount: 100, dueDate: '2023-12-31' },\n    { _id: '2', number: 'INV-002', amount: 200, dueDate: '2024-01-15' }\n  ];\n  render(<InvoiceList invoices={invoices} />);\n  expect(screen.getByText(/inv-001/i)).toBeInTheDocument();\n  expect(screen.getByText(/inv-002/i)).toBeInTheDocument();\n}); "],"mappings":";;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACAA,OAAA;AACA,IAAAE,YAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAyC,IAAAG,WAAA,GAAAH,OAAA;AAEzC,MAAMI,YAAY,GAAG,CACnB;EAAEC,GAAG,EAAE,GAAG;EAAEC,MAAM,EAAE,GAAG;EAAEC,MAAM,EAAE,MAAM;EAAEC,IAAI,EAAE;AAAa,CAAC,EAC7D;EAAEH,GAAG,EAAE,GAAG;EAAEC,MAAM,EAAE,GAAG;EAAEC,MAAM,EAAE,QAAQ;EAAEC,IAAI,EAAE;AAAa,CAAC,CAChE;AAEDC,QAAQ,CAAC,uBAAuB,EAAE,MAAM;EACtCC,IAAI,CAAC,0BAA0B,EAAE,MAAM;IACrC,IAAAC,cAAM,eAAC,IAAAR,WAAA,CAAAS,GAAA,EAACV,YAAA,CAAAW,OAAW;MAACC,QAAQ,EAAEV;IAAa,CAAE,CAAC,CAAC;IAC/CW,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,UAAU,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC1D,CAAC,CAAC;EAEFR,IAAI,CAAC,yCAAyC,EAAE,MAAM;IACpD,IAAAC,cAAM,eAAC,IAAAR,WAAA,CAAAS,GAAA,EAACV,YAAA,CAAAW,OAAW;MAACC,QAAQ,EAAEV;IAAa,CAAE,CAAC,CAAC;IAC/CW,MAAM,CAACC,cAAM,CAACG,YAAY,CAAC,UAAU,CAAC,CAAC,CAACC,YAAY,CAAChB,YAAY,CAACiB,MAAM,CAAC;EAC3E,CAAC,CAAC;EAEFX,IAAI,CAAC,oCAAoC,EAAE,MAAM;IAC/C,IAAAC,cAAM,eAAC,IAAAR,WAAA,CAAAS,GAAA,EAACV,YAAA,CAAAW,OAAW;MAACC,QAAQ,EAAEV;IAAa,CAAE,CAAC,CAAC;IAC/CW,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,MAAM,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;IACpDH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,MAAM,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACtD,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAI,EAAE,CAAC,wDAAwD,EAAE,MAAM;EACjE,IAAAX,cAAM,eAAC,IAAAR,WAAA,CAAAS,GAAA,EAACV,YAAA,CAAAW,OAAW;IAACC,QAAQ,EAAE;EAAG,CAAE,CAAC,CAAC;EACrCC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,wBAAwB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;AACxE,CAAC,CAAC;;AAEF;AACAI,EAAE,CAAC,4BAA4B,EAAE,MAAM;EACrC,MAAMR,QAAQ,GAAG,CACf;IAAET,GAAG,EAAE,GAAG;IAAEkB,MAAM,EAAE,SAAS;IAAEjB,MAAM,EAAE,GAAG;IAAEkB,OAAO,EAAE;EAAa,CAAC,EACnE;IAAEnB,GAAG,EAAE,GAAG;IAAEkB,MAAM,EAAE,SAAS;IAAEjB,MAAM,EAAE,GAAG;IAAEkB,OAAO,EAAE;EAAa,CAAC,CACpE;EACD,IAAAb,cAAM,eAAC,IAAAR,WAAA,CAAAS,GAAA,EAACV,YAAA,CAAAW,OAAW;IAACC,QAAQ,EAAEA;EAAS,CAAE,CAAC,CAAC;EAC3CC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,UAAU,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACxDH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,UAAU,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;AAC1D,CAAC,CAAC","ignoreList":[]}