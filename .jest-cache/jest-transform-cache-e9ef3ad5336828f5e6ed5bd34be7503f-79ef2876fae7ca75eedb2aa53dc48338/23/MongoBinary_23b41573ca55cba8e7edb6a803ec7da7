98331f6fc4f7a961a4bdab6192aba038
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MongoBinary = void 0;
const tslib_1 = require("tslib");
const os_1 = (0, tslib_1.__importDefault)(require("os"));
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const MongoBinaryDownload_1 = (0, tslib_1.__importDefault)(require("./MongoBinaryDownload"));
const resolveConfig_1 = (0, tslib_1.__importStar)(require("./resolveConfig"));
const debug_1 = (0, tslib_1.__importDefault)(require("debug"));
const semver = (0, tslib_1.__importStar)(require("semver"));
const utils_1 = require("./utils");
const child_process_1 = require("child_process");
const lockfile_1 = require("./lockfile");
const DryMongoBinary_1 = require("./DryMongoBinary");
const log = (0, debug_1.default)('MongoMS:MongoBinary');
/**
 * Class used to combine "DryMongoBinary" & "MongoBinaryDownload"
 */
class MongoBinary {
  /**
   * Probe download path and download the binary
   * @param options Options Configuring which binary to download and to which path
   * @returns The BinaryPath the binary has been downloaded to
   */
  static download(options) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
      log('download');
      const {
        downloadDir,
        version
      } = options;
      // create downloadDir
      yield (0, utils_1.mkdir)(downloadDir);
      /** Lockfile path */
      const lockfile = path_1.default.resolve(downloadDir, `${version}.lock`);
      log(`download: Waiting to acquire Download lock for file "${lockfile}"`);
      // wait to get a lock
      // downloading of binaries may be quite long procedure
      // that's why we are using so big wait/stale periods
      const lock = yield lockfile_1.LockFile.lock(lockfile);
      log('download: Download lock acquired');
      // this is to ensure that the lockfile gets removed in case of an error
      try {
        // check cache if it got already added to the cache
        if (!DryMongoBinary_1.DryMongoBinary.binaryCache.has(version)) {
          log(`download: Adding version ${version} to cache`);
          const downloader = new MongoBinaryDownload_1.default(options);
          DryMongoBinary_1.DryMongoBinary.binaryCache.set(version, yield downloader.getMongodPath());
        }
      } finally {
        log('download: Removing Download lock');
        // remove lock
        yield lock.unlock();
        log('download: Download lock removed');
      }
      const cachePath = DryMongoBinary_1.DryMongoBinary.binaryCache.get(version);
      // ensure that "path" exists, so the return type does not change
      (0, utils_1.assertion)(typeof cachePath === 'string', new Error(`No Cache Path for version "${version}" found (and download failed silently?)`));
      return cachePath;
    });
  }
  /**
   * Probe all supported paths for an binary and return the binary path
   * @param opts Options configuring which binary to search for
   * @throws {Error} if no valid BinaryPath has been found
   * @returns The first found BinaryPath
   */
  static getPath(opts = {}) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
      log('getPath');
      // "||" is still used here, because it should default if the value is false-y (like an empty string)
      const options = Object.assign(Object.assign({}, yield DryMongoBinary_1.DryMongoBinary.generateOptions(opts)), {
        platform: opts.platform || (0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.PLATFORM) || os_1.default.platform(),
        checkMD5: opts.checkMD5 || (0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.MD5_CHECK))
      });
      log(`getPath: MongoBinary options:`, JSON.stringify(options, null, 2));
      let binaryPath = yield DryMongoBinary_1.DryMongoBinary.locateBinary(options);
      // check if the system binary has the same version as requested
      if (!!options.systemBinary) {
        // this case should actually never be false, because if "SYSTEM_BINARY" is set, "locateBinary" will run "getSystemPath" which tests the path for permissions
        if (!(0, utils_1.isNullOrUndefined)(binaryPath)) {
          log(`getPath: Spawning binaryPath "${binaryPath}" to get version`);
          const spawnOutput = (0, child_process_1.spawnSync)(binaryPath, ['--version']).stdout.toString()
          // this regex is to match the first line of the "mongod --version" output "db version v4.0.25" OR "db version v4.2.19-11-ge2f2736"
          .match(/^\s*db\s+version\s+v?(\d+\.\d+\.\d+)(-\d*)?(-[a-zA-Z0-9].*)?\s*$/im);
          (0, utils_1.assertion)(!(0, utils_1.isNullOrUndefined)(spawnOutput), new Error('Couldnt find an version from system binary output!'));
          // dont warn if the versions dont match if "SYSTEM_BINARY_VERSION_CHECK" is false, but still test the binary if it is available to be executed
          if ((0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.SYSTEM_BINARY_VERSION_CHECK))) {
            log('getPath: Checking & Warning about version conflicts');
            const binaryVersion = spawnOutput[1];
            if (semver.neq(options.version, binaryVersion)) {
              // we will log the version number of the system binary and the version requested so the user can see the difference
              console.warn('getPath: MongoMemoryServer: Possible version conflict\n' + `  SystemBinary version: "${binaryVersion}"\n` + `  Requested version:    "${options.version}"\n\n` + '  Using SystemBinary!');
            }
          }
        } else {
          throw new Error('Option "SYSTEM_BINARY" was set, but binaryPath was empty! (system binary could not be found?) [This Error should normally not be thrown, please report this]');
        }
      }
      (0, utils_1.assertion)(typeof options.version === 'string', new Error('"MongoBinary.options.version" is not an string!'));
      if (!binaryPath) {
        if ((0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.RUNTIME_DOWNLOAD))) {
          log('getPath: "RUNTIME_DOWNLOAD" is "true", trying to download');
          binaryPath = yield this.download(options);
        } else {
          log('getPath: "RUNTIME_DOWNLOAD" is "false", not downloading');
        }
      }
      if (!binaryPath) {
        const runtimeDownload = (0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.RUNTIME_DOWNLOAD));
        throw new Error(`MongoBinary.getPath: could not find an valid binary path! (Got: "${binaryPath}", RUNTIME_DOWNLOAD: "${runtimeDownload}")`);
      }
      log(`getPath: Mongod binary path: "${binaryPath}"`);
      return binaryPath;
    });
  }
}
exports.MongoBinary = MongoBinary;
exports.default = MongoBinary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvc18xIiwidHNsaWJfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJwYXRoXzEiLCJNb25nb0JpbmFyeURvd25sb2FkXzEiLCJyZXNvbHZlQ29uZmlnXzEiLCJfX2ltcG9ydFN0YXIiLCJkZWJ1Z18xIiwic2VtdmVyIiwidXRpbHNfMSIsImNoaWxkX3Byb2Nlc3NfMSIsImxvY2tmaWxlXzEiLCJEcnlNb25nb0JpbmFyeV8xIiwibG9nIiwiZGVmYXVsdCIsIk1vbmdvQmluYXJ5IiwiZG93bmxvYWQiLCJvcHRpb25zIiwiZG93bmxvYWREaXIiLCJ2ZXJzaW9uIiwibWtkaXIiLCJsb2NrZmlsZSIsInJlc29sdmUiLCJsb2NrIiwiTG9ja0ZpbGUiLCJEcnlNb25nb0JpbmFyeSIsImJpbmFyeUNhY2hlIiwiaGFzIiwiZG93bmxvYWRlciIsInNldCIsImdldE1vbmdvZFBhdGgiLCJ1bmxvY2siLCJjYWNoZVBhdGgiLCJnZXQiLCJhc3NlcnRpb24iLCJFcnJvciIsImdldFBhdGgiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2VuZXJhdGVPcHRpb25zIiwicGxhdGZvcm0iLCJSZXNvbHZlQ29uZmlnVmFyaWFibGVzIiwiUExBVEZPUk0iLCJjaGVja01ENSIsImVudlRvQm9vbCIsIk1ENV9DSEVDSyIsIkpTT04iLCJzdHJpbmdpZnkiLCJiaW5hcnlQYXRoIiwibG9jYXRlQmluYXJ5Iiwic3lzdGVtQmluYXJ5IiwiaXNOdWxsT3JVbmRlZmluZWQiLCJzcGF3bk91dHB1dCIsInNwYXduU3luYyIsInN0ZG91dCIsInRvU3RyaW5nIiwibWF0Y2giLCJTWVNURU1fQklOQVJZX1ZFUlNJT05fQ0hFQ0siLCJiaW5hcnlWZXJzaW9uIiwibmVxIiwiY29uc29sZSIsIndhcm4iLCJSVU5USU1FX0RPV05MT0FEIiwicnVudGltZURvd25sb2FkIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL01vbmdvQmluYXJ5LnRzIl0sInNvdXJjZXNDb250ZW50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