38dc51ccc213a7f3aad843081755fdec
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _PaymentMethods = _interopRequireDefault(require("../PaymentMethods"));
var _jsxRuntime = require("react/jsx-runtime");
const mockPaymentMethods = [{
  _id: '1',
  cardType: 'Visa',
  lastFour: '1234',
  expiryMonth: '12',
  expiryYear: '2025',
  billingName: 'John Doe',
  isDefault: true
}, {
  _id: '2',
  cardType: 'MasterCard',
  lastFour: '5678',
  expiryMonth: '11',
  expiryYear: '2024',
  billingName: 'Jane Doe',
  isDefault: false
}];
describe('PaymentMethods Component', () => {
  test('renders without crashing', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    expect(_react2.screen.getByText('Payment Methods')).toBeInTheDocument();
  });
  test('displays the correct number of payment methods', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    expect(_react2.screen.getAllByRole('listitem')).toHaveLength(mockPaymentMethods.length);
  });
  test('displays payment method details correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    expect(_react2.screen.getByText('Visa •••• 1234')).toBeInTheDocument();
    expect(_react2.screen.getByText('John Doe')).toBeInTheDocument();
  });
  test('handles set default payment method', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    _react2.fireEvent.click(_react2.screen.getByText('Set as Default'));
    // Check if the default method is updated
  });
});

// Test to check if PaymentMethods renders correctly with no payment methods
it('renders no payment methods message when list is empty', () => {
  (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
    paymentMethods: []
  }));
  expect(_react2.screen.getByText(/no payment methods/i)).toBeInTheDocument();
});

// Test to check if PaymentMethods renders payment methods correctly
it('renders payment methods correctly', () => {
  const paymentMethods = [{
    _id: '1',
    cardType: 'Visa',
    lastFour: '1234',
    expiryMonth: '12',
    expiryYear: '2023',
    billingName: 'John Doe'
  }, {
    _id: '2',
    cardType: 'Mastercard',
    lastFour: '5678',
    expiryMonth: '01',
    expiryYear: '2024',
    billingName: 'Jane Smith'
  }];
  (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
    paymentMethods: paymentMethods
  }));
  expect(_react2.screen.getByText(/visa/i)).toBeInTheDocument();
  expect(_react2.screen.getByText(/mastercard/i)).toBeInTheDocument();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfUGF5bWVudE1ldGhvZHMiLCJfanN4UnVudGltZSIsIm1vY2tQYXltZW50TWV0aG9kcyIsIl9pZCIsImNhcmRUeXBlIiwibGFzdEZvdXIiLCJleHBpcnlNb250aCIsImV4cGlyeVllYXIiLCJiaWxsaW5nTmFtZSIsImlzRGVmYXVsdCIsImRlc2NyaWJlIiwidGVzdCIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJwYXltZW50TWV0aG9kcyIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwiZ2V0QWxsQnlSb2xlIiwidG9IYXZlTGVuZ3RoIiwibGVuZ3RoIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJpdCJdLCJzb3VyY2VzIjpbIlBheW1lbnRNZXRob2RzLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0JztcbmltcG9ydCBQYXltZW50TWV0aG9kcyBmcm9tICcuLi9QYXltZW50TWV0aG9kcyc7XG5cbmNvbnN0IG1vY2tQYXltZW50TWV0aG9kcyA9IFtcbiAgeyBfaWQ6ICcxJywgY2FyZFR5cGU6ICdWaXNhJywgbGFzdEZvdXI6ICcxMjM0JywgZXhwaXJ5TW9udGg6ICcxMicsIGV4cGlyeVllYXI6ICcyMDI1JywgYmlsbGluZ05hbWU6ICdKb2huIERvZScsIGlzRGVmYXVsdDogdHJ1ZSB9LFxuICB7IF9pZDogJzInLCBjYXJkVHlwZTogJ01hc3RlckNhcmQnLCBsYXN0Rm91cjogJzU2NzgnLCBleHBpcnlNb250aDogJzExJywgZXhwaXJ5WWVhcjogJzIwMjQnLCBiaWxsaW5nTmFtZTogJ0phbmUgRG9lJywgaXNEZWZhdWx0OiBmYWxzZSB9XG5dO1xuXG5kZXNjcmliZSgnUGF5bWVudE1ldGhvZHMgQ29tcG9uZW50JywgKCkgPT4ge1xuICB0ZXN0KCdyZW5kZXJzIHdpdGhvdXQgY3Jhc2hpbmcnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQYXltZW50TWV0aG9kcyBwYXltZW50TWV0aG9kcz17bW9ja1BheW1lbnRNZXRob2RzfSAvPik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1BheW1lbnQgTWV0aG9kcycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICB0ZXN0KCdkaXNwbGF5cyB0aGUgY29ycmVjdCBudW1iZXIgb2YgcGF5bWVudCBtZXRob2RzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8UGF5bWVudE1ldGhvZHMgcGF5bWVudE1ldGhvZHM9e21vY2tQYXltZW50TWV0aG9kc30gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QWxsQnlSb2xlKCdsaXN0aXRlbScpKS50b0hhdmVMZW5ndGgobW9ja1BheW1lbnRNZXRob2RzLmxlbmd0aCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Rpc3BsYXlzIHBheW1lbnQgbWV0aG9kIGRldGFpbHMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIHJlbmRlcig8UGF5bWVudE1ldGhvZHMgcGF5bWVudE1ldGhvZHM9e21vY2tQYXltZW50TWV0aG9kc30gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdWaXNhIOKAouKAouKAouKAoiAxMjM0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0pvaG4gRG9lJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2hhbmRsZXMgc2V0IGRlZmF1bHQgcGF5bWVudCBtZXRob2QnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQYXltZW50TWV0aG9kcyBwYXltZW50TWV0aG9kcz17bW9ja1BheW1lbnRNZXRob2RzfSAvPik7XG4gICAgZmlyZUV2ZW50LmNsaWNrKHNjcmVlbi5nZXRCeVRleHQoJ1NldCBhcyBEZWZhdWx0JykpO1xuICAgIC8vIENoZWNrIGlmIHRoZSBkZWZhdWx0IG1ldGhvZCBpcyB1cGRhdGVkXG4gIH0pO1xufSk7XG5cbi8vIFRlc3QgdG8gY2hlY2sgaWYgUGF5bWVudE1ldGhvZHMgcmVuZGVycyBjb3JyZWN0bHkgd2l0aCBubyBwYXltZW50IG1ldGhvZHNcbml0KCdyZW5kZXJzIG5vIHBheW1lbnQgbWV0aG9kcyBtZXNzYWdlIHdoZW4gbGlzdCBpcyBlbXB0eScsICgpID0+IHtcbiAgcmVuZGVyKDxQYXltZW50TWV0aG9kcyBwYXltZW50TWV0aG9kcz17W119IC8+KTtcbiAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL25vIHBheW1lbnQgbWV0aG9kcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbn0pO1xuXG4vLyBUZXN0IHRvIGNoZWNrIGlmIFBheW1lbnRNZXRob2RzIHJlbmRlcnMgcGF5bWVudCBtZXRob2RzIGNvcnJlY3RseVxuaXQoJ3JlbmRlcnMgcGF5bWVudCBtZXRob2RzIGNvcnJlY3RseScsICgpID0+IHtcbiAgY29uc3QgcGF5bWVudE1ldGhvZHMgPSBbXG4gICAgeyBfaWQ6ICcxJywgY2FyZFR5cGU6ICdWaXNhJywgbGFzdEZvdXI6ICcxMjM0JywgZXhwaXJ5TW9udGg6ICcxMicsIGV4cGlyeVllYXI6ICcyMDIzJywgYmlsbGluZ05hbWU6ICdKb2huIERvZScgfSxcbiAgICB7IF9pZDogJzInLCBjYXJkVHlwZTogJ01hc3RlcmNhcmQnLCBsYXN0Rm91cjogJzU2NzgnLCBleHBpcnlNb250aDogJzAxJywgZXhwaXJ5WWVhcjogJzIwMjQnLCBiaWxsaW5nTmFtZTogJ0phbmUgU21pdGgnIH1cbiAgXTtcbiAgcmVuZGVyKDxQYXltZW50TWV0aG9kcyBwYXltZW50TWV0aG9kcz17cGF5bWVudE1ldGhvZHN9IC8+KTtcbiAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3Zpc2EvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9tYXN0ZXJjYXJkL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xufSk7ICJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRSxlQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBK0MsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBRS9DLE1BQU1JLGtCQUFrQixHQUFHLENBQ3pCO0VBQUVDLEdBQUcsRUFBRSxHQUFHO0VBQUVDLFFBQVEsRUFBRSxNQUFNO0VBQUVDLFFBQVEsRUFBRSxNQUFNO0VBQUVDLFdBQVcsRUFBRSxJQUFJO0VBQUVDLFVBQVUsRUFBRSxNQUFNO0VBQUVDLFdBQVcsRUFBRSxVQUFVO0VBQUVDLFNBQVMsRUFBRTtBQUFLLENBQUMsRUFDakk7RUFBRU4sR0FBRyxFQUFFLEdBQUc7RUFBRUMsUUFBUSxFQUFFLFlBQVk7RUFBRUMsUUFBUSxFQUFFLE1BQU07RUFBRUMsV0FBVyxFQUFFLElBQUk7RUFBRUMsVUFBVSxFQUFFLE1BQU07RUFBRUMsV0FBVyxFQUFFLFVBQVU7RUFBRUMsU0FBUyxFQUFFO0FBQU0sQ0FBQyxDQUN6STtBQUVEQyxRQUFRLENBQUMsMEJBQTBCLEVBQUUsTUFBTTtFQUN6Q0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLE1BQU07SUFDckMsSUFBQUMsY0FBTSxlQUFDLElBQUFYLFdBQUEsQ0FBQVksR0FBQSxFQUFDYixlQUFBLENBQUFjLE9BQWM7TUFBQ0MsY0FBYyxFQUFFYjtJQUFtQixDQUFFLENBQUMsQ0FBQztJQUM5RGMsTUFBTSxDQUFDQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDakUsQ0FBQyxDQUFDO0VBRUZSLElBQUksQ0FBQyxnREFBZ0QsRUFBRSxNQUFNO0lBQzNELElBQUFDLGNBQU0sZUFBQyxJQUFBWCxXQUFBLENBQUFZLEdBQUEsRUFBQ2IsZUFBQSxDQUFBYyxPQUFjO01BQUNDLGNBQWMsRUFBRWI7SUFBbUIsQ0FBRSxDQUFDLENBQUM7SUFDOURjLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDRyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQ0MsWUFBWSxDQUFDbkIsa0JBQWtCLENBQUNvQixNQUFNLENBQUM7RUFDakYsQ0FBQyxDQUFDO0VBRUZYLElBQUksQ0FBQywyQ0FBMkMsRUFBRSxNQUFNO0lBQ3RELElBQUFDLGNBQU0sZUFBQyxJQUFBWCxXQUFBLENBQUFZLEdBQUEsRUFBQ2IsZUFBQSxDQUFBYyxPQUFjO01BQUNDLGNBQWMsRUFBRWI7SUFBbUIsQ0FBRSxDQUFDLENBQUM7SUFDOURjLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzlESCxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDMUQsQ0FBQyxDQUFDO0VBRUZSLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxNQUFNO0lBQy9DLElBQUFDLGNBQU0sZUFBQyxJQUFBWCxXQUFBLENBQUFZLEdBQUEsRUFBQ2IsZUFBQSxDQUFBYyxPQUFjO01BQUNDLGNBQWMsRUFBRWI7SUFBbUIsQ0FBRSxDQUFDLENBQUM7SUFDOURxQixpQkFBUyxDQUFDQyxLQUFLLENBQUNQLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbkQ7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7O0FBRUY7QUFDQU8sRUFBRSxDQUFDLHVEQUF1RCxFQUFFLE1BQU07RUFDaEUsSUFBQWIsY0FBTSxlQUFDLElBQUFYLFdBQUEsQ0FBQVksR0FBQSxFQUFDYixlQUFBLENBQUFjLE9BQWM7SUFBQ0MsY0FBYyxFQUFFO0VBQUcsQ0FBRSxDQUFDLENBQUM7RUFDOUNDLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3JFLENBQUMsQ0FBQzs7QUFFRjtBQUNBTSxFQUFFLENBQUMsbUNBQW1DLEVBQUUsTUFBTTtFQUM1QyxNQUFNVixjQUFjLEdBQUcsQ0FDckI7SUFBRVosR0FBRyxFQUFFLEdBQUc7SUFBRUMsUUFBUSxFQUFFLE1BQU07SUFBRUMsUUFBUSxFQUFFLE1BQU07SUFBRUMsV0FBVyxFQUFFLElBQUk7SUFBRUMsVUFBVSxFQUFFLE1BQU07SUFBRUMsV0FBVyxFQUFFO0VBQVcsQ0FBQyxFQUNoSDtJQUFFTCxHQUFHLEVBQUUsR0FBRztJQUFFQyxRQUFRLEVBQUUsWUFBWTtJQUFFQyxRQUFRLEVBQUUsTUFBTTtJQUFFQyxXQUFXLEVBQUUsSUFBSTtJQUFFQyxVQUFVLEVBQUUsTUFBTTtJQUFFQyxXQUFXLEVBQUU7RUFBYSxDQUFDLENBQ3pIO0VBQ0QsSUFBQUksY0FBTSxlQUFDLElBQUFYLFdBQUEsQ0FBQVksR0FBQSxFQUFDYixlQUFBLENBQUFjLE9BQWM7SUFBQ0MsY0FBYyxFQUFFQTtFQUFlLENBQUUsQ0FBQyxDQUFDO0VBQzFEQyxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDckRILE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=