{"version":3,"names":["_getJestObj","mock","AuthProvider","children","useAuth","user","id","name","email","role","_interopRequireDefault","require","_react","_react2","_reactRouterDom","_AuthContext","_StaffScheduling","_jsxRuntime","jest","global","fetch","fn","renderWithRouter","component","render","jsx","BrowserRouter","describe","beforeEach","clearAllMocks","mockResolvedValue","ok","json","schedules","staffId","staffName","department","startTime","endTime","notes","test","default","expect","screen","getByText","toBeInTheDocument","waitFor","toHaveBeenCalledTimes","toHaveBeenCalledWith","mockRejectedValueOnce","Error","mockImplementation","url","options","method","Promise","resolve","fireEvent","change","getByLabelText","target","value","click","calls","toBe","requestBody","JSON","parse","body","toEqual","dateInput","getByDisplayValue","Date","toISOString","split","staffSelect"],"sources":["StaffScheduling.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from '../context/AuthContext';\nimport StaffScheduling from './StaffScheduling';\n\n// Mock the AuthContext\njest.mock('../context/AuthContext', () => ({\n    AuthProvider: ({ children }) => children,\n    useAuth: () => ({\n        user: {\n            id: '1',\n            name: 'Test User',\n            email: 'test@example.com',\n            role: 'admin'\n        }\n    })\n}));\n\n// Mock fetch API\nglobal.fetch = jest.fn();\n\n// Helper function to render component with router\nconst renderWithRouter = (component) => {\n    return render(\n        <BrowserRouter>\n            <AuthProvider>\n                {component}\n            </AuthProvider>\n        </BrowserRouter>\n    );\n};\n\ndescribe('StaffScheduling Component', () => {\n    beforeEach(() => {\n        // Reset mocks before each test\n        jest.clearAllMocks();\n        \n        // Mock successful API response\n        global.fetch.mockResolvedValue({\n            ok: true,\n            json: async () => ({\n                schedules: [\n                    {\n                        id: '1',\n                        staffId: '101',\n                        staffName: 'Dr. John Smith',\n                        department: 'cardiology',\n                        startTime: '2023-12-15T09:00:00',\n                        endTime: '2023-12-15T17:00:00',\n                        notes: 'Regular shift'\n                    },\n                    {\n                        id: '2',\n                        staffId: '102',\n                        staffName: 'Nurse Jane Doe',\n                        department: 'emergency',\n                        startTime: '2023-12-15T08:00:00',\n                        endTime: '2023-12-15T16:00:00',\n                        notes: 'Morning shift'\n                    }\n                ]\n            })\n        });\n    });\n    \n    test('renders StaffScheduling component', async () => {\n        renderWithRouter(<StaffScheduling />);\n        \n        // Check if the component title is rendered\n        expect(screen.getByText('Staff Scheduling')).toBeInTheDocument();\n    });\n    \n    test('displays loading state initially', () => {\n        renderWithRouter(<StaffScheduling />);\n        \n        // Check if loading indicator is displayed\n        expect(screen.getByText('Loading schedules...')).toBeInTheDocument();\n    });\n    \n    test('fetches and displays schedules', async () => {\n        renderWithRouter(<StaffScheduling />);\n        \n        // Wait for the API call to resolve and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n            expect(global.fetch).toHaveBeenCalledWith('/api/schedules');\n        });\n        \n        // Check if schedule data is displayed\n        await waitFor(() => {\n            expect(screen.getByText('Dr. John Smith')).toBeInTheDocument();\n            expect(screen.getByText('Nurse Jane Doe')).toBeInTheDocument();\n        });\n    });\n    \n    test('handles API error gracefully', async () => {\n        // Mock API error\n        global.fetch.mockRejectedValueOnce(new Error('Failed to fetch'));\n        \n        renderWithRouter(<StaffScheduling />);\n        \n        // Wait for the API call to reject and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Check if error message is displayed\n        await waitFor(() => {\n            expect(screen.getByText(/Failed to fetch/)).toBeInTheDocument();\n        });\n    });\n    \n    test('submits new schedule form correctly', async () => {\n        // Mock API response for creating a new schedule\n        global.fetch.mockImplementation((url, options) => {\n            if (options && options.method === 'POST') {\n                return Promise.resolve({\n                    ok: true,\n                    json: async () => ({\n                        id: '3',\n                        staffId: '103',\n                        staffName: 'Dr. New Doctor',\n                        department: 'neurology',\n                        startTime: '2023-12-16T10:00:00',\n                        endTime: '2023-12-16T18:00:00',\n                        notes: 'Afternoon shift'\n                    })\n                });\n            }\n            \n            // Default response for GET requests\n            return Promise.resolve({\n                ok: true,\n                json: async () => ({\n                    schedules: [\n                        {\n                            id: '1',\n                            staffId: '101',\n                            staffName: 'Dr. John Smith',\n                            department: 'cardiology',\n                            startTime: '2023-12-15T09:00:00',\n                            endTime: '2023-12-15T17:00:00',\n                            notes: 'Regular shift'\n                        },\n                        {\n                            id: '2',\n                            staffId: '102',\n                            staffName: 'Nurse Jane Doe',\n                            department: 'emergency',\n                            startTime: '2023-12-15T08:00:00',\n                            endTime: '2023-12-15T16:00:00',\n                            notes: 'Morning shift'\n                        }\n                    ]\n                })\n            });\n        });\n        \n        renderWithRouter(<StaffScheduling />);\n        \n        // Wait for the initial API call to resolve\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Fill out the form\n        fireEvent.change(screen.getByLabelText(/Staff Member/i), { \n            target: { value: '103' } \n        });\n        \n        fireEvent.change(screen.getByLabelText(/Start Time/i), { \n            target: { value: '2023-12-16T10:00' } \n        });\n        \n        fireEvent.change(screen.getByLabelText(/End Time/i), { \n            target: { value: '2023-12-16T18:00' } \n        });\n        \n        fireEvent.change(screen.getByLabelText(/Department/i), { \n            target: { value: 'neurology' } \n        });\n        \n        fireEvent.change(screen.getByLabelText(/Notes/i), { \n            target: { value: 'Afternoon shift' } \n        });\n        \n        // Submit the form\n        fireEvent.click(screen.getByText('Create Schedule'));\n        \n        // Wait for the POST API call\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(2);\n            expect(global.fetch.mock.calls[1][0]).toBe('/api/schedules');\n            expect(global.fetch.mock.calls[1][1].method).toBe('POST');\n        });\n        \n        // Check that the form data was sent correctly\n        const requestBody = JSON.parse(global.fetch.mock.calls[1][1].body);\n        expect(requestBody).toEqual({\n            staffId: '103',\n            startTime: '2023-12-16T10:00',\n            endTime: '2023-12-16T18:00',\n            department: 'neurology',\n            notes: 'Afternoon shift'\n        });\n    });\n    \n    test('filters schedules by date', async () => {\n        renderWithRouter(<StaffScheduling />);\n        \n        // Wait for the API call to resolve and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Find and change the date filter\n        const dateInput = screen.getByDisplayValue(new Date().toISOString().split('T')[0]);\n        fireEvent.change(dateInput, { target: { value: '2023-12-16' } });\n        \n        // Check if the date filter was applied\n        // This would typically trigger a new API call or filter the existing data\n        // The implementation details would depend on how the component is built\n    });\n    \n    test('filters schedules by staff', async () => {\n        renderWithRouter(<StaffScheduling />);\n        \n        // Wait for the API call to resolve and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Find and change the staff filter\n        const staffSelect = screen.getByDisplayValue('All Staff');\n        fireEvent.change(staffSelect, { target: { value: '101' } });\n        \n        // Check if the staff filter was applied\n        // This would typically trigger a new API call or filter the existing data\n        // The implementation details would depend on how the component is built\n    });\n    \n    test('form validation works correctly', async () => {\n        renderWithRouter(<StaffScheduling />);\n        \n        // Wait for the initial API call to resolve\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Try to submit the form without filling required fields\n        fireEvent.click(screen.getByText('Create Schedule'));\n        \n        // Check that the form wasn't submitted\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1); // No additional API calls\n        });\n        \n        // Check for validation messages\n        // This depends on how validation is implemented in the component\n        // expect(screen.getByText(/required/i)).toBeInTheDocument();\n    });\n}); "],"mappings":"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","ignoreList":[]}