52eb0c7e233597ca8f7f19190e98ee4e
/**
 * MongoDB connection test
 * 
 * This test file verifies that the MongoDB connection is working correctly
 * and that the connection setup and teardown functions operate as expected.
 */

const mongoose = require('mongoose');
const db = require('./__tests__/helpers/mongodb.setup');
describe('MongoDB Connection', () => {
  beforeAll(async () => {
    await db.connect();
  });
  afterEach(async () => {
    await db.clearDatabase();
  });
  afterAll(async () => {
    await db.closeDatabase();
  });
  test('should connect to the database', async () => {
    expect(mongoose.connection.readyState).toBe(1);
  });
  test('should create, read, update and delete documents', async () => {
    // Create a simple test schema and model
    const testSchema = new mongoose.Schema({
      name: String,
      value: Number
    });

    // Make sure to delete existing model first if it exists
    try {
      mongoose.deleteModel('TestModel');
    } catch (error) {
      // Ignore error if model doesn't exist
    }
    const TestModel = mongoose.model('TestModel', testSchema);

    // Create
    const testDoc = new TestModel({
      name: 'test',
      value: 123
    });
    await testDoc.save();

    // Read
    const foundDoc = await TestModel.findOne({
      name: 'test'
    });
    expect(foundDoc).toBeTruthy();
    expect(foundDoc.name).toBe('test');
    expect(foundDoc.value).toBe(123);

    // Update
    foundDoc.value = 456;
    await foundDoc.save();
    const updatedDoc = await TestModel.findOne({
      name: 'test'
    });
    expect(updatedDoc.value).toBe(456);

    // Delete
    await TestModel.deleteOne({
      name: 'test'
    });
    const deletedDoc = await TestModel.findOne({
      name: 'test'
    });
    expect(deletedDoc).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJkYiIsImRlc2NyaWJlIiwiYmVmb3JlQWxsIiwiY29ubmVjdCIsImFmdGVyRWFjaCIsImNsZWFyRGF0YWJhc2UiLCJhZnRlckFsbCIsImNsb3NlRGF0YWJhc2UiLCJ0ZXN0IiwiZXhwZWN0IiwiY29ubmVjdGlvbiIsInJlYWR5U3RhdGUiLCJ0b0JlIiwidGVzdFNjaGVtYSIsIlNjaGVtYSIsIm5hbWUiLCJTdHJpbmciLCJ2YWx1ZSIsIk51bWJlciIsImRlbGV0ZU1vZGVsIiwiZXJyb3IiLCJUZXN0TW9kZWwiLCJtb2RlbCIsInRlc3REb2MiLCJzYXZlIiwiZm91bmREb2MiLCJmaW5kT25lIiwidG9CZVRydXRoeSIsInVwZGF0ZWREb2MiLCJkZWxldGVPbmUiLCJkZWxldGVkRG9jIiwidG9CZU51bGwiXSwic291cmNlcyI6WyJtb25nb2RiLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vbmdvREIgY29ubmVjdGlvbiB0ZXN0XHJcbiAqIFxyXG4gKiBUaGlzIHRlc3QgZmlsZSB2ZXJpZmllcyB0aGF0IHRoZSBNb25nb0RCIGNvbm5lY3Rpb24gaXMgd29ya2luZyBjb3JyZWN0bHlcclxuICogYW5kIHRoYXQgdGhlIGNvbm5lY3Rpb24gc2V0dXAgYW5kIHRlYXJkb3duIGZ1bmN0aW9ucyBvcGVyYXRlIGFzIGV4cGVjdGVkLlxyXG4gKi9cclxuXHJcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcclxuY29uc3QgZGIgPSByZXF1aXJlKCcuL19fdGVzdHNfXy9oZWxwZXJzL21vbmdvZGIuc2V0dXAnKTtcclxuXHJcbmRlc2NyaWJlKCdNb25nb0RCIENvbm5lY3Rpb24nLCAoKSA9PiB7XHJcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IGRiLmNvbm5lY3QoKTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IGRiLmNsZWFyRGF0YWJhc2UoKTtcclxuICB9KTtcclxuXHJcbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgZGIuY2xvc2VEYXRhYmFzZSgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgY29ubmVjdCB0byB0aGUgZGF0YWJhc2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBleHBlY3QobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlKS50b0JlKDEpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgY3JlYXRlLCByZWFkLCB1cGRhdGUgYW5kIGRlbGV0ZSBkb2N1bWVudHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBDcmVhdGUgYSBzaW1wbGUgdGVzdCBzY2hlbWEgYW5kIG1vZGVsXHJcbiAgICBjb25zdCB0ZXN0U2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XHJcbiAgICAgIG5hbWU6IFN0cmluZyxcclxuICAgICAgdmFsdWU6IE51bWJlclxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIE1ha2Ugc3VyZSB0byBkZWxldGUgZXhpc3RpbmcgbW9kZWwgZmlyc3QgaWYgaXQgZXhpc3RzXHJcbiAgICB0cnkge1xyXG4gICAgICBtb25nb29zZS5kZWxldGVNb2RlbCgnVGVzdE1vZGVsJyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyBJZ25vcmUgZXJyb3IgaWYgbW9kZWwgZG9lc24ndCBleGlzdFxyXG4gICAgfVxyXG4gICAgY29uc3QgVGVzdE1vZGVsID0gbW9uZ29vc2UubW9kZWwoJ1Rlc3RNb2RlbCcsIHRlc3RTY2hlbWEpO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGVcclxuICAgIGNvbnN0IHRlc3REb2MgPSBuZXcgVGVzdE1vZGVsKHsgbmFtZTogJ3Rlc3QnLCB2YWx1ZTogMTIzIH0pO1xyXG4gICAgYXdhaXQgdGVzdERvYy5zYXZlKCk7XHJcbiAgICBcclxuICAgIC8vIFJlYWRcclxuICAgIGNvbnN0IGZvdW5kRG9jID0gYXdhaXQgVGVzdE1vZGVsLmZpbmRPbmUoeyBuYW1lOiAndGVzdCcgfSk7XHJcbiAgICBleHBlY3QoZm91bmREb2MpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChmb3VuZERvYy5uYW1lKS50b0JlKCd0ZXN0Jyk7XHJcbiAgICBleHBlY3QoZm91bmREb2MudmFsdWUpLnRvQmUoMTIzKTtcclxuICAgIFxyXG4gICAgLy8gVXBkYXRlXHJcbiAgICBmb3VuZERvYy52YWx1ZSA9IDQ1NjtcclxuICAgIGF3YWl0IGZvdW5kRG9jLnNhdmUoKTtcclxuICAgIFxyXG4gICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IFRlc3RNb2RlbC5maW5kT25lKHsgbmFtZTogJ3Rlc3QnIH0pO1xyXG4gICAgZXhwZWN0KHVwZGF0ZWREb2MudmFsdWUpLnRvQmUoNDU2KTtcclxuICAgIFxyXG4gICAgLy8gRGVsZXRlXHJcbiAgICBhd2FpdCBUZXN0TW9kZWwuZGVsZXRlT25lKHsgbmFtZTogJ3Rlc3QnIH0pO1xyXG4gICAgY29uc3QgZGVsZXRlZERvYyA9IGF3YWl0IFRlc3RNb2RlbC5maW5kT25lKHsgbmFtZTogJ3Rlc3QnIH0pO1xyXG4gICAgZXhwZWN0KGRlbGV0ZWREb2MpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcbn0pOyAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsbUNBQW1DLENBQUM7QUFFdkRFLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNO0VBQ25DQyxTQUFTLENBQUMsWUFBWTtJQUNwQixNQUFNRixFQUFFLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0VBQ3BCLENBQUMsQ0FBQztFQUVGQyxTQUFTLENBQUMsWUFBWTtJQUNwQixNQUFNSixFQUFFLENBQUNLLGFBQWEsQ0FBQyxDQUFDO0VBQzFCLENBQUMsQ0FBQztFQUVGQyxRQUFRLENBQUMsWUFBWTtJQUNuQixNQUFNTixFQUFFLENBQUNPLGFBQWEsQ0FBQyxDQUFDO0VBQzFCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsWUFBWTtJQUNqREMsTUFBTSxDQUFDWCxRQUFRLENBQUNZLFVBQVUsQ0FBQ0MsVUFBVSxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDaEQsQ0FBQyxDQUFDO0VBRUZKLElBQUksQ0FBQyxrREFBa0QsRUFBRSxZQUFZO0lBQ25FO0lBQ0EsTUFBTUssVUFBVSxHQUFHLElBQUlmLFFBQVEsQ0FBQ2dCLE1BQU0sQ0FBQztNQUNyQ0MsSUFBSSxFQUFFQyxNQUFNO01BQ1pDLEtBQUssRUFBRUM7SUFDVCxDQUFDLENBQUM7O0lBRUY7SUFDQSxJQUFJO01BQ0ZwQixRQUFRLENBQUNxQixXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxPQUFPQyxLQUFLLEVBQUU7TUFDZDtJQUFBO0lBRUYsTUFBTUMsU0FBUyxHQUFHdkIsUUFBUSxDQUFDd0IsS0FBSyxDQUFDLFdBQVcsRUFBRVQsVUFBVSxDQUFDOztJQUV6RDtJQUNBLE1BQU1VLE9BQU8sR0FBRyxJQUFJRixTQUFTLENBQUM7TUFBRU4sSUFBSSxFQUFFLE1BQU07TUFBRUUsS0FBSyxFQUFFO0lBQUksQ0FBQyxDQUFDO0lBQzNELE1BQU1NLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUMsUUFBUSxHQUFHLE1BQU1KLFNBQVMsQ0FBQ0ssT0FBTyxDQUFDO01BQUVYLElBQUksRUFBRTtJQUFPLENBQUMsQ0FBQztJQUMxRE4sTUFBTSxDQUFDZ0IsUUFBUSxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQzdCbEIsTUFBTSxDQUFDZ0IsUUFBUSxDQUFDVixJQUFJLENBQUMsQ0FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNsQ0gsTUFBTSxDQUFDZ0IsUUFBUSxDQUFDUixLQUFLLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7SUFFaEM7SUFDQWEsUUFBUSxDQUFDUixLQUFLLEdBQUcsR0FBRztJQUNwQixNQUFNUSxRQUFRLENBQUNELElBQUksQ0FBQyxDQUFDO0lBRXJCLE1BQU1JLFVBQVUsR0FBRyxNQUFNUCxTQUFTLENBQUNLLE9BQU8sQ0FBQztNQUFFWCxJQUFJLEVBQUU7SUFBTyxDQUFDLENBQUM7SUFDNUROLE1BQU0sQ0FBQ21CLFVBQVUsQ0FBQ1gsS0FBSyxDQUFDLENBQUNMLElBQUksQ0FBQyxHQUFHLENBQUM7O0lBRWxDO0lBQ0EsTUFBTVMsU0FBUyxDQUFDUSxTQUFTLENBQUM7TUFBRWQsSUFBSSxFQUFFO0lBQU8sQ0FBQyxDQUFDO0lBQzNDLE1BQU1lLFVBQVUsR0FBRyxNQUFNVCxTQUFTLENBQUNLLE9BQU8sQ0FBQztNQUFFWCxJQUFJLEVBQUU7SUFBTyxDQUFDLENBQUM7SUFDNUROLE1BQU0sQ0FBQ3FCLFVBQVUsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQztFQUMvQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=