{"version":3,"names":["mongoose","require","db","describe","beforeAll","connect","afterEach","clearDatabase","afterAll","closeDatabase","test","expect","connection","readyState","toBe","testSchema","Schema","name","String","value","Number","deleteModel","error","TestModel","model","testDoc","save","foundDoc","findOne","toBeTruthy","updatedDoc","deleteOne","deletedDoc","toBeNull"],"sources":["mongodb.test.js"],"sourcesContent":["/**\r\n * MongoDB connection test\r\n * \r\n * This test file verifies that the MongoDB connection is working correctly\r\n * and that the connection setup and teardown functions operate as expected.\r\n */\r\n\r\nconst mongoose = require('mongoose');\r\nconst db = require('./__tests__/helpers/mongodb.setup');\r\n\r\ndescribe('MongoDB Connection', () => {\r\n  beforeAll(async () => {\r\n    await db.connect();\r\n  });\r\n\r\n  afterEach(async () => {\r\n    await db.clearDatabase();\r\n  });\r\n\r\n  afterAll(async () => {\r\n    await db.closeDatabase();\r\n  });\r\n\r\n  test('should connect to the database', async () => {\r\n    expect(mongoose.connection.readyState).toBe(1);\r\n  });\r\n\r\n  test('should create, read, update and delete documents', async () => {\r\n    // Create a simple test schema and model\r\n    const testSchema = new mongoose.Schema({\r\n      name: String,\r\n      value: Number\r\n    });\r\n    \r\n    // Make sure to delete existing model first if it exists\r\n    try {\r\n      mongoose.deleteModel('TestModel');\r\n    } catch (error) {\r\n      // Ignore error if model doesn't exist\r\n    }\r\n    const TestModel = mongoose.model('TestModel', testSchema);\r\n    \r\n    // Create\r\n    const testDoc = new TestModel({ name: 'test', value: 123 });\r\n    await testDoc.save();\r\n    \r\n    // Read\r\n    const foundDoc = await TestModel.findOne({ name: 'test' });\r\n    expect(foundDoc).toBeTruthy();\r\n    expect(foundDoc.name).toBe('test');\r\n    expect(foundDoc.value).toBe(123);\r\n    \r\n    // Update\r\n    foundDoc.value = 456;\r\n    await foundDoc.save();\r\n    \r\n    const updatedDoc = await TestModel.findOne({ name: 'test' });\r\n    expect(updatedDoc.value).toBe(456);\r\n    \r\n    // Delete\r\n    await TestModel.deleteOne({ name: 'test' });\r\n    const deletedDoc = await TestModel.findOne({ name: 'test' });\r\n    expect(deletedDoc).toBeNull();\r\n  });\r\n}); "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,EAAE,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AAEvDE,QAAQ,CAAC,oBAAoB,EAAE,MAAM;EACnCC,SAAS,CAAC,YAAY;IACpB,MAAMF,EAAE,CAACG,OAAO,CAAC,CAAC;EACpB,CAAC,CAAC;EAEFC,SAAS,CAAC,YAAY;IACpB,MAAMJ,EAAE,CAACK,aAAa,CAAC,CAAC;EAC1B,CAAC,CAAC;EAEFC,QAAQ,CAAC,YAAY;IACnB,MAAMN,EAAE,CAACO,aAAa,CAAC,CAAC;EAC1B,CAAC,CAAC;EAEFC,IAAI,CAAC,gCAAgC,EAAE,YAAY;IACjDC,MAAM,CAACX,QAAQ,CAACY,UAAU,CAACC,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;EAEFJ,IAAI,CAAC,kDAAkD,EAAE,YAAY;IACnE;IACA,MAAMK,UAAU,GAAG,IAAIf,QAAQ,CAACgB,MAAM,CAAC;MACrCC,IAAI,EAAEC,MAAM;MACZC,KAAK,EAAEC;IACT,CAAC,CAAC;;IAEF;IACA,IAAI;MACFpB,QAAQ,CAACqB,WAAW,CAAC,WAAW,CAAC;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;IAAA;IAEF,MAAMC,SAAS,GAAGvB,QAAQ,CAACwB,KAAK,CAAC,WAAW,EAAET,UAAU,CAAC;;IAEzD;IACA,MAAMU,OAAO,GAAG,IAAIF,SAAS,CAAC;MAAEN,IAAI,EAAE,MAAM;MAAEE,KAAK,EAAE;IAAI,CAAC,CAAC;IAC3D,MAAMM,OAAO,CAACC,IAAI,CAAC,CAAC;;IAEpB;IACA,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,OAAO,CAAC;MAAEX,IAAI,EAAE;IAAO,CAAC,CAAC;IAC1DN,MAAM,CAACgB,QAAQ,CAAC,CAACE,UAAU,CAAC,CAAC;IAC7BlB,MAAM,CAACgB,QAAQ,CAACV,IAAI,CAAC,CAACH,IAAI,CAAC,MAAM,CAAC;IAClCH,MAAM,CAACgB,QAAQ,CAACR,KAAK,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC;;IAEhC;IACAa,QAAQ,CAACR,KAAK,GAAG,GAAG;IACpB,MAAMQ,QAAQ,CAACD,IAAI,CAAC,CAAC;IAErB,MAAMI,UAAU,GAAG,MAAMP,SAAS,CAACK,OAAO,CAAC;MAAEX,IAAI,EAAE;IAAO,CAAC,CAAC;IAC5DN,MAAM,CAACmB,UAAU,CAACX,KAAK,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC;;IAElC;IACA,MAAMS,SAAS,CAACQ,SAAS,CAAC;MAAEd,IAAI,EAAE;IAAO,CAAC,CAAC;IAC3C,MAAMe,UAAU,GAAG,MAAMT,SAAS,CAACK,OAAO,CAAC;MAAEX,IAAI,EAAE;IAAO,CAAC,CAAC;IAC5DN,MAAM,CAACqB,UAAU,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC/B,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}