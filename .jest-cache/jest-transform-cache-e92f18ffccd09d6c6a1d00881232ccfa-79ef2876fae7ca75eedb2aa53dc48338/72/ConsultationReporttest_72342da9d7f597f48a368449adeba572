4265787d394e0581a2f914c46bbb4ebc
"use strict";

// Mock the useAuth hook
_getJestObj().mock('../../context/AuthContext', () => {
  const originalModule = jest.requireActual('../../context/AuthContext');
  return _objectSpread(_objectSpread({}, originalModule), {}, {
    useAuth: () => ({
      token: 'mock-token',
      user: {
        role: 'doctor'
      }
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _ConsultationReport = _interopRequireDefault(require("../../components/ConsultationReport"));
var _jestFetchMock = _interopRequireDefault(require("jest-fetch-mock"));
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\frontend\\__tests__\\components\\ConsultationReport.test.tsx";
import React from "react";
var __jsx = React.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('ConsultationReport', () => {
  beforeEach(() => {
    _jestFetchMock.default.resetMocks();
  });
  test('renders without crashing', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ConsultationReport.default, {
      appointmentId: "123",
      transcript: "Test transcript"
    }));
    expect(_react2.screen.getByText(/Consultation Report/i)).toBeInTheDocument();
  });
  test('shows generate button when transcript is provided', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ConsultationReport.default, {
      appointmentId: "123",
      transcript: "Test transcript"
    }));
    expect(_react2.screen.getByText(/Generate Full Report/i)).toBeInTheDocument();
  });
  test('shows message when transcript is not available', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ConsultationReport.default, {
      appointmentId: "123",
      transcript: ""
    }));
    expect(_react2.screen.getByText(/No consultation transcript available/i)).toBeInTheDocument();
  });
  test('generates report on button click', async () => {
    _jestFetchMock.default.mockResponseOnce(JSON.stringify({
      report: {
        report: 'Test report content',
        medicalInfo: {
          symptoms: ['Symptom 1'],
          diagnosis: 'Test diagnosis',
          recommendations: ['Recommendation 1'],
          medications: [],
          followUpNeeded: false
        },
        followUpQuestions: 'Test follow-up questions'
      }
    }));
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ConsultationReport.default, {
      appointmentId: "123",
      transcript: "Test transcript"
    }));

    // Click generate report button
    _react2.fireEvent.click(_react2.screen.getByText(/Generate Full Report/i));

    // Wait for the report to be displayed
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText(/Test report content/i)).toBeInTheDocument();
    });
  });
  test('shows error message when report generation fails', async () => {
    _jestFetchMock.default.mockRejectOnce(new Error('Failed to generate report'));
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ConsultationReport.default, {
      appointmentId: "123",
      transcript: "Test transcript"
    }));

    // Click generate report button
    _react2.fireEvent.click(_react2.screen.getByText(/Generate Full Report/i));

    // Wait for the error message to be displayed
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText(/Failed to generate report. Please try again./i)).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,