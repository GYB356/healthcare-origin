352183831dc81716869fd6ae882017e9
"use strict";

var _test = require("@playwright/test");
_test.test.describe('Healthcare System E2E Tests', () => {
  _test.test.beforeEach(async ({
    page
  }) => {
    await page.goto('http://localhost:3000');
  });
  _test.test.describe('Authentication', () => {
    (0, _test.test)('should login as doctor', async ({
      page
    }) => {
      await page.fill('input[name="email"]', 'doctor@example.com');
      await page.fill('input[name="password"]', 'password123');
      await page.click('button[type="submit"]');
      await (0, _test.expect)(page.locator('text=Doctor Dashboard')).toBeVisible();
    });
    (0, _test.test)('should login as patient', async ({
      page
    }) => {
      await page.fill('input[name="email"]', 'patient@example.com');
      await page.fill('input[name="password"]', 'password123');
      await page.click('button[type="submit"]');
      await (0, _test.expect)(page.locator('text=Patient Dashboard')).toBeVisible();
    });
    (0, _test.test)('should show error for invalid credentials', async ({
      page
    }) => {
      await page.fill('input[name="email"]', 'invalid@example.com');
      await page.fill('input[name="password"]', 'wrongpassword');
      await page.click('button[type="submit"]');
      await (0, _test.expect)(page.locator('text=Invalid credentials')).toBeVisible();
    });
  });
  _test.test.describe('Doctor Schedule Management', () => {
    _test.test.beforeEach(async ({
      page
    }) => {
      // Login as doctor
      await page.fill('input[name="email"]', 'doctor@example.com');
      await page.fill('input[name="password"]', 'password123');
      await page.click('button[type="submit"]');
    });
    (0, _test.test)('should create available time slot', async ({
      page
    }) => {
      await page.click('text=Manage Schedule');
      await page.click('.fc-timegrid-slot:first-child');
      await (0, _test.expect)(page.locator('text=Time slot added successfully')).toBeVisible();
      await (0, _test.expect)(page.locator('.fc-event')).toBeVisible();
    });
    (0, _test.test)('should delete time slot', async ({
      page
    }) => {
      await page.click('text=Manage Schedule');
      await page.click('.fc-event:first-child');
      await page.click('text=Delete');
      await page.click('text=Confirm');
      await (0, _test.expect)(page.locator('text=Time slot removed successfully')).toBeVisible();
    });
  });
  _test.test.describe('Medical Records', () => {
    _test.test.beforeEach(async ({
      page
    }) => {
      // Login as doctor
      await page.fill('input[name="email"]', 'doctor@example.com');
      await page.fill('input[name="password"]', 'password123');
      await page.click('button[type="submit"]');
    });
    (0, _test.test)('should create medical record', async ({
      page
    }) => {
      await page.click('text=Medical Records');
      await page.click('text=Add New Record');
      await page.fill('input[name="title"]', 'Regular Check-up');
      await page.fill('textarea[name="description"]', 'Patient is in good health');
      await page.fill('input[name="diagnosis"]', 'Healthy');
      await page.click('button:has-text("Create Record")');
      await (0, _test.expect)(page.locator('text=Medical record created successfully')).toBeVisible();
    });
    (0, _test.test)('should validate required fields', async ({
      page
    }) => {
      await page.click('text=Medical Records');
      await page.click('text=Add New Record');
      await page.click('button:has-text("Create Record")');
      await (0, _test.expect)(page.locator('text=Title is required')).toBeVisible();
      await (0, _test.expect)(page.locator('text=Description is required')).toBeVisible();
    });
  });
  _test.test.describe('Billing System', () => {
    _test.test.beforeEach(async ({
      page
    }) => {
      // Login as staff
      await page.fill('input[name="email"]', 'staff@example.com');
      await page.fill('input[name="password"]', 'password123');
      await page.click('button[type="submit"]');
    });
    (0, _test.test)('should create invoice', async ({
      page
    }) => {
      await page.click('text=Billing');
      await page.click('text=Create New Invoice');
      await page.fill('input[name="amount"]', '100');
      await page.fill('input[name="tax"]', '10');
      await page.fill('input[name="discount"]', '5');
      await page.fill('input[name="dueDate"]', '2024-12-31');
      await page.click('button:has-text("Create Invoice")');
      await (0, _test.expect)(page.locator('text=Invoice created successfully')).toBeVisible();
    });
    (0, _test.test)('should update invoice status', async ({
      page
    }) => {
      await page.click('text=Billing');
      await page.selectOption('select.invoice-status', 'PAID');
      await (0, _test.expect)(page.locator('text=Invoice status updated successfully')).toBeVisible();
    });
  });
  _test.test.describe('Responsive Design', () => {
    (0, _test.test)('should be responsive on mobile', async ({
      page
    }) => {
      await page.setViewportSize({
        width: 375,
        height: 667
      });

      // Check if menu becomes hamburger
      await (0, _test.expect)(page.locator('.hamburger-menu')).toBeVisible();

      // Check if tables are scrollable
      await (0, _test.expect)(page.locator('.table-container')).toHaveCSS('overflow-x', 'auto');

      // Check if forms stack vertically
      await (0, _test.expect)(page.locator('form')).toHaveCSS('flex-direction', 'column');
    });
    (0, _test.test)('should be responsive on tablet', async ({
      page
    }) => {
      await page.setViewportSize({
        width: 768,
        height: 1024
      });

      // Check if sidebar is visible
      await (0, _test.expect)(page.locator('.sidebar')).toBeVisible();

      // Check if grid layout adjusts
      await (0, _test.expect)(page.locator('.grid-container')).toHaveCSS('grid-template-columns', 'repeat(2, 1fr)');
    });
  });
  _test.test.describe('Real-time Updates', () => {
    (0, _test.test)('should show real-time appointment updates', async ({
      page,
      context
    }) => {
      // Login in first page
      await page.fill('input[name="email"]', 'doctor@example.com');
      await page.fill('input[name="password"]', 'password123');
      await page.click('button[type="submit"]');

      // Create new page for patient
      const patientPage = await context.newPage();
      await patientPage.goto('http://localhost:3000');
      await patientPage.fill('input[name="email"]', 'patient@example.com');
      await patientPage.fill('input[name="password"]', 'password123');
      await patientPage.click('button[type="submit"]');

      // Doctor creates appointment
      await page.click('text=Manage Schedule');
      await page.click('.fc-timegrid-slot:first-child');

      // Check if patient sees update
      await (0, _test.expect)(patientPage.locator('text=New appointment available')).toBeVisible();
    });
    (0, _test.test)('should show real-time message notifications', async ({
      page,
      context
    }) => {
      // Login in first page (doctor)
      await page.fill('input[name="email"]', 'doctor@example.com');
      await page.fill('input[name="password"]', 'password123');
      await page.click('button[type="submit"]');

      // Create new page for patient
      const patientPage = await context.newPage();
      await patientPage.goto('http://localhost:3000');
      await patientPage.fill('input[name="email"]', 'patient@example.com');
      await patientPage.fill('input[name="password"]', 'password123');
      await patientPage.click('button[type="submit"]');

      // Patient sends message
      await patientPage.click('text=Messages');
      await patientPage.fill('textarea[name="message"]', 'Hello doctor');
      await patientPage.click('button:has-text("Send")');

      // Check if doctor receives notification
      await (0, _test.expect)(page.locator('text=New message from Patient')).toBeVisible();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,