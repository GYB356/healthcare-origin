ffb2324beab77bb5f5b816636dfc9720
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _AuthContext = require("../../context/AuthContext");
var _Messaging = _interopRequireDefault(require("../../pages/Messaging"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["providerProps"];
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\components\\__tests__\\Messaging.test.js";
import React from "react";
var __jsx = React.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const renderWithAuth = (ui, _ref) => {
  let {
      providerProps
    } = _ref,
    renderOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, _objectSpread(_objectSpread({}, providerProps), {}, {
    children: ui
  })), renderOptions);
};
describe('Messaging Component', () => {
  test('renders Messaging component for authorized users', () => {
    const providerProps = {
      value: {
        user: {
          role: 'patient'
        }
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Messaging.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Messaging/i)).toBeInTheDocument();
    expect(_react2.screen.getByText(/Secure communication with healthcare providers/i)).toBeInTheDocument();
  });
  test('denies access for unauthorized users', () => {
    const providerProps = {
      value: {
        user: null
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Messaging.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Access Denied/i)).toBeInTheDocument();
  });
  test('allows access for authenticated users', () => {
    const roles = ['patient', 'doctor', 'nurse', 'admin'];
    roles.forEach(role => {
      const providerProps = {
        value: {
          user: {
            role
          }
        }
      };
      const {
        unmount
      } = renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Messaging.default, {}), {
        providerProps
      });
      expect(_react2.screen.getByText(/Messaging/i)).toBeInTheDocument();
      unmount();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfQXV0aENvbnRleHQiLCJfTWVzc2FnaW5nIiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJfanN4RmlsZU5hbWUiLCJSZWFjdCIsIl9fanN4IiwiY3JlYXRlRWxlbWVudCIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInJlbmRlcldpdGhBdXRoIiwidWkiLCJfcmVmIiwicHJvdmlkZXJQcm9wcyIsInJlbmRlck9wdGlvbnMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwicmVuZGVyIiwianN4IiwiQXV0aENvbnRleHQiLCJQcm92aWRlciIsImNoaWxkcmVuIiwiZGVzY3JpYmUiLCJ0ZXN0IiwidmFsdWUiLCJ1c2VyIiwicm9sZSIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50Iiwicm9sZXMiLCJ1bm1vdW50Il0sInNvdXJjZXMiOlsiTWVzc2FnaW5nLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBBdXRoQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvQXV0aENvbnRleHQnO1xuaW1wb3J0IE1lc3NhZ2luZyBmcm9tICcuLi8uLi9wYWdlcy9NZXNzYWdpbmcnO1xuXG5jb25zdCByZW5kZXJXaXRoQXV0aCA9ICh1aSwgeyBwcm92aWRlclByb3BzLCAuLi5yZW5kZXJPcHRpb25zIH0pID0+IHtcbiAgICByZXR1cm4gcmVuZGVyKFxuICAgICAgICA8QXV0aENvbnRleHQuUHJvdmlkZXIgey4uLnByb3ZpZGVyUHJvcHN9Pnt1aX08L0F1dGhDb250ZXh0LlByb3ZpZGVyPixcbiAgICAgICAgcmVuZGVyT3B0aW9uc1xuICAgICk7XG59O1xuXG5kZXNjcmliZSgnTWVzc2FnaW5nIENvbXBvbmVudCcsICgpID0+IHtcbiAgICB0ZXN0KCdyZW5kZXJzIE1lc3NhZ2luZyBjb21wb25lbnQgZm9yIGF1dGhvcml6ZWQgdXNlcnMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyUHJvcHMgPSB7XG4gICAgICAgICAgICB2YWx1ZTogeyB1c2VyOiB7IHJvbGU6ICdwYXRpZW50JyB9IH0sXG4gICAgICAgIH07XG4gICAgICAgIHJlbmRlcldpdGhBdXRoKDxNZXNzYWdpbmcgLz4sIHsgcHJvdmlkZXJQcm9wcyB9KTtcblxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvTWVzc2FnaW5nL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvU2VjdXJlIGNvbW11bmljYXRpb24gd2l0aCBoZWFsdGhjYXJlIHByb3ZpZGVycy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RlbmllcyBhY2Nlc3MgZm9yIHVuYXV0aG9yaXplZCB1c2VycycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJQcm9wcyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB7IHVzZXI6IG51bGwgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVuZGVyV2l0aEF1dGgoPE1lc3NhZ2luZyAvPiwgeyBwcm92aWRlclByb3BzIH0pO1xuXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9BY2Nlc3MgRGVuaWVkL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnYWxsb3dzIGFjY2VzcyBmb3IgYXV0aGVudGljYXRlZCB1c2VycycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgcm9sZXMgPSBbJ3BhdGllbnQnLCAnZG9jdG9yJywgJ251cnNlJywgJ2FkbWluJ107XG4gICAgICAgIHJvbGVzLmZvckVhY2gocm9sZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlclByb3BzID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB7IHVzZXI6IHsgcm9sZSB9IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgeyB1bm1vdW50IH0gPSByZW5kZXJXaXRoQXV0aCg8TWVzc2FnaW5nIC8+LCB7IHByb3ZpZGVyUHJvcHMgfSk7XG4gICAgICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvTWVzc2FnaW5nL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICAgICAgdW5tb3VudCgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pOyAiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQThDLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUFBLE1BQUFLLFNBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsT0FBQUMsS0FBQTtBQUFBLElBQUFDLEtBQUEsR0FBQUQsS0FBQSxDQUFBRSxhQUFBO0FBQUEsU0FBQUMsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxD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