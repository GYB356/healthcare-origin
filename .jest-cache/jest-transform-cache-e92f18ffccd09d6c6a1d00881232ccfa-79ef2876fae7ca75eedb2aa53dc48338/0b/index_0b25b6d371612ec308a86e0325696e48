3f5e0c4a0752587d1c4a3ad780d7875e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseOS = exports.parseLSB = exports.isValidOs = exports.getOS = exports.isLinuxOS = exports.UNKNOWN = void 0;
const tslib_1 = require("tslib");
const os_1 = require("os");
const debug_1 = (0, tslib_1.__importDefault)(require("debug"));
const utils_1 = require("../utils");
const log = (0, debug_1.default)('MongoMS:getos');
/** Collection of Regexes for "lsb_release -a" parsing */
const LSBRegex = {
  // regex format is "lsb_release" (command output) and then "lsb-release" (file output)
  name: /^(?:distributor id:|DISTRIB_ID=)\s*(.*)$/im,
  codename: /^(?:codename:|DISTRIB_CODENAME=)\s*(.*)$/im,
  release: /^(?:release:|DISTRIB_RELEASE=)\s*(.*)$/im
};
/** Collection of Regexes for "/etc/os-release" parsing */
const OSRegex = {
  name: /^id\s*=\s*"?(\w*)"?$/im,
  codename: /^version_codename\s*=\s*(.*)$/im,
  release: /^version_id\s*=\s*"?(\d*(?:\.\d*)?)"?$/im,
  id_like: /^id_like\s*=\s*"?([\w\s]*)"?$/im
};
/** Helper Static so that a consistent UNKNOWN value is used */
exports.UNKNOWN = 'unknown';
/**
 * Check if the OS is a LinuxOS Typeguard
 * @param os The OS object to check for
 */
function isLinuxOS(os) {
  return os.os === 'linux';
}
exports.isLinuxOS = isLinuxOS;
/**
 * Cache the "getOS" call, so that not much has to be re-executed over and over
 */
let cachedOs;
/** Get an OS object */
function getOS() {
  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
    if (!cachedOs) {
      /** Node builtin function for first determinations */
      const osName = (0, os_1.platform)();
      // Linux is a special case.
      if (osName === 'linux') {
        cachedOs = yield getLinuxInformation();
      } else {
        cachedOs = {
          os: osName
        };
      }
    }
    return cachedOs;
  });
}
exports.getOS = getOS;
/** Function to outsource Linux Information Parsing */
function getLinuxInformation() {
  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
    // Structure of this function:
    // 1. get upstream release, if possible
    // 2. get os release (etc) because it has an "id_like"
    // 3. get os release (usr) because it has an "id_like"
    // 4. get lsb-release (etc) as fallback
    const upstreamLSB = yield (0, utils_1.tryReleaseFile)('/etc/upstream-release/lsb-release', parseLSB);
    if (isValidOs(upstreamLSB)) {
      log('getLinuxInformation: Using UpstreamLSB');
      return upstreamLSB;
    }
    const etcOsRelease = yield (0, utils_1.tryReleaseFile)('/etc/os-release', parseOS);
    if (isValidOs(etcOsRelease)) {
      log('getLinuxInformation: Using etcOsRelease');
      return etcOsRelease;
    }
    const usrOsRelease = yield (0, utils_1.tryReleaseFile)('/usr/lib/os-release', parseOS);
    if (isValidOs(usrOsRelease)) {
      log('getLinuxInformation: Using usrOsRelease');
      return usrOsRelease;
    }
    const etcLSBRelease = yield (0, utils_1.tryReleaseFile)('/etc/lsb-release', parseLSB);
    if (isValidOs(etcLSBRelease)) {
      log('getLinuxInformation: Using etcLSBRelease');
      return etcLSBRelease;
    }
    console.warn('Could not find any valid Release File, using fallback information');
    // if none has worked, return unknown
    return {
      os: 'linux',
      dist: exports.UNKNOWN,
      release: ''
    };
  });
}
/**
 * Helper function to check if the input os is valid
 * @param os The OS information to check
 * @returns `true` if not undefined AND not UNKNOWN
 */
function isValidOs(os) {
  // helper for debugging
  if (os && os.dist === exports.UNKNOWN) {
    log('isValidOS: found defined os, but was unknown:', os);
  }
  return !(0, utils_1.isNullOrUndefined)(os) && os.dist !== exports.UNKNOWN;
}
exports.isValidOs = isValidOs;
/**
 * Parse LSB-like output (either command or file)
 */
function parseLSB(input) {
  var _a, _b, _c, _d, _e;
  return {
    os: 'linux',
    dist: (_b = (_a = input.match(LSBRegex.name)) === null || _a === void 0 ? void 0 : _a[1].toLocaleLowerCase()) !== null && _b !== void 0 ? _b : exports.UNKNOWN,
    codename: (_c = input.match(LSBRegex.codename)) === null || _c === void 0 ? void 0 : _c[1].toLocaleLowerCase(),
    release: (_e = (_d = input.match(LSBRegex.release)) === null || _d === void 0 ? void 0 : _d[1].toLocaleLowerCase()) !== null && _e !== void 0 ? _e : ''
  };
}
exports.parseLSB = parseLSB;
/**
 * Parse OSRelease-like output
 */
function parseOS(input) {
  var _a, _b, _c, _d, _e, _f;
  return {
    os: 'linux',
    dist: (_b = (_a = input.match(OSRegex.name)) === null || _a === void 0 ? void 0 : _a[1].toLocaleLowerCase()) !== null && _b !== void 0 ? _b : exports.UNKNOWN,
    codename: (_c = input.match(OSRegex.codename)) === null || _c === void 0 ? void 0 : _c[1].toLocaleLowerCase(),
    release: (_e = (_d = input.match(OSRegex.release)) === null || _d === void 0 ? void 0 : _d[1].toLocaleLowerCase()) !== null && _e !== void 0 ? _e : '',
    id_like: (_f = input.match(OSRegex.id_like)) === null || _f === void 0 ? void 0 : _f[1].toLocaleLowerCase().split(' ')
  };
}
exports.parseOS = parseOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvc18xIiwicmVxdWlyZSIsImRlYnVnXzEiLCJ0c2xpYl8xIiwiX19pbXBvcnREZWZhdWx0IiwidXRpbHNfMSIsImxvZyIsImRlZmF1bHQiLCJMU0JSZWdleCIsIm5hbWUiLCJjb2RlbmFtZSIsInJlbGVhc2UiLCJPU1JlZ2V4IiwiaWRfbGlrZSIsImV4cG9ydHMiLCJVTktOT1dOIiwiaXNMaW51eE9TIiwib3MiLCJjYWNoZWRPcyIsImdldE9TIiwib3NOYW1lIiwicGxhdGZvcm0iLCJnZXRMaW51eEluZm9ybWF0aW9uIiwidXBzdHJlYW1MU0IiLCJ0cnlSZWxlYXNlRmlsZSIsInBhcnNlTFNCIiwiaXNWYWxpZE9zIiwiZXRjT3NSZWxlYXNlIiwicGFyc2VPUyIsInVzck9zUmVsZWFzZSIsImV0Y0xTQlJlbGVhc2UiLCJjb25zb2xlIiwid2FybiIsImRpc3QiLCJpc051bGxPclVuZGVmaW5lZCIsImlucHV0IiwiX2IiLCJfYSIsIm1hdGNoIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfYyIsIl9lIiwiX2QiLCJfZiIsInNwbGl0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWwvZ2V0b3MvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFBQSxJQUFBLEdBQUFDLE9BQUE7QUFDQSxNQUFBQyxPQUFBLE9BQUFDLE9BQUEsQ0FBQUMsZUFBQSxFQUFBSCxPQUFBO0FBQ0EsTUFBQUksT0FBQSxHQUFBSixPQUFBO0FBRUEsTUFBTUssR0FBRyxHQUFHLElBQUFKLE9BQUEsQ0FBQUssT0FBSyxFQUFDLGVBQWUsQ0FBQztBQUVsQztBQUNBLE1BQU1DLFFBQVEsR0FBRztFQUNmO0VBQ0FDLElBQUksRUFBRSw0Q0FBNEM7RUFDbERDLFFBQVEsRUFBRSw0Q0FBNEM7RUFDdERDLE9BQU8sRUFBRTtDQUNWO0FBRUQ7QUFDQSxNQUFNQyxPQUFPLEdBQUc7RUFDZEgsSUFBSSxFQUFFLHdCQUF3QjtFQUM5QkMsUUFB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