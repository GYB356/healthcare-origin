fae34ebb8fbfd7dd9ea545452a4d0ef5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _vitest = require("vitest");
var _server = require("next/server");
var _nextAuth = require("next-auth");
var _client = require("@prisma/client");
var _route = require("@/app/api/auth/[...nextauth]/route");
var _route2 = require("@/app/api/auth/register/route");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// Mock next-auth
_vitest.vi.mock('next-auth', () => ({
  getServerSession: _vitest.vi.fn()
}));

// Mock Prisma
_vitest.vi.mock('@prisma/client', () => ({
  PrismaClient: _vitest.vi.fn(() => ({
    user: {
      findUnique: _vitest.vi.fn(),
      create: _vitest.vi.fn()
    },
    $transaction: _vitest.vi.fn(callback => callback())
  }))
}));
(0, _vitest.describe)('Auth API', () => {
  let mockPrisma;
  let mockSession;
  (0, _vitest.beforeEach)(() => {
    mockPrisma = new _client.PrismaClient();
    mockSession = {
      user: {
        id: 'test-user-id',
        email: 'test@example.com'
      }
    };
    _nextAuth.getServerSession.mockResolvedValue(mockSession);
  });
  (0, _vitest.afterEach)(() => {
    _vitest.vi.clearAllMocks();
  });
  (0, _vitest.describe)('GET /api/auth/session', () => {
    (0, _vitest.it)('should return session data for authenticated users', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/auth/session');
      const response = await (0, _route.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockSession);
    });
    (0, _vitest.it)('should return null for unauthenticated users', async () => {
      ;
      _nextAuth.getServerSession.mockResolvedValue(null);
      const request = new _server.NextRequest('http://localhost:3000/api/auth/session');
      const response = await (0, _route.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toBeNull();
    });
  });
  (0, _vitest.describe)('POST /api/auth/register', () => {
    (0, _vitest.it)('should create a new user account', async () => {
      const mockUser = {
        email: 'new@example.com',
        password: 'StrongPass123!',
        name: 'New User',
        role: 'PATIENT'
      };
      mockPrisma.user.findUnique.mockResolvedValue(null);
      mockPrisma.user.create.mockResolvedValue(_objectSpread({
        id: '1'
      }, mockUser));
      const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
        method: 'POST',
        body: JSON.stringify(mockUser)
      });
      const response = await (0, _route2.POST)(request);
      (0, _vitest.expect)(response.status).toBe(201);
      const data = await response.json();
      (0, _vitest.expect)(data).toHaveProperty('id');
      (0, _vitest.expect)(data.email).toBe(mockUser.email);
    });
    (0, _vitest.it)('should validate required fields', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
        method: 'POST',
        body: JSON.stringify({})
      });
      const response = await (0, _route2.POST)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(400);
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('Required fields missing'));
      (0, _vitest.expect)(data.fields).toEqual(_vitest.expect.arrayContaining(['email', 'password', 'name', 'role']));
    });
    (0, _vitest.it)('should validate password strength', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
        method: 'POST',
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'weak',
          name: 'Test User',
          role: 'PATIENT'
        })
      });
      const response = await (0, _route2.POST)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(400);
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('password'));
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('Password must be at least 8 characters'));
    });
    (0, _vitest.it)('should prevent duplicate email registration', async () => {
      mockPrisma.user.findUnique.mockResolvedValue({
        id: '1',
        email: 'existing@example.com'
      });
      const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
        method: 'POST',
        body: JSON.stringify({
          email: 'existing@example.com',
          password: 'StrongPass123!',
          name: 'Test User',
          role: 'PATIENT'
        })
      });
      const response = await (0, _route2.POST)(request);
      (0, _vitest.expect)(response.status).toBe(409);
      const data = await response.json();
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('Email already exists'));
    });
    (0, _vitest.it)('should validate email format', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
        method: 'POST',
        body: JSON.stringify({
          email: 'invalid-email',
          password: 'StrongPass123!',
          name: 'Test User',
          role: 'PATIENT'
        })
      });
      const response = await (0, _route2.POST)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(400);
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('email'));
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('Invalid email format'));
    });
    (0, _vitest.it)('should validate role', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
        method: 'POST',
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'StrongPass123!',
          name: 'Test User',
          role: 'INVALID_ROLE'
        })
      });
      const response = await (0, _route2.POST)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(400);
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('role'));
      (0, _vitest.expect)(data.error).toEqual(_vitest.expect.stringContaining('Invalid role. Must be one of: PATIENT, DOCTOR, STAFF'));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,