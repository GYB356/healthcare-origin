{"version":3,"names":["_vitest","require","_server","_nextAuth","_client","_route","_route2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","vi","mock","getServerSession","fn","PrismaClient","user","findUnique","create","$transaction","callback","describe","mockPrisma","mockSession","beforeEach","id","email","mockResolvedValue","afterEach","clearAllMocks","it","request","NextRequest","response","GET","data","json","expect","status","toBe","toEqual","toBeNull","mockUser","password","name","role","method","body","JSON","stringify","registerPOST","toHaveProperty","error","stringContaining","fields","arrayContaining"],"sources":["auth.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'\nimport { NextRequest } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { PrismaClient } from '@prisma/client'\nimport { GET } from '@/app/api/auth/[...nextauth]/route'\nimport { POST as registerPOST } from '@/app/api/auth/register/route'\n\n// Mock next-auth\nvi.mock('next-auth', () => ({\n  getServerSession: vi.fn(),\n}))\n\n// Mock Prisma\nvi.mock('@prisma/client', () => ({\n  PrismaClient: vi.fn(() => ({\n    user: {\n      findUnique: vi.fn(),\n      create: vi.fn(),\n    },\n    $transaction: vi.fn(callback => callback()),\n  })),\n}))\n\ndescribe('Auth API', () => {\n  let mockPrisma: any\n  let mockSession: any\n\n  beforeEach(() => {\n    mockPrisma = new PrismaClient()\n    mockSession = {\n      user: {\n        id: 'test-user-id',\n        email: 'test@example.com',\n      },\n    }\n    ;(getServerSession as any).mockResolvedValue(mockSession)\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('GET /api/auth/session', () => {\n    it('should return session data for authenticated users', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/session')\n      const response = await GET(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data).toEqual(mockSession)\n    })\n\n    it('should return null for unauthenticated users', async () => {\n      ;(getServerSession as any).mockResolvedValue(null)\n      const request = new NextRequest('http://localhost:3000/api/auth/session')\n      const response = await GET(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data).toBeNull()\n    })\n  })\n\n  describe('POST /api/auth/register', () => {\n    it('should create a new user account', async () => {\n      const mockUser = {\n        email: 'new@example.com',\n        password: 'StrongPass123!',\n        name: 'New User',\n        role: 'PATIENT',\n      }\n      mockPrisma.user.findUnique.mockResolvedValue(null)\n      mockPrisma.user.create.mockResolvedValue({ id: '1', ...mockUser })\n\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(mockUser),\n      })\n      const response = await registerPOST(request)\n\n      expect(response.status).toBe(201)\n      const data = await response.json()\n      expect(data).toHaveProperty('id')\n      expect(data.email).toBe(mockUser.email)\n    })\n\n    it('should validate required fields', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify({}),\n      })\n      const response = await registerPOST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toEqual(expect.stringContaining('Required fields missing'))\n      expect(data.fields).toEqual(\n        expect.arrayContaining(['email', 'password', 'name', 'role'])\n      )\n    })\n\n    it('should validate password strength', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'weak',\n          name: 'Test User',\n          role: 'PATIENT',\n        }),\n      })\n      const response = await registerPOST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toEqual(expect.stringContaining('password'))\n      expect(data.error).toEqual(\n        expect.stringContaining('Password must be at least 8 characters')\n      )\n    })\n\n    it('should prevent duplicate email registration', async () => {\n      mockPrisma.user.findUnique.mockResolvedValue({ id: '1', email: 'existing@example.com' })\n\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'existing@example.com',\n          password: 'StrongPass123!',\n          name: 'Test User',\n          role: 'PATIENT',\n        }),\n      })\n      const response = await registerPOST(request)\n\n      expect(response.status).toBe(409)\n      const data = await response.json()\n      expect(data.error).toEqual(expect.stringContaining('Email already exists'))\n    })\n\n    it('should validate email format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'invalid-email',\n          password: 'StrongPass123!',\n          name: 'Test User',\n          role: 'PATIENT',\n        }),\n      })\n      const response = await registerPOST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toEqual(expect.stringContaining('email'))\n      expect(data.error).toEqual(expect.stringContaining('Invalid email format'))\n    })\n\n    it('should validate role', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'StrongPass123!',\n          name: 'Test User',\n          role: 'INVALID_ROLE',\n        }),\n      })\n      const response = await registerPOST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toEqual(expect.stringContaining('role'))\n      expect(data.error).toEqual(\n        expect.stringContaining('Invalid role. Must be one of: PATIENT, DOCTOR, STAFF')\n      )\n    })\n  })\n}) "],"mappings":"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","ignoreList":[]}