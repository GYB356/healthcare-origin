2fb691e7ff9f613456e8261b9a791b3e
const {
  MongoMemoryServer
} = require('mongodb-memory-server-core');
const mongoose = require('mongoose');
let mongod = null;

// Connect to the in-memory database before running tests
beforeAll(async () => {
  try {
    mongod = await MongoMemoryServer.create({
      binary: {
        version: '6.0.4'
      }
    });
    const uri = mongod.getUri();
    await mongoose.connect(uri);
  } catch (error) {
    console.error('MongoDB Memory Server setup failed:', error);
    throw error;
  }
});

// Clear all data between tests
afterEach(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      const collections = await mongoose.connection.db.collections();
      await Promise.all(collections.map(collection => collection.deleteMany({})));
    }
  } catch (error) {
    console.error('Failed to clean up test database:', error);
    throw error;
  }
});

// Close database connection after all tests
afterAll(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.disconnect();
    }
    if (mongod) {
      await mongod.stop();
    }
  } catch (error) {
    console.error('Failed to stop MongoDB Memory Server:', error);
    throw error;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb25nb01lbW9yeVNlcnZlciIsInJlcXVpcmUiLCJtb25nb29zZSIsIm1vbmdvZCIsImJlZm9yZUFsbCIsImNyZWF0ZSIsImJpbmFyeSIsInZlcnNpb24iLCJ1cmkiLCJnZXRVcmkiLCJjb25uZWN0IiwiZXJyb3IiLCJjb25zb2xlIiwiYWZ0ZXJFYWNoIiwiY29ubmVjdGlvbiIsInJlYWR5U3RhdGUiLCJjb2xsZWN0aW9ucyIsImRiIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImNvbGxlY3Rpb24iLCJkZWxldGVNYW55IiwiYWZ0ZXJBbGwiLCJkaXNjb25uZWN0Iiwic3RvcCJdLCJzb3VyY2VzIjpbIm1vbmdvZGIuc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBNb25nb01lbW9yeVNlcnZlciB9ID0gcmVxdWlyZSgnbW9uZ29kYi1tZW1vcnktc2VydmVyLWNvcmUnKTtcclxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5cclxubGV0IG1vbmdvZCA9IG51bGw7XHJcblxyXG4vLyBDb25uZWN0IHRvIHRoZSBpbi1tZW1vcnkgZGF0YWJhc2UgYmVmb3JlIHJ1bm5pbmcgdGVzdHNcclxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgbW9uZ29kID0gYXdhaXQgTW9uZ29NZW1vcnlTZXJ2ZXIuY3JlYXRlKHtcclxuICAgICAgYmluYXJ5OiB7XHJcbiAgICAgICAgdmVyc2lvbjogJzYuMC40J1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHVyaSA9IG1vbmdvZC5nZXRVcmkoKTtcclxuICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QodXJpKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignTW9uZ29EQiBNZW1vcnkgU2VydmVyIHNldHVwIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gQ2xlYXIgYWxsIGRhdGEgYmV0d2VlbiB0ZXN0c1xyXG5hZnRlckVhY2goYXN5bmMgKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlICE9PSAwKSB7XHJcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5kYi5jb2xsZWN0aW9ucygpO1xyXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChjb2xsZWN0aW9ucy5tYXAoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmRlbGV0ZU1hbnkoe30pKSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjbGVhbiB1cCB0ZXN0IGRhdGFiYXNlOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyBDbG9zZSBkYXRhYmFzZSBjb25uZWN0aW9uIGFmdGVyIGFsbCB0ZXN0c1xyXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmIChtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgIT09IDApIHtcclxuICAgICAgYXdhaXQgbW9uZ29vc2UuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1vbmdvZCkge1xyXG4gICAgICBhd2FpdCBtb25nb2Quc3RvcCgpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc3RvcCBNb25nb0RCIE1lbW9yeSBTZXJ2ZXI6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59KTsgIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBO0FBQWtCLENBQUMsR0FBR0MsT0FBTyxDQUFDLDRCQUE0QixDQUFDO0FBQ25FLE1BQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUVwQyxJQUFJRSxNQUFNLEdBQUcsSUFBSTs7QUFFakI7QUFDQUMsU0FBUyxDQUFDLFlBQVk7RUFDcEIsSUFBSTtJQUNGRCxNQUFNLEdBQUcsTUFBTUgsaUJBQWlCLENBQUNLLE1BQU0sQ0FBQztNQUN0Q0MsTUFBTSxFQUFFO1FBQ05DLE9BQU8sRUFBRTtNQUNYO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsTUFBTUMsR0FBRyxHQUFHTCxNQUFNLENBQUNNLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLE1BQU1QLFFBQVEsQ0FBQ1EsT0FBTyxDQUFDRixHQUFHLENBQUM7RUFDN0IsQ0FBQyxDQUFDLE9BQU9HLEtBQUssRUFBRTtJQUNkQyxPQUFPLENBQUNELEtBQUssQ0FBQyxxQ0FBcUMsRUFBRUEsS0FBSyxDQUFDO0lBQzNELE1BQU1BLEtBQUs7RUFDYjtBQUNGLENBQUMsQ0FBQzs7QUFFRjtBQUNBRSxTQUFTLENBQUMsWUFBWTtFQUNwQixJQUFJO0lBQ0YsSUFBSVgsUUFBUSxDQUFDWSxVQUFVLENBQUNDLFVBQVUsS0FBSyxDQUFDLEVBQUU7TUFDeEMsTUFBTUMsV0FBVyxHQUFHLE1BQU1kLFFBQVEsQ0FBQ1ksVUFBVSxDQUFDRyxFQUFFLENBQUNELFdBQVcsQ0FBQyxDQUFDO01BQzlELE1BQU1FLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSCxXQUFXLENBQUNJLEdBQUcsQ0FBQ0MsVUFBVSxJQUFJQSxVQUFVLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0U7RUFDRixDQUFDLENBQUMsT0FBT1gsS0FBSyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLG1DQUFtQyxFQUFFQSxLQUFLLENBQUM7SUFDekQsTUFBTUEsS0FBSztFQUNiO0FBQ0YsQ0FBQyxDQUFDOztBQUVGO0FBQ0FZLFFBQVEsQ0FBQyxZQUFZO0VBQ25CLElBQUk7SUFDRixJQUFJckIsUUFBUSxDQUFDWSxVQUFVLENBQUNDLFVBQVUsS0FBSyxDQUFDLEVBQUU7TUFDeEMsTUFBTWIsUUFBUSxDQUFDc0IsVUFBVSxDQUFDLENBQUM7SUFDN0I7SUFDQSxJQUFJckIsTUFBTSxFQUFFO01BQ1YsTUFBTUEsTUFBTSxDQUFDc0IsSUFBSSxDQUFDLENBQUM7SUFDckI7RUFDRixDQUFDLENBQUMsT0FBT2QsS0FBSyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLHVDQUF1QyxFQUFFQSxLQUFLLENBQUM7SUFDN0QsTUFBTUEsS0FBSztFQUNiO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119