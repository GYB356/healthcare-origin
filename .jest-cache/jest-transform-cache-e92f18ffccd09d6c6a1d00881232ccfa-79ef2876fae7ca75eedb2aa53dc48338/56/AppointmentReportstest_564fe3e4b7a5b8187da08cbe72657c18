07159180c42c98f191c7a6b5faac5209
"use strict";

_getJestObj().mock('../../context/AuthContext', () => {
  const originalModule = jest.requireActual('../../context/AuthContext');
  return _objectSpread(_objectSpread({}, originalModule), {}, {
    useAuth: () => ({
      token: 'mock-token',
      user: {
        role: 'doctor'
      }
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _AppointmentReports = _interopRequireDefault(require("../../pages/AppointmentReports"));
var _AuthContext = require("../../context/AuthContext");
var _jestFetchMock = _interopRequireDefault(require("jest-fetch-mock"));
var _reactRouterDom = require("react-router-dom");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\frontend\\__tests__\\pages\\AppointmentReports.test.tsx";
import React from "react";
var __jsx = React.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('AppointmentReports', () => {
  beforeEach(() => {
    _jestFetchMock.default.resetMocks();
  });
  test('renders loading state initially', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppointmentReports.default, {})
      })
    }));
    expect(_react2.screen.getByText(/Loading appointment details.../i)).toBeInTheDocument();
  });
  test('renders error message when fetching appointment fails', async () => {
    _jestFetchMock.default.mockRejectOnce(new Error('Failed to fetch appointment details'));
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppointmentReports.default, {})
      })
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText(/Failed to fetch appointment details/i)).toBeInTheDocument();
    });
  });
  test('renders appointment details when fetching succeeds', async () => {
    _jestFetchMock.default.mockResponseOnce(JSON.stringify({
      _id: '123',
      title: 'Test Appointment',
      date: '2023-01-01',
      time: '10:00 AM',
      doctor: {
        _id: '1',
        name: 'Dr. Smith',
        specialty: 'Cardiology'
      },
      patient: {
        _id: '2',
        name: 'John Doe'
      },
      status: 'completed',
      notes: 'Test notes'
    }));
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppointmentReports.default, {})
      })
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText(/Test Appointment/i)).toBeInTheDocument();
      expect(_react2.screen.getByText(/Dr. Smith - Cardiology/i)).toBeInTheDocument();
      expect(_react2.screen.getByText(/John Doe/i)).toBeInTheDocument();
      expect(_react2.screen.getByText(/Test notes/i)).toBeInTheDocument();
    });
  });
  test('renders report viewer for completed appointments', async () => {
    _jestFetchMock.default.mockResponseOnce(JSON.stringify({
      _id: '123',
      title: 'Test Appointment',
      date: '2023-01-01',
      time: '10:00 AM',
      doctor: {
        _id: '1',
        name: 'Dr. Smith',
        specialty: 'Cardiology'
      },
      patient: {
        _id: '2',
        name: 'John Doe'
      },
      status: 'completed',
      notes: 'Test notes'
    }));
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppointmentReports.default, {})
      })
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText(/Reports are only available for completed appointments./i)).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,