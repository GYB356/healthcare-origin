{"version":3,"names":["_getJestObj","mock","originalModule","jest","requireActual","_objectSpread","useAuth","token","user","role","_interopRequireDefault","require","_defineProperty2","_react","_react2","_AppointmentReports","_AuthContext","_jestFetchMock","_reactRouterDom","_jsxRuntime","_jsxFileName","React","__jsx","createElement","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","arguments","length","forEach","default","getOwnPropertyDescriptors","defineProperties","defineProperty","describe","beforeEach","fetchMock","resetMocks","test","render","jsx","AuthProvider","children","BrowserRouter","expect","screen","getByText","toBeInTheDocument","mockRejectOnce","Error","waitFor","mockResponseOnce","JSON","stringify","_id","title","date","time","doctor","name","specialty","patient","status","notes"],"sources":["AppointmentReports.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport AppointmentReports from '../../pages/AppointmentReports';\nimport { AuthProvider } from '../../context/AuthContext';\nimport fetchMock from 'jest-fetch-mock';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\njest.mock('../../context/AuthContext', () => {\n  const originalModule = jest.requireActual('../../context/AuthContext');\n  return {\n    ...originalModule,\n    useAuth: () => ({\n      token: 'mock-token',\n      user: { role: 'doctor' },\n    }),\n  };\n});\n\ndescribe('AppointmentReports', () => {\n  beforeEach(() => {\n    fetchMock.resetMocks();\n  });\n\n  test('renders loading state initially', () => {\n    render(\n      <AuthProvider>\n        <Router>\n          <AppointmentReports />\n        </Router>\n      </AuthProvider>\n    );\n    expect(screen.getByText(/Loading appointment details.../i)).toBeInTheDocument();\n  });\n\n  test('renders error message when fetching appointment fails', async () => {\n    fetchMock.mockRejectOnce(new Error('Failed to fetch appointment details'));\n\n    render(\n      <AuthProvider>\n        <Router>\n          <AppointmentReports />\n        </Router>\n      </AuthProvider>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/Failed to fetch appointment details/i)).toBeInTheDocument();\n    });\n  });\n\n  test('renders appointment details when fetching succeeds', async () => {\n    fetchMock.mockResponseOnce(JSON.stringify({\n      _id: '123',\n      title: 'Test Appointment',\n      date: '2023-01-01',\n      time: '10:00 AM',\n      doctor: { _id: '1', name: 'Dr. Smith', specialty: 'Cardiology' },\n      patient: { _id: '2', name: 'John Doe' },\n      status: 'completed',\n      notes: 'Test notes'\n    }));\n\n    render(\n      <AuthProvider>\n        <Router>\n          <AppointmentReports />\n        </Router>\n      </AuthProvider>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/Test Appointment/i)).toBeInTheDocument();\n      expect(screen.getByText(/Dr. Smith - Cardiology/i)).toBeInTheDocument();\n      expect(screen.getByText(/John Doe/i)).toBeInTheDocument();\n      expect(screen.getByText(/Test notes/i)).toBeInTheDocument();\n    });\n  });\n\n  test('renders report viewer for completed appointments', async () => {\n    fetchMock.mockResponseOnce(JSON.stringify({\n      _id: '123',\n      title: 'Test Appointment',\n      date: '2023-01-01',\n      time: '10:00 AM',\n      doctor: { _id: '1', name: 'Dr. Smith', specialty: 'Cardiology' },\n      patient: { _id: '2', name: 'John Doe' },\n      status: 'completed',\n      notes: 'Test notes'\n    }));\n\n    render(\n      <AuthProvider>\n        <Router>\n          <AppointmentReports />\n        </Router>\n      </AuthProvider>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/Reports are only available for completed appointments./i)).toBeInTheDocument();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}