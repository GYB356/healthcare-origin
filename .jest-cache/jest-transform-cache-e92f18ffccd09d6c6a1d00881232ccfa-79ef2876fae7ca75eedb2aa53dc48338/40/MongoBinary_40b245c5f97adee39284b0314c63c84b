80678e0787f3c83da9bf4ae367390d07
"use strict";

var _defineProperty = require("@babel/runtime/helpers/defineProperty");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MongoBinary = void 0;
const tslib_1 = require("tslib");
const os_1 = tslib_1.__importDefault(require("os"));
const MongoBinaryDownload_1 = tslib_1.__importDefault(require("./MongoBinaryDownload"));
const resolveConfig_1 = tslib_1.__importStar(require("./resolveConfig"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const semver = tslib_1.__importStar(require("semver"));
const utils_1 = require("./utils");
const child_process_1 = require("child_process");
const lockfile_1 = require("./lockfile");
const DryMongoBinary_1 = require("./DryMongoBinary");
const log = (0, debug_1.default)('MongoMS:MongoBinary');
/**
 * Class used to combine "DryMongoBinary" & "MongoBinaryDownload"
 */
class MongoBinary {
  /**
   * Probe download path and download the binary
   * @param options Options Configuring which binary to download and to which path
   * @returns The BinaryPath the binary has been downloaded to
   */
  static async download(options) {
    log('download');
    const {
      downloadDir,
      version
    } = options;
    // create downloadDir
    await (0, utils_1.mkdir)(downloadDir);
    /** Lockfile path */
    const lockfile = (0, utils_1.lockfilePath)(downloadDir, version);
    log(`download: Waiting to acquire Download lock for file "${lockfile}"`);
    // wait to get a lock
    // downloading of binaries may be quite long procedure
    // that's why we are using so big wait/stale periods
    const lock = await lockfile_1.LockFile.lock(lockfile);
    log('download: Download lock acquired');
    // this is to ensure that the lockfile gets removed in case of an error
    try {
      // check cache if it got already added to the cache
      if (!DryMongoBinary_1.DryMongoBinary.binaryCache.has(version)) {
        log(`download: Adding version ${version} to cache`);
        const downloader = new MongoBinaryDownload_1.default(options);
        DryMongoBinary_1.DryMongoBinary.binaryCache.set(version, await downloader.getMongodPath());
      }
    } finally {
      log('download: Removing Download lock');
      // remove lock
      await lock.unlock();
      log('download: Download lock removed');
    }
    const cachePath = DryMongoBinary_1.DryMongoBinary.binaryCache.get(version);
    // ensure that "path" exists, so the return type does not change
    (0, utils_1.assertion)(typeof cachePath === 'string', new Error(`No Cache Path for version "${version}" found (and download failed silently?)`));
    return cachePath;
  }
  /**
   * Probe all supported paths for an binary and return the binary path
   * @param opts Options configuring which binary to search for
   * @throws {Error} if no valid BinaryPath has been found
   * @returns The first found BinaryPath
   */
  static async getPath(opts = {}) {
    log('getPath');
    // "||" is still used here, because it should default if the value is false-y (like an empty string)
    const options = _objectSpread(_objectSpread({}, await DryMongoBinary_1.DryMongoBinary.generateOptions(opts)), {}, {
      platform: opts.platform || (0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.PLATFORM) || os_1.default.platform(),
      checkMD5: opts.checkMD5 || (0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.MD5_CHECK))
    });
    log(`getPath: MongoBinary options:`, JSON.stringify(options, null, 2));
    let binaryPath = await DryMongoBinary_1.DryMongoBinary.locateBinary(options);
    // check if the system binary has the same version as requested
    if (!!options.systemBinary) {
      // this case should actually never be false, because if "SYSTEM_BINARY" is set, "locateBinary" will run "getSystemPath" which tests the path for permissions
      if (!(0, utils_1.isNullOrUndefined)(binaryPath)) {
        // dont warn if the versions dont match if "SYSTEM_BINARY_VERSION_CHECK" is false, but still test the binary if it is available to be executed
        if ((0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.SYSTEM_BINARY_VERSION_CHECK))) {
          log(`getPath: Spawning binaryPath "${binaryPath}" to get version`);
          const spawnOutput = (0, child_process_1.spawnSync)(binaryPath, ['--version'])
          // NOTE: "stdout" seemingly can be "undefined", see https://github.com/typegoose/mongodb-memory-server/issues/742#issuecomment-2528284865
          .stdout?.toString()
          // this regex is to match the first line of the "mongod --version" output "db version v4.0.25" OR "db version v4.2.19-11-ge2f2736"
          .match(/^\s*db\s+version\s+v?(\d+\.\d+\.\d+)(-\d*)?(-[a-zA-Z0-9].*)?\s*$/im);
          (0, utils_1.assertion)(!(0, utils_1.isNullOrUndefined)(spawnOutput), new Error('Couldnt find an version from system binary output!'));
          log('getPath: Checking & Warning about version conflicts');
          const binaryVersion = spawnOutput[1];
          if (semver.neq(options.version, binaryVersion)) {
            // we will log the version number of the system binary and the version requested so the user can see the difference
            console.warn('getPath: MongoMemoryServer: Possible version conflict\n' + `  SystemBinary version: "${binaryVersion}"\n` + `  Requested version:    "${options.version}"\n\n` + '  Using SystemBinary!');
          }
        }
      } else {
        throw new Error('Option "SYSTEM_BINARY" was set, but binaryPath was empty! (system binary could not be found?) [This Error should normally not be thrown, please report this]');
      }
    }
    (0, utils_1.assertion)(typeof options.version === 'string', new Error('"MongoBinary.options.version" is not an string!'));
    if (!binaryPath) {
      if ((0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.RUNTIME_DOWNLOAD))) {
        log('getPath: "RUNTIME_DOWNLOAD" is "true", trying to download');
        binaryPath = await this.download(options);
      } else {
        log('getPath: "RUNTIME_DOWNLOAD" is "false", not downloading');
      }
    }
    if (!binaryPath) {
      const runtimeDownload = (0, resolveConfig_1.envToBool)((0, resolveConfig_1.default)(resolveConfig_1.ResolveConfigVariables.RUNTIME_DOWNLOAD));
      throw new Error(`MongoBinary.getPath: could not find an valid binary path! (Got: "${binaryPath}", RUNTIME_DOWNLOAD: "${runtimeDownload}")`);
    }
    log(`getPath: Mongod binary path: "${binaryPath}"`);
    return binaryPath;
  }
}
exports.MongoBinary = MongoBinary;
exports.default = MongoBinary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvc18xIiwidHNsaWJfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJNb25nb0JpbmFyeURvd25sb2FkXzEiLCJyZXNvbHZlQ29uZmlnXzEiLCJfX2ltcG9ydFN0YXIiLCJkZWJ1Z18xIiwic2VtdmVyIiwidXRpbHNfMSIsImNoaWxkX3Byb2Nlc3NfMSIsImxvY2tmaWxlXzEiLCJEcnlNb25nb0JpbmFyeV8xIiwibG9nIiwiZGVmYXVsdCIsIk1vbmdvQmluYXJ5IiwiZG93bmxvYWQiLCJvcHRpb25zIiwiZG93bmxvYWREaXIiLCJ2ZXJzaW9uIiwibWtkaXIiLCJsb2NrZmlsZSIsImxvY2tmaWxlUGF0aCIsImxvY2siLCJMb2NrRmlsZSIsIkRyeU1vbmdvQmluYXJ5IiwiYmluYXJ5Q2FjaGUiLCJoYXMiLCJkb3dubG9hZGVyIiwic2V0IiwiZ2V0TW9uZ29kUGF0aCIsInVubG9jayIsImNhY2hlUGF0aCIsImdldCIsImFzc2VydGlvbiIsIkVycm9yIiwiZ2V0UGF0aCIsIm9wdHMiLCJfb2JqZWN0U3ByZWFkIiwiZ2VuZXJhdGVPcHRpb25zIiwicGxhdGZvcm0iLCJSZXNvbHZlQ29uZmlnVmFyaWFibGVzIiwiUExBVEZPUk0iLCJjaGVja01ENSIsImVudlRvQm9vbCIsIk1ENV9DSEVDSyIsIkpTT04iLCJzdHJpbmdpZnkiLCJiaW5hcnlQYXRoIiwibG9jYXRlQmluYXJ5Iiwic3lzdGVtQmluYXJ5IiwiaXNOdWxsT3JVbmRlZmluZWQiLCJTWVNURU1fQklOQVJZX1ZFUlNJT05fQ0hFQ0siLCJzcGF3bk91dHB1dCIsInNwYXduU3luYyIsInN0ZG91dCIsInRvU3RyaW5nIiwibWF0Y2giLCJiaW5hcnlWZXJzaW9uIiwibmVxIiwiY29uc29sZSIsIndhcm4iLCJSVU5USU1FX0RPV05MT0FEIiwicnVudGltZURvd25sb2FkIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL01vbmdvQmluYXJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVs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QXFELENBQUM7VUFDMUQsTUFBTTZDLGFBQWEsR0FBR0wsV0FBVyxDQUFDLENBQUMsQ0FBQztVQUVwQyxJQUFJN0MsTUFBTSxDQUFDbUQsR0FBRyxDQUFDMUMsT0FBTyxDQUFDRSxPQUFPLEVBQUV1QyxhQUFhLENBQUMsRUFBRTtZQUM5QztZQUNBRSxPQUFPLENBQUNDLElBQUksQ0FDVix5REFBeUQsR0FDdkQsNEJBQTRCSCxhQUFhLEtBQUssR0FDOUMsNEJBQTRCekMsT0FBTyxDQUFDRSxPQUFPLE9BQU8sR0FDbEQsdUJBQXVCLENBQzFCO1VBQ0g7UUFDRjtNQUNGLENBQUMsTUFBTTtRQUNMLE1BQU0sSUFBSWdCLEtBQUssQ0FDYiw4SkFBOEosQ0FDL0o7TUFDSDtJQUNGO0lBRUEsSUFBQTFCLE9BQUEsQ0FBQXlCLFNBQVMsRUFDUCxPQUFPakIsT0FBTyxDQUFDRSxPQUFPLEtBQUssUUFBUSxFQUNuQyxJQUFJZ0IsS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQzdEO0lBRUQsSUFBSSxDQUFDYSxVQUFVLEVBQUU7TUFDZixJQUFJLElBQUEzQyxlQUFBLENBQUF1QyxTQUFTLEVBQUMsSUFBQXZDLGVBQUEsQ0FBQVMsT0FBYSxFQUFDVCxlQUFBLENBQUFvQyxzQkFBc0IsQ0FBQ3FCLGdCQUFnQixDQUFDLENBQUMsRUFBRTtRQUNyRWpELEdBQUcsQ0FBQywyREFBMkQsQ0FBQztRQUNoRW1DLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQ2hDLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDO01BQzNDLENBQUMsTUFBTTtRQUNMSixHQUFHLENBQUMseURBQXlELENBQUM7TUFDaEU7SUFDRjtJQUVBLElBQUksQ0FBQ21DLFVBQVUsRUFBRTtNQUNmLE1BQU1lLGVBQWUsR0FBRyxJQUFBMUQsZUFBQSxDQUFBdUMsU0FBUyxFQUFDLElBQUF2QyxlQUFBLENBQUFTLE9BQWEsRUFBQ1QsZUFBQSxDQUFBb0Msc0JBQXNCLENBQUNxQixnQkFBZ0IsQ0FBQyxDQUFDO01BQ3pGLE1BQU0sSUFBSTNCLEtBQUssQ0FDYixvRUFBb0VhLFVBQVUseUJBQXlCZSxlQUFlLElBQUksQ0FDM0g7SUFDSDtJQUVBbEQsR0FBRyxDQUFDLGlDQUFpQ21DLFVBQVUsR0FBRyxDQUFDO0lBRW5ELE9BQU9BLFVBQVU7RUFDbkI7O0FBaElGZ0IsT0FBQSxDQUFBakQsV0FBQSxHQUFBQSxXQUFBO0FBbUlBaUQsT0FBQSxDQUFBbEQsT0FBQSxHQUFlQyxXQUFXIiwiaWdub3JlTGlzdCI6W119