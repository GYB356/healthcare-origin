{"version":3,"names":["_getJestObj","mock","generateMedicalReport","jest","fn","mockResolvedValue","extractMedicalInfo","symptoms","diagnosis","recommendations","medications","followUpNeeded","generateFollowUpQuestions","require","request","mongoose","MongoMemoryServer","app","Report","User","mongoServer","getAuthToken","testUser","create","name","email","password","role","response","post","send","body","token","beforeAll","connect","getUri","afterAll","disconnect","stop","describe","appointmentId","appointmentResponse","set","patientName","date","Date","toISOString","reason","_id","beforeEach","deleteMany","test","transcript","expect","statusCode","toBe","toHaveProperty","report","get","Array","isArray","length","createResponse","reportId","mockRejectedValue","Error"],"sources":["reportRoutes.test.js"],"sourcesContent":["const request = require('supertest');\nconst mongoose = require('mongoose');\nconst { MongoMemoryServer } = require('mongodb-memory-server');\nconst app = require('../server');\nconst Report = require('../models/Report');\nconst User = require('../models/User');\n\nlet mongoServer;\n\n// Mock the AI utils\njest.mock('../utils/aiUtils', () => ({\n  generateMedicalReport: jest.fn().mockResolvedValue('Test medical report content'),\n  extractMedicalInfo: jest.fn().mockResolvedValue({\n    symptoms: ['Headache', 'Fever'],\n    diagnosis: 'Common cold',\n    recommendations: ['Rest', 'Fluids'],\n    medications: ['Paracetamol'],\n    followUpNeeded: false\n  }),\n  generateFollowUpQuestions: jest.fn().mockResolvedValue('Follow up questions')\n}));\n\n// Create a test user and get auth token\nconst getAuthToken = async () => {\n  const testUser = await User.create({\n    name: 'Test Doctor',\n    email: 'testdoctor@example.com',\n    password: 'password123',\n    role: 'doctor'\n  });\n  \n  const response = await request(app)\n    .post('/api/users/login')\n    .send({\n      email: 'testdoctor@example.com',\n      password: 'password123'\n    });\n  \n  return response.body.token;\n};\n\nbeforeAll(async () => {\n  mongoServer = await MongoMemoryServer.create();\n  await mongoose.connect(mongoServer.getUri());\n});\n\nafterAll(async () => {\n  await mongoose.disconnect();\n  await mongoServer.stop();\n});\n\ndescribe('Report Routes', () => {\n  let token, appointmentId;\n  \n  beforeAll(async () => {\n    token = await getAuthToken();\n    \n    // Create a test appointment\n    const appointmentResponse = await request(app)\n      .post('/api/appointments')\n      .set('Authorization', `Bearer ${token}`)\n      .send({\n        patientName: 'Test Patient',\n        date: new Date().toISOString(),\n        reason: 'Test appointment'\n      });\n    \n    appointmentId = appointmentResponse.body._id;\n  });\n  \n  beforeEach(async () => {\n    await Report.deleteMany({});\n  });\n  \n  test('Should generate a new report', async () => {\n    const response = await request(app)\n      .post('/api/reports')\n      .set('Authorization', `Bearer ${token}`)\n      .send({\n        appointmentId,\n        transcript: 'This is a test transcript'\n      });\n    \n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty('report');\n    expect(response.body.report).toHaveProperty('_id');\n    expect(response.body.report.report).toBe('Test medical report content');\n  });\n  \n  test('Should fail with bad request if transcript is missing', async () => {\n    const response = await request(app)\n      .post('/api/reports')\n      .set('Authorization', `Bearer ${token}`)\n      .send({\n        appointmentId\n      });\n    \n    expect(response.statusCode).toBe(400);\n    expect(response.body).toHaveProperty('message', 'Appointment ID and transcript required');\n  });\n  \n  test('Should fetch reports for an appointment', async () => {\n    // First create a report\n    await request(app)\n      .post('/api/reports')\n      .set('Authorization', `Bearer ${token}`)\n      .send({\n        appointmentId,\n        transcript: 'This is a test transcript'\n      });\n    \n    // Then fetch reports for the appointment\n    const response = await request(app)\n      .get(`/api/reports/${appointmentId}`)\n      .set('Authorization', `Bearer ${token}`);\n    \n    expect(response.statusCode).toBe(200);\n    expect(Array.isArray(response.body)).toBe(true);\n    expect(response.body.length).toBe(1);\n    expect(response.body[0].appointmentId).toBe(appointmentId);\n  });\n  \n  test('Should fetch a specific report by ID', async () => {\n    // First create a report\n    const createResponse = await request(app)\n      .post('/api/reports')\n      .set('Authorization', `Bearer ${token}`)\n      .send({\n        appointmentId,\n        transcript: 'This is a test transcript'\n      });\n    \n    const reportId = createResponse.body.report._id;\n    \n    // Then fetch the specific report\n    const response = await request(app)\n      .get(`/api/reports/detail/${reportId}`)\n      .set('Authorization', `Bearer ${token}`);\n    \n    expect(response.statusCode).toBe(200);\n    expect(response.body).toHaveProperty('_id', reportId);\n  });\n\n  test('Should handle report generation failure', async () => {\n    jest.mock('../utils/aiUtils', () => ({\n      generateMedicalReport: jest.fn().mockRejectedValue(new Error('AI service failed')),\n      extractMedicalInfo: jest.fn().mockResolvedValue({\n        symptoms: ['Headache', 'Fever'],\n        diagnosis: 'Common cold',\n        recommendations: ['Rest', 'Fluids'],\n        medications: ['Paracetamol'],\n        followUpNeeded: false\n      }),\n      generateFollowUpQuestions: jest.fn().mockResolvedValue('Follow up questions')\n    }));\n\n    const response = await request(app)\n      .post('/api/reports')\n      .set('Authorization', `Bearer ${token}`)\n      .send({\n        appointmentId,\n        transcript: 'This is a test transcript'\n      });\n\n    expect(response.statusCode).toBe(500);\n    expect(response.body).toHaveProperty('message', 'Server error');\n  });\n});\n"],"mappings":"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","ignoreList":[]}