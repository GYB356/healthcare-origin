9f4aca7d7465a493e7fca3c8136bfbdd
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
let mongod = null;

// Connect to the in-memory database before running tests
beforeAll(async () => {
  try {
    console.log('Starting MongoDB Memory Server...');
    mongod = await MongoMemoryServer.create({
      instance: {
        dbName: 'jest',
        port: 27017
      },
      binary: {
        version: '6.0.4'
      }
    });
    const uri = mongod.getUri();
    console.log('Connecting to MongoDB Memory Server at:', uri);
    await mongoose.connect(uri, {
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 30000,
      connectTimeoutMS: 30000
    });
    console.log('Successfully connected to MongoDB Memory Server');
  } catch (error) {
    console.error('Error setting up MongoDB Memory Server:', error);
    throw error;
  }
}, 30000); // Increase timeout to 30 seconds

// Clear all data between tests
afterEach(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      const collections = await mongoose.connection.db.collections();
      await Promise.all(collections.map(collection => collection.deleteMany({})));
      console.log('Cleared all collections');
    }
  } catch (error) {
    console.error('Error clearing collections:', error);
    throw error;
  }
});

// Close database connection after all tests
afterAll(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.connection.close();
      console.log('Closed MongoDB connection');
    }
    if (mongod) {
      await mongod.stop();
      console.log('Stopped MongoDB Memory Server');
    }
  } catch (error) {
    console.error('Error closing MongoDB connection:', error);
    throw error;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsIm1vbmdvZCIsImJlZm9yZUFsbCIsImNvbnNvbGUiLCJsb2ciLCJjcmVhdGUiLCJpbnN0YW5jZSIsImRiTmFtZSIsInBvcnQiLCJiaW5hcnkiLCJ2ZXJzaW9uIiwidXJpIiwiZ2V0VXJpIiwiY29ubmVjdCIsInNlcnZlclNlbGVjdGlvblRpbWVvdXRNUyIsInNvY2tldFRpbWVvdXRNUyIsImNvbm5lY3RUaW1lb3V0TVMiLCJlcnJvciIsImFmdGVyRWFjaCIsImNvbm5lY3Rpb24iLCJyZWFkeVN0YXRlIiwiY29sbGVjdGlvbnMiLCJkYiIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJjb2xsZWN0aW9uIiwiZGVsZXRlTWFueSIsImFmdGVyQWxsIiwiY2xvc2UiLCJzdG9wIl0sInNvdXJjZXMiOlsibW9uZ29kYi5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcbmNvbnN0IHsgTW9uZ29NZW1vcnlTZXJ2ZXIgfSA9IHJlcXVpcmUoJ21vbmdvZGItbWVtb3J5LXNlcnZlcicpO1xyXG5cclxubGV0IG1vbmdvZCA9IG51bGw7XHJcblxyXG4vLyBDb25uZWN0IHRvIHRoZSBpbi1tZW1vcnkgZGF0YWJhc2UgYmVmb3JlIHJ1bm5pbmcgdGVzdHNcclxuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIE1vbmdvREIgTWVtb3J5IFNlcnZlci4uLicpO1xyXG4gICAgbW9uZ29kID0gYXdhaXQgTW9uZ29NZW1vcnlTZXJ2ZXIuY3JlYXRlKHtcclxuICAgICAgaW5zdGFuY2U6IHtcclxuICAgICAgICBkYk5hbWU6ICdqZXN0JyxcclxuICAgICAgICBwb3J0OiAyNzAxN1xyXG4gICAgICB9LFxyXG4gICAgICBiaW5hcnk6IHtcclxuICAgICAgICB2ZXJzaW9uOiAnNi4wLjQnXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgdXJpID0gbW9uZ29kLmdldFVyaSgpO1xyXG4gICAgY29uc29sZS5sb2coJ0Nvbm5lY3RpbmcgdG8gTW9uZ29EQiBNZW1vcnkgU2VydmVyIGF0OicsIHVyaSk7XHJcbiAgICBcclxuICAgIGF3YWl0IG1vbmdvb3NlLmNvbm5lY3QodXJpLCB7XHJcbiAgICAgIHNlcnZlclNlbGVjdGlvblRpbWVvdXRNUzogMzAwMDAsXHJcbiAgICAgIHNvY2tldFRpbWVvdXRNUzogMzAwMDAsXHJcbiAgICAgIGNvbm5lY3RUaW1lb3V0TVM6IDMwMDAwXHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvIE1vbmdvREIgTWVtb3J5IFNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZXR0aW5nIHVwIE1vbmdvREIgTWVtb3J5IFNlcnZlcjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn0sIDMwMDAwKTsgLy8gSW5jcmVhc2UgdGltZW91dCB0byAzMCBzZWNvbmRzXHJcblxyXG4vLyBDbGVhciBhbGwgZGF0YSBiZXR3ZWVuIHRlc3RzXHJcbmFmdGVyRWFjaChhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmIChtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgIT09IDApIHtcclxuICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCBtb25nb29zZS5jb25uZWN0aW9uLmRiLmNvbGxlY3Rpb25zKCk7XHJcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKGNvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IGNvbGxlY3Rpb24uZGVsZXRlTWFueSh7fSkpKTtcclxuICAgICAgY29uc29sZS5sb2coJ0NsZWFyZWQgYWxsIGNvbGxlY3Rpb25zJyk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFyaW5nIGNvbGxlY3Rpb25zOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyBDbG9zZSBkYXRhYmFzZSBjb25uZWN0aW9uIGFmdGVyIGFsbCB0ZXN0c1xyXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmIChtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgIT09IDApIHtcclxuICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xyXG4gICAgICBjb25zb2xlLmxvZygnQ2xvc2VkIE1vbmdvREIgY29ubmVjdGlvbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1vbmdvZCkge1xyXG4gICAgICBhd2FpdCBtb25nb2Quc3RvcCgpO1xyXG4gICAgICBjb25zb2xlLmxvZygnU3RvcHBlZCBNb25nb0RCIE1lbW9yeSBTZXJ2ZXInKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2xvc2luZyBNb25nb0RCIGNvbm5lY3Rpb246JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59KTsgIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDcEMsTUFBTTtFQUFFQztBQUFrQixDQUFDLEdBQUdELE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUU5RCxJQUFJRSxNQUFNLEdBQUcsSUFBSTs7QUFFakI7QUFDQUMsU0FBUyxDQUFDLFlBQVk7RUFDcEIsSUFBSTtJQUNGQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQztJQUNoREgsTUFBTSxHQUFHLE1BQU1ELGlCQUFpQixDQUFDSyxNQUFNLENBQUM7TUFDdENDLFFBQVEsRUFBRTtRQUNSQyxNQUFNLEVBQUUsTUFBTTtRQUNkQyxJQUFJLEVBQUU7TUFDUixDQUFDO01BQ0RDLE1BQU0sRUFBRTtRQUNOQyxPQUFPLEVBQUU7TUFDWDtJQUNGLENBQUMsQ0FBQztJQUNGLE1BQU1DLEdBQUcsR0FBR1YsTUFBTSxDQUFDVyxNQUFNLENBQUMsQ0FBQztJQUMzQlQsT0FBTyxDQUFDQyxHQUFHLENBQUMseUNBQXlDLEVBQUVPLEdBQUcsQ0FBQztJQUUzRCxNQUFNYixRQUFRLENBQUNlLE9BQU8sQ0FBQ0YsR0FBRyxFQUFFO01BQzFCRyx3QkFBd0IsRUFBRSxLQUFLO01BQy9CQyxlQUFlLEVBQUUsS0FBSztNQUN0QkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQyxDQUFDO0lBQ0ZiLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlEQUFpRCxDQUFDO0VBQ2hFLENBQUMsQ0FBQyxPQUFPYSxLQUFLLEVBQUU7SUFDZGQsT0FBTyxDQUFDYyxLQUFLLENBQUMseUNBQXlDLEVBQUVBLEtBQUssQ0FBQztJQUMvRCxNQUFNQSxLQUFLO0VBQ2I7QUFDRixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFFWDtBQUNBQyxTQUFTLENBQUMsWUFBWTtFQUNwQixJQUFJO0lBQ0YsSUFBSXBCLFFBQVEsQ0FBQ3FCLFVBQVUsQ0FBQ0MsVUFBVSxLQUFLLENBQUMsRUFBRTtNQUN4QyxNQUFNQyxXQUFXLEdBQUcsTUFBTXZCLFFBQVEsQ0FBQ3FCLFVBQVUsQ0FBQ0csRUFBRSxDQUFDRCxXQUFXLENBQUMsQ0FBQztNQUM5RCxNQUFNRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsV0FBVyxDQUFDSSxHQUFHLENBQUNDLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQzNFeEIsT0FBTyxDQUFDQyxHQUFHLENBQUMseUJBQXlCLENBQUM7SUFDeEM7RUFDRixDQUFDLENBQUMsT0FBT2EsS0FBSyxFQUFFO0lBQ2RkLE9BQU8sQ0FBQ2MsS0FBSyxDQUFDLDZCQUE2QixFQUFFQSxLQUFLLENBQUM7SUFDbkQsTUFBTUEsS0FBSztFQUNiO0FBQ0YsQ0FBQyxDQUFDOztBQUVGO0FBQ0FXLFFBQVEsQ0FBQyxZQUFZO0VBQ25CLElBQUk7SUFDRixJQUFJOUIsUUFBUSxDQUFDcUIsVUFBVSxDQUFDQyxVQUFVLEtBQUssQ0FBQyxFQUFFO01BQ3hDLE1BQU10QixRQUFRLENBQUNxQixVQUFVLENBQUNVLEtBQUssQ0FBQyxDQUFDO01BQ2pDMUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsMkJBQTJCLENBQUM7SUFDMUM7SUFDQSxJQUFJSCxNQUFNLEVBQUU7TUFDVixNQUFNQSxNQUFNLENBQUM2QixJQUFJLENBQUMsQ0FBQztNQUNuQjNCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLCtCQUErQixDQUFDO0lBQzlDO0VBQ0YsQ0FBQyxDQUFDLE9BQU9hLEtBQUssRUFBRTtJQUNkZCxPQUFPLENBQUNjLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRUEsS0FBSyxDQUFDO0lBQ3pELE1BQU1BLEtBQUs7RUFDYjtBQUNGLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==