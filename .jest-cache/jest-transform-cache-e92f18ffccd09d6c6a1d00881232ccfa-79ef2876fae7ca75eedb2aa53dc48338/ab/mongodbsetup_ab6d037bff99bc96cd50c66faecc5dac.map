{"version":3,"names":["cov_2bml4c20m5","actualCoverage","MongoMemoryServer","s","require","mongoose","mongod","connectPromise","connect","retries","b","f","connection","readyState","Promise","resolve","attempt","uri","process","env","MONGODB_URI","stop","console","log","stopError","warn","message","create","instance","dbName","port","Math","floor","random","binary","version","downloadDir","getUri","error","close","mongooseOpts","maxPoolSize","serverSelectionTimeoutMS","socketTimeoutMS","connectTimeoutMS","on","e","Error","waitTime","min","pow","setTimeout","finally","closeDatabase","pendingOps","db","topology","outstandingOperationCount","race","dropDatabase","dropError","doCleanup","force","removeAllListeners","disconnect","finalError","clearDatabase","collections","clearPromises","key","push","deleteMany","all","retryError","seedDatabase","data","Object","keys","length","modelName","documents","entries","models","model","Array","isArray","insertMany","checkForLeaks","pendingQueries","state","operationCount","sessions","session","values","endSession","global","gc","then","catch","afterAll","mongoTestUtils","module","exports"],"sources":["mongodb.setup.js"],"sourcesContent":["const { MongoMemoryServer } = require(\"mongodb-memory-server\");\r\nconst mongoose = require(\"mongoose\");\r\n\r\nlet mongod = null;\r\nlet connectPromise = null;\r\n\r\n/**\r\n * Connect to the in-memory database with retry logic\r\n * @param {number} retries - Number of retry attempts\r\n */\r\nconst connect = async (retries = 3) => {\r\n  // If we already have a connection promise, return it\r\n  if (connectPromise) {\r\n    return connectPromise;\r\n  }\r\n\r\n  // If we're already connected, just return\r\n  if (mongoose.connection.readyState === 1) {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  // Create a new connection promise\r\n  connectPromise = (async () => {\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        // Fallback URI in case mongo memory server fails\r\n        let uri = process.env.MONGODB_URI || \"mongodb://localhost:27017/test-db\";\r\n\r\n        // Stop any existing MongoDB instance\r\n        if (mongod) {\r\n          try {\r\n            await mongod.stop();\r\n            console.log(\"Stopped existing MongoDB Memory Server\");\r\n          } catch (stopError) {\r\n            console.warn(\"Error stopping existing MongoDB Memory Server:\", stopError.message);\r\n          }\r\n          mongod = null;\r\n        }\r\n\r\n        try {\r\n          // Try to use mongo memory server\r\n          mongod = await MongoMemoryServer.create({\r\n            instance: {\r\n              dbName: \"jest-test-db\",\r\n              port: 27017,\r\n              // Using random port to avoid conflicts\r\n              port: 27017 + Math.floor(Math.random() * 1000),\r\n            },\r\n            binary: {\r\n              version: \"6.0.4\",\r\n              downloadDir: \"./.cache/mongodb-memory-server/mongodb-binaries\",\r\n            },\r\n          });\r\n\r\n          uri = mongod.getUri();\r\n          console.log(`Using MongoDB Memory Server (attempt ${attempt}):`, uri);\r\n        } catch (error) {\r\n          console.warn(\r\n            `Failed to create MongoDB Memory Server (attempt ${attempt}), using fallback URI:`,\r\n            uri,\r\n          );\r\n          console.error(error);\r\n        }\r\n\r\n        // Close any existing connections\r\n        if (mongoose.connection.readyState !== 0) {\r\n          try {\r\n            await mongoose.connection.close();\r\n            console.log(\"Closed existing MongoDB connection\");\r\n          } catch (error) {\r\n            console.warn(\"Error closing existing MongoDB connection:\", error.message);\r\n          }\r\n        }\r\n\r\n        // Set connection options\r\n        const mongooseOpts = {\r\n          maxPoolSize: 10,\r\n          serverSelectionTimeoutMS: 30000, // 30 seconds\r\n          socketTimeoutMS: 45000, // 45 seconds\r\n          connectTimeoutMS: 30000, // 30 seconds\r\n        };\r\n\r\n        // Connect to database\r\n        await mongoose.connect(uri, mongooseOpts);\r\n        console.log(\"Connected to MongoDB successfully\");\r\n\r\n        // Setup connection event handlers\r\n        mongoose.connection.on(\"error\", (e) => {\r\n          console.error(\"MongoDB connection error:\", e);\r\n        });\r\n\r\n        // Connection successful, return\r\n        return;\r\n      } catch (error) {\r\n        console.error(`MongoDB setup error on attempt ${attempt}:`, error);\r\n\r\n        // If this was the last retry, throw the error\r\n        if (attempt === retries) {\r\n          throw new Error(\r\n            `Failed to connect to MongoDB after ${retries} attempts: ${error.message}`,\r\n          );\r\n        }\r\n\r\n        // Wait before retrying (exponential backoff)\r\n        const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000);\r\n        console.log(`Waiting ${waitTime}ms before retry...`);\r\n        await new Promise((resolve) => setTimeout(resolve, waitTime));\r\n      }\r\n    }\r\n  })().finally(() => {\r\n    // Reset the promise once resolved\r\n    connectPromise = null;\r\n  });\r\n\r\n  return connectPromise;\r\n};\r\n\r\n/**\r\n * Drop database, close the connection and stop mongod.\r\n */\r\nconst closeDatabase = async () => {\r\n  try {\r\n    // Check for pending operations before closing\r\n    try {\r\n      // Using internal Mongoose properties carefully\r\n      // @ts-ignore\r\n      const pendingOps = mongoose.connection.db?.s?.topology?.outstandingOperationCount || 0;\r\n\r\n      if (pendingOps > 0) {\r\n        console.log(`Waiting for ${pendingOps} pending operations to complete...`);\r\n        await Promise.race([\r\n          // Wait for operations to complete\r\n          new Promise((resolve) => setTimeout(resolve, pendingOps * 100)),\r\n          // Max timeout of 5 seconds\r\n          new Promise((resolve) => setTimeout(resolve, 5000)),\r\n        ]);\r\n      }\r\n    } catch (e) {\r\n      // Ignore errors when checking pending operations\r\n    }\r\n\r\n    if (mongoose.connection.readyState !== 0) {\r\n      try {\r\n        await mongoose.connection.dropDatabase();\r\n      } catch (dropError) {\r\n        console.warn(\"Error dropping database:\", dropError.message);\r\n      }\r\n\r\n      await mongoose.connection.close(true); // Force close\r\n      console.log(\"Closed MongoDB connection\");\r\n    }\r\n\r\n    if (mongod) {\r\n      await mongod.stop({ doCleanup: true, force: true });\r\n      console.log(\"Stopped MongoDB Memory Server\");\r\n      mongod = null;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error closing MongoDB:\", error);\r\n\r\n    // Force cleanup in case of error\r\n    try {\r\n      if (mongoose.connection.readyState !== 0) {\r\n        mongoose.connection.removeAllListeners();\r\n        await mongoose.disconnect();\r\n      }\r\n\r\n      mongod = null;\r\n    } catch (finalError) {\r\n      console.error(\"Final error during MongoDB cleanup:\", finalError);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Clear all collections in the database.\r\n */\r\nconst clearDatabase = async () => {\r\n  try {\r\n    if (mongoose.connection.readyState !== 1) {\r\n      console.warn(\"MongoDB not connected, attempting to connect before clearing...\");\r\n      await connect();\r\n    }\r\n\r\n    const collections = mongoose.connection.collections;\r\n    const clearPromises = [];\r\n\r\n    for (const key in collections) {\r\n      clearPromises.push(collections[key].deleteMany({}));\r\n    }\r\n\r\n    await Promise.all(clearPromises);\r\n    console.log(\"Cleared all MongoDB collections\");\r\n  } catch (error) {\r\n    console.error(\"Error clearing MongoDB:\", error);\r\n\r\n    // Try to reconnect and clear if there was an error\r\n    try {\r\n      await closeDatabase();\r\n      await connect();\r\n\r\n      const collections = mongoose.connection.collections;\r\n      for (const key in collections) {\r\n        await collections[key].deleteMany({});\r\n      }\r\n      console.log(\"Successfully cleared collections after reconnection\");\r\n    } catch (retryError) {\r\n      console.error(\"Error clearing MongoDB after reconnection:\", retryError);\r\n      throw retryError;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Seed the database with test data\r\n * @param {Object} data - The data to seed\r\n */\r\nconst seedDatabase = async (data = {}) => {\r\n  try {\r\n    if (mongoose.connection.readyState !== 1) {\r\n      console.warn(\"MongoDB not connected, attempting to connect before seeding...\");\r\n      await connect();\r\n    }\r\n\r\n    // Only attempt to seed if we have data\r\n    if (Object.keys(data).length === 0) {\r\n      console.log(\"No seed data provided, skipping database seeding\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Seeding database with test data...\");\r\n\r\n    // Process each collection in the data object\r\n    for (const [modelName, documents] of Object.entries(data)) {\r\n      // Skip if model doesn't exist\r\n      if (!mongoose.models[modelName]) {\r\n        console.warn(`Model ${modelName} not found, skipping`);\r\n        continue;\r\n      }\r\n\r\n      const model = mongoose.model(modelName);\r\n\r\n      // Insert many documents or a single one\r\n      if (Array.isArray(documents)) {\r\n        await model.insertMany(documents);\r\n        console.log(`Inserted ${documents.length} documents into ${modelName}`);\r\n      } else {\r\n        await model.create(documents);\r\n        console.log(`Inserted 1 document into ${modelName}`);\r\n      }\r\n    }\r\n\r\n    console.log(\"Database seeding completed\");\r\n  } catch (error) {\r\n    console.error(\"Error seeding database:\", error);\r\n\r\n    // Try to reconnect and seed if there was an error\r\n    try {\r\n      await closeDatabase();\r\n      await connect();\r\n      return seedDatabase(data); // Retry once\r\n    } catch (retryError) {\r\n      console.error(\"Error seeding database after reconnection:\", retryError);\r\n      throw retryError;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Check for and cleanup any leaked connections\r\n */\r\nconst checkForLeaks = async () => {\r\n  try {\r\n    if (mongoose.connection.readyState !== 0) {\r\n      // Check for pending operations\r\n      try {\r\n        // @ts-ignore - Access internal properties\r\n        const pendingQueries = mongoose.connection.db?.s?.topology?.s?.state?.operationCount || 0;\r\n\r\n        if (pendingQueries > 0) {\r\n          console.warn(`⚠️ Detected ${pendingQueries} pending database operations before cleanup`);\r\n\r\n          // Force cleanup of sessions if possible\r\n          try {\r\n            // @ts-ignore - Access internal properties\r\n            if (mongoose.connection.db?.s?.topology?.s?.sessions) {\r\n              // @ts-ignore - Access internal properties\r\n              for (const session of Object.values(mongoose.connection.db.s.topology.s.sessions)) {\r\n                try {\r\n                  // @ts-ignore - Access internal session to force end it\r\n                  if (session && typeof session.endSession === \"function\") {\r\n                    // @ts-ignore\r\n                    session.endSession();\r\n                  }\r\n                } catch (e) {\r\n                  // Ignore session errors\r\n                }\r\n              }\r\n            }\r\n          } catch (e) {\r\n            // Ignore session cleanup errors\r\n          }\r\n        }\r\n      } catch (e) {\r\n        // Ignore errors checking for leaks\r\n      }\r\n    }\r\n\r\n    // Ensure clean disconnect\r\n    await closeDatabase();\r\n\r\n    // Extra cleanup for memory management\r\n    if (global.gc) {\r\n      global.gc(); // Force garbage collection if available\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error checking for leaks:\", error);\r\n\r\n    // Force final cleanup\r\n    try {\r\n      if (mongoose.connection.readyState !== 0) {\r\n        mongoose.connection.removeAllListeners();\r\n        await mongoose.disconnect();\r\n      }\r\n      mongod = null;\r\n    } catch (e) {\r\n      // Ignore final cleanup errors\r\n    }\r\n  }\r\n};\r\n\r\n// Connect to database before tests start\r\nconnect()\r\n  .then(() => {\r\n    console.log(\"MongoDB setup completed successfully\");\r\n  })\r\n  .catch((error) => {\r\n    console.error(\"MongoDB setup failed:\", error);\r\n  });\r\n\r\n// Close database connection after tests finish\r\nafterAll(async () => {\r\n  await checkForLeaks();\r\n});\r\n\r\n// Make helpers available globally\r\nglobal.mongoTestUtils = {\r\n  connect,\r\n  closeDatabase,\r\n  clearDatabase,\r\n  seedDatabase,\r\n  checkForLeaks,\r\n};\r\n\r\nmodule.exports = {\r\n  connect,\r\n  closeDatabase,\r\n  clearDatabase,\r\n  seedDatabase,\r\n  checkForLeaks,\r\n  mongod,\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}