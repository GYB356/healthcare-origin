{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_jsxRuntime","_jsxFileName","React","__jsx","createElement","axios","UserData","user","setUser","useState","loading","setLoading","error","setError","useEffect","isMounted","fetchUser","response","get","data","err","jsx","children","jsxs","name","email","renderWithAsync","Component","queries","render","screen","queryByTestId","waitForElementToBeRemoved","describe","beforeEach","jest","clearAllMocks","it","resolvePromise","mockImplementationOnce","Promise","resolve","expect","getByTestId","toBeInTheDocument","mockUser","mockResolvedValueOnce","toHaveBeenCalledWith","getByText","mockRejectedValueOnce","Error"],"sources":["user-data.test.js"],"sourcesContent":["import React from 'react';\r\nimport { render, screen, waitForElementToBeRemoved } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport './suppress-act-warnings';\r\n\r\n// Import our axios mock\r\nconst axios = require('./__mocks__/axios');\r\n\r\n// Simple component that fetches user data\r\nfunction UserData() {\r\n  const [user, setUser] = React.useState(null);\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [error, setError] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    let isMounted = true;\r\n    \r\n    const fetchUser = async () => {\r\n      try {\r\n        const response = await axios.get('/api/user/1');\r\n        if (isMounted) {\r\n          setUser(response.data);\r\n          setLoading(false);\r\n        }\r\n      } catch (err) {\r\n        if (isMounted) {\r\n          setError('Failed to fetch user');\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n    \r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  if (loading) return <div data-testid=\"loading\">Loading...</div>;\r\n  if (error) return <div data-testid=\"error\">{error}</div>;\r\n  \r\n  return (\r\n    <div>\r\n      <h1>User Profile</h1>\r\n      {user && (\r\n        <div data-testid=\"user-profile\">\r\n          <p>Name: {user.name}</p>\r\n          <p>Email: {user.email}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function for rendering components with async operations\r\nasync function renderWithAsync(Component) {\r\n  const queries = render(<Component />);\r\n  \r\n  // If the component shows loading at first, wait for it to disappear\r\n  if (screen.queryByTestId('loading')) {\r\n    await waitForElementToBeRemoved(() => screen.queryByTestId('loading'));\r\n  }\r\n  \r\n  return queries;\r\n}\r\n\r\n// Tests\r\ndescribe('UserData Component', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('displays loading state initially', async () => {\r\n    // Don't resolve the axios promise yet\r\n    let resolvePromise;\r\n    axios.get.mockImplementationOnce(() => new Promise(resolve => {\r\n      resolvePromise = resolve;\r\n    }));\r\n\r\n    render(<UserData />);\r\n    expect(screen.getByTestId('loading')).toBeInTheDocument();\r\n    \r\n    // Now resolve the promise to clean up\r\n    resolvePromise({ data: { name: 'John Doe', email: 'john@example.com' } });\r\n  });\r\n\r\n  it('displays user data after successful API call', async () => {\r\n    // Mock the API response\r\n    const mockUser = { name: 'John Doe', email: 'john@example.com' };\r\n    axios.get.mockResolvedValueOnce({ data: mockUser });\r\n\r\n    // Render and wait for loading to finish\r\n    await renderWithAsync(UserData);\r\n    \r\n    // Check that the correct API endpoint was called\r\n    expect(axios.get).toHaveBeenCalledWith('/api/user/1');\r\n    \r\n    // Check that user data is displayed correctly\r\n    expect(screen.getByTestId('user-profile')).toBeInTheDocument();\r\n    expect(screen.getByText('Name: John Doe')).toBeInTheDocument();\r\n    expect(screen.getByText('Email: john@example.com')).toBeInTheDocument();\r\n  });\r\n\r\n  it('displays error message when API call fails', async () => {\r\n    // Mock a failed API call\r\n    axios.get.mockRejectedValueOnce(new Error('API Error'));\r\n\r\n    // Render and wait for loading to finish\r\n    await renderWithAsync(UserData);\r\n    \r\n    // Check that the correct API endpoint was called\r\n    expect(axios.get).toHaveBeenCalledWith('/api/user/1');\r\n    expect(screen.getByTestId('error')).toBeInTheDocument();\r\n    expect(screen.getByText('Failed to fetch user')).toBeInTheDocument();\r\n  });\r\n}); "],"mappings":"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","ignoreList":[]}