7a99637cb6730ae9cb6cb7823d0b68b4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom");
require("./suppress-act-warnings");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\user-data.test.js"; // Import our axios mock
import React from "react";
var __jsx = React.createElement;
const axios = require('./__mocks__/axios');

// Simple component that fetches user data
function UserData() {
  const [user, setUser] = _react.default.useState(null);
  const [loading, setLoading] = _react.default.useState(true);
  const [error, setError] = _react.default.useState(null);
  _react.default.useEffect(() => {
    let isMounted = true;
    const fetchUser = async () => {
      try {
        const response = await axios.get('/api/user/1');
        if (isMounted) {
          setUser(response.data);
          setLoading(false);
        }
      } catch (err) {
        if (isMounted) {
          setError('Failed to fetch user');
          setLoading(false);
        }
      }
    };
    fetchUser();
    return () => {
      isMounted = false;
    };
  }, []);
  if (loading) return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    "data-testid": "loading",
    children: "Loading..."
  });
  if (error) return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    "data-testid": "error",
    children: error
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("h1", {
      children: "User Profile"
    }), user && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      "data-testid": "user-profile",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
        children: ["Name: ", user.name]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
        children: ["Email: ", user.email]
      })]
    })]
  });
}

// Helper function for rendering components with async operations
async function renderWithAsync(Component) {
  const queries = (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));

  // If the component shows loading at first, wait for it to disappear
  if (_react2.screen.queryByTestId('loading')) {
    await (0, _react2.waitForElementToBeRemoved)(() => _react2.screen.queryByTestId('loading'));
  }
  return queries;
}

// Tests
describe('UserData Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('displays loading state initially', async () => {
    // Don't resolve the axios promise yet
    let resolvePromise;
    axios.get.mockImplementationOnce(() => new Promise(resolve => {
      resolvePromise = resolve;
    }));
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(UserData, {}));
    expect(_react2.screen.getByTestId('loading')).toBeInTheDocument();

    // Now resolve the promise to clean up
    resolvePromise({
      data: {
        name: 'John Doe',
        email: 'john@example.com'
      }
    });
  });
  it('displays user data after successful API call', async () => {
    // Mock the API response
    const mockUser = {
      name: 'John Doe',
      email: 'john@example.com'
    };
    axios.get.mockResolvedValueOnce({
      data: mockUser
    });

    // Render and wait for loading to finish
    await renderWithAsync(UserData);

    // Check that the correct API endpoint was called
    expect(axios.get).toHaveBeenCalledWith('/api/user/1');

    // Check that user data is displayed correctly
    expect(_react2.screen.getByTestId('user-profile')).toBeInTheDocument();
    expect(_react2.screen.getByText('Name: John Doe')).toBeInTheDocument();
    expect(_react2.screen.getByText('Email: john@example.com')).toBeInTheDocument();
  });
  it('displays error message when API call fails', async () => {
    // Mock a failed API call
    axios.get.mockRejectedValueOnce(new Error('API Error'));

    // Render and wait for loading to finish
    await renderWithAsync(UserData);

    // Check that the correct API endpoint was called
    expect(axios.get).toHaveBeenCalledWith('/api/user/1');
    expect(_react2.screen.getByTestId('error')).toBeInTheDocument();
    expect(_react2.screen.getByText('Failed to fetch user')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,