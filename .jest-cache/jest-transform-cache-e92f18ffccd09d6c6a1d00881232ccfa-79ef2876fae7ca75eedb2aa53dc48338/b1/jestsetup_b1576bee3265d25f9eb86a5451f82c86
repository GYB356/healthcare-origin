efc67c99496b68b49f41230634b16af7
// Mock next/image with better error handling
_getJestObj().mock('next/image', () => ({
  __esModule: true,
  default: props => {
    return {
      type: 'img',
      props: _objectSpread(_objectSpread({}, props), {}, {
        alt: props.alt || ''
      })
    };
  }
}));

// Enhanced next/auth mock with better type safety
_getJestObj().mock('next-auth', () => ({
  __esModule: true,
  getServerSession: jest.fn(() => ({
    user: {
      id: '1',
      name: 'Test User',
      email: 'test@example.com',
      role: 'DOCTOR'
    },
    expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
  })),
  signIn: jest.fn(),
  signOut: jest.fn()
}));

// Enhanced next/navigation mock
_getJestObj().mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
    back: jest.fn(),
    pathname: '/',
    query: {},
    events: {
      on: jest.fn(),
      off: jest.fn(),
      emit: jest.fn()
    }
  }),
  usePathname: () => '/',
  useSearchParams: () => new URLSearchParams()
}));

// Enhanced socket.io-client mock with better event handling
_getJestObj().mock('socket.io-client', () => {
  const mockSocket = {
    on: jest.fn(),
    emit: jest.fn(),
    connect: jest.fn(),
    disconnect: jest.fn(),
    close: jest.fn(),
    join: jest.fn(),
    leave: jest.fn(),
    connected: false,
    id: 'test-socket-id'
  };
  return {
    io: jest.fn(() => mockSocket),
    connect: jest.fn(() => mockSocket)
  };
});

// Enhanced http server mock
_getJestObj().mock('http', () => ({
  createServer: jest.fn(() => ({
    listen: jest.fn((port, callback) => {
      if (callback) callback();
      return {
        port: port || 3001
      };
    }),
    close: jest.fn(callback => {
      if (callback) callback();
    }),
    address: jest.fn(() => ({
      port: 3001
    }))
  }))
}));

// Enhanced PrismaClient mock with better error handling
_getJestObj().mock('@prisma/client', () => {
  const mockPrisma = {
    user: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    patient: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    appointment: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    availability: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    $connect: jest.fn(),
    $disconnect: jest.fn(),
    $transaction: jest.fn()
  };
  return {
    PrismaClient: jest.fn(() => mockPrisma)
  };
});

// Increase timeout for all tests
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const {
  TextEncoder,
  TextDecoder
} = require('util');
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;
require('dotenv').config({
  path: '.env.test'
});
require('@testing-library/jest-dom');
const fetchMock = require('jest-fetch-mock');

// Mock fetch with better error handling
fetchMock.enableMocks();
fetchMock.dontMockIf(/^https:\/\/fonts\.googleapis\.com/);
fetchMock.dontMockIf(/^https:\/\/fonts\.gstatic\.com/);
jest.setTimeout(30000);

// Reset mocks after each test
afterEach(() => {
  jest.clearAllMocks();
  fetchMock.resetMocks();
});

// Mock console.error to fail tests
const originalError = console.error;
console.error = (...args) => {
  if (/Warning: ReactDOM.render is no longer supported in React 18/.test(args[0]) || /Warning: useLayoutEffect does nothing on the server/.test(args[0])) {
    return;
  }
  originalError.call(console, ...args);
};

// Mock fetch
global.fetch = jest.fn(() => Promise.resolve({
  json: () => Promise.resolve({}),
  ok: true,
  status: 200
}));

// Mock WebSocket
global.WebSocket = class {
  constructor(url) {
    this.url = url;
    this.readyState = 0;
    this.onmessage = null;
    this.onopen = null;
    this.onclose = null;
    this.onerror = null;
  }
  send(data) {}
  close() {}
};

// Mock IntersectionObserver
global.IntersectionObserver = class {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock ResizeObserver
global.ResizeObserver = class {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock matchMedia
global.matchMedia = global.matchMedia || function () {
  return {
    matches: false,
    addListener: function () {},
    removeListener: function () {}
  };
};

// Mock environment variables
process.env.JWT_SECRET = 'test-secret';
process.env.MONGODB_URI = 'mongodb://localhost:27017/test-db';
process.env.NEXTAUTH_SECRET = 'test-nextauth-secret';
process.env.NEXTAUTH_URL = 'http://localhost:3000';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInByb3BzIiwidHlwZSIsIl9vYmplY3RTcHJlYWQiLCJhbHQiLCJnZXRTZXJ2ZXJTZXNzaW9uIiwiamVzdCIsImZuIiwidXNlciIsImlkIiwibmFtZSIsImVtYWlsIiwicm9sZSIsImV4cGlyZXMiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJzaWduSW4iLCJzaWduT3V0IiwidXNlUm91dGVyIiwicHVzaCIsImJhY2siLCJwYXRobmFtZSIsInF1ZXJ5IiwiZXZlbnRzIiwib24iLCJvZmYiLCJlbWl0IiwidXNlUGF0aG5hbWUiLCJ1c2VTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJtb2NrU29ja2V0IiwiY29ubmVjdCIsImRpc2Nvbm5lY3QiLCJjbG9zZSIsImpvaW4iLCJsZWF2ZSIsImNvbm5lY3RlZCIsImlvIiwiY3JlYXRlU2VydmVyIiwibGlzdGVuIiwicG9ydCIsImNhbGxiYWNrIiwiYWRkcmVzcyIsIm1vY2tQcmlzbWEiLCJmaW5kVW5pcXVlIiwiZmluZEZpcnN0IiwiZmluZE1hbnkiLCJjcmVhdGUiLCJ1cGRhdGUiLCJkZWxldGUiLCJ1cHNlcnQiLCJwYXRpZW50IiwiYXBwb2ludG1lbnQiLCJhdmFpbGFiaWxpdHkiLCIkY29ubmVjdCIsIiRkaXNjb25uZWN0IiwiJHRyYW5zYWN0aW9uIiwiUHJpc21hQ2xpZW50IiwiX2RlZmluZVByb3BlcnR5IiwicmVxdWlyZSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJhcHBseSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiVGV4dEVuY29kZXIiLCJUZXh0RGVjb2RlciIsImdsb2JhbCIsImNvbmZpZyIsInBhdGgiLCJmZXRjaE1vY2siLCJlbmFibGVNb2NrcyIsImRvbnRNb2NrSWYiLCJzZXRUaW1lb3V0IiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInJlc2V0TW9ja3MiLCJvcmlnaW5hbEVycm9yIiwiY29uc29sZSIsImVycm9yIiwiYXJncyIsInRlc3QiLCJjYWxsIiwiZmV0Y2giLCJQcm9taXNlIiwicmVzb2x2ZSIsImpzb24iLCJvayIsInN0YXR1cyIsIldlYlNvY2tldCIsImNvbnN0cnVjdG9yIiwidXJsIiwicmVhZHlTdGF0ZSIsIm9ubWVzc2FnZSIsIm9ub3BlbiIsIm9uY2xvc2UiLCJvbmVycm9yIiwic2VuZCIsImRhdGEiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJSZXNpemVPYnNlcnZlciIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwiTU9OR09EQl9VUkkiLCJORVhUQVVUSF9TRUNSRVQiLCJORVhUQVVUSF9VUkwiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgVGV4dEVuY29kZXIsIFRleHREZWNvZGVyIH0gPSByZXF1aXJlKCd1dGlsJyk7XHJcbmdsb2JhbC5UZXh0RW5jb2RlciA9IFRleHRFbmNvZGVyO1xyXG5nbG9iYWwuVGV4dERlY29kZXIgPSBUZXh0RGVjb2RlcjtcclxuXHJcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZyh7IHBhdGg6ICcuZW52LnRlc3QnIH0pO1xyXG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJyk7XHJcbmNvbnN0IGZldGNoTW9jayA9IHJlcXVpcmUoJ2plc3QtZmV0Y2gtbW9jaycpO1xyXG5cclxuLy8gTW9jayBmZXRjaCB3aXRoIGJldHRlciBlcnJvciBoYW5kbGluZ1xyXG5mZXRjaE1vY2suZW5hYmxlTW9ja3MoKTtcclxuZmV0Y2hNb2NrLmRvbnRNb2NrSWYoL15odHRwczpcXC9cXC9mb250c1xcLmdvb2dsZWFwaXNcXC5jb20vKTtcclxuZmV0Y2hNb2NrLmRvbnRNb2NrSWYoL15odHRwczpcXC9cXC9mb250c1xcLmdzdGF0aWNcXC5jb20vKTtcclxuXHJcbi8vIE1vY2sgbmV4dC9pbWFnZSB3aXRoIGJldHRlciBlcnJvciBoYW5kbGluZ1xyXG5qZXN0Lm1vY2soJ25leHQvaW1hZ2UnLCAoKSA9PiAoe1xyXG4gIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgZGVmYXVsdDogKHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiAnaW1nJyxcclxuICAgICAgcHJvcHM6IHsgLi4ucHJvcHMsIGFsdDogcHJvcHMuYWx0IHx8ICcnIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSk7XHJcblxyXG4vLyBFbmhhbmNlZCBuZXh0L2F1dGggbW9jayB3aXRoIGJldHRlciB0eXBlIHNhZmV0eVxyXG5qZXN0Lm1vY2soJ25leHQtYXV0aCcsICgpID0+ICh7XHJcbiAgX19lc01vZHVsZTogdHJ1ZSxcclxuICBnZXRTZXJ2ZXJTZXNzaW9uOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICB1c2VyOiB7XHJcbiAgICAgIGlkOiAnMScsXHJcbiAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxyXG4gICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG4gICAgICByb2xlOiAnRE9DVE9SJ1xyXG4gICAgfSxcclxuICAgIGV4cGlyZXM6IG5ldyBEYXRlKERhdGUubm93KCkgKyAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpXHJcbiAgfSkpLFxyXG4gIHNpZ25JbjogamVzdC5mbigpLFxyXG4gIHNpZ25PdXQ6IGplc3QuZm4oKVxyXG59KSk7XHJcblxyXG4vLyBFbmhhbmNlZCBuZXh0L25hdmlnYXRpb24gbW9ja1xyXG5qZXN0Lm1vY2soJ25leHQvbmF2aWdhdGlvbicsICgpID0+ICh7XHJcbiAgdXNlUm91dGVyOiAoKSA9PiAoe1xyXG4gICAgcHVzaDogamVzdC5mbigpLFxyXG4gICAgYmFjazogamVzdC5mbigpLFxyXG4gICAgcGF0aG5hbWU6ICcvJyxcclxuICAgIHF1ZXJ5OiB7fSxcclxuICAgIGV2ZW50czoge1xyXG4gICAgICBvbjogamVzdC5mbigpLFxyXG4gICAgICBvZmY6IGplc3QuZm4oKSxcclxuICAgICAgZW1pdDogamVzdC5mbigpXHJcbiAgICB9XHJcbiAgfSksXHJcbiAgdXNlUGF0aG5hbWU6ICgpID0+ICcvJyxcclxuICB1c2VTZWFyY2hQYXJhbXM6ICgpID0+IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxyXG59KSk7XHJcblxyXG4vLyBFbmhhbmNlZCBzb2NrZXQuaW8tY2xpZW50IG1vY2sgd2l0aCBiZXR0ZXIgZXZlbnQgaGFuZGxpbmdcclxuamVzdC5tb2NrKCdzb2NrZXQuaW8tY2xpZW50JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tTb2NrZXQgPSB7XHJcbiAgICBvbjogamVzdC5mbigpLFxyXG4gICAgZW1pdDogamVzdC5mbigpLFxyXG4gICAgY29ubmVjdDogamVzdC5mbigpLFxyXG4gICAgZGlzY29ubmVjdDogamVzdC5mbigpLFxyXG4gICAgY2xvc2U6IGplc3QuZm4oKSxcclxuICAgIGpvaW46IGplc3QuZm4oKSxcclxuICAgIGxlYXZlOiBqZXN0LmZuKCksXHJcbiAgICBjb25uZWN0ZWQ6IGZhbHNlLFxyXG4gICAgaWQ6ICd0ZXN0LXNvY2tldC1pZCdcclxuICB9O1xyXG4gIHJldHVybiB7XHJcbiAgICBpbzogamVzdC5mbigoKSA9PiBtb2NrU29ja2V0KSxcclxuICAgIGNvbm5lY3Q6IGplc3QuZm4oKCkgPT4gbW9ja1NvY2tldClcclxuICB9O1xyXG59KTtcclxuXHJcbi8vIEVuaGFuY2VkIGh0dHAgc2VydmVyIG1vY2tcclxuamVzdC5tb2NrKCdodHRwJywgKCkgPT4gKHtcclxuICBjcmVhdGVTZXJ2ZXI6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIGxpc3RlbjogamVzdC5mbigocG9ydCwgY2FsbGJhY2spID0+IHtcclxuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xyXG4gICAgICByZXR1cm4geyBwb3J0OiBwb3J0IHx8IDMwMDEgfTtcclxuICAgIH0pLFxyXG4gICAgY2xvc2U6IGplc3QuZm4oKGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcclxuICAgIH0pLFxyXG4gICAgYWRkcmVzczogamVzdC5mbigoKSA9PiAoeyBwb3J0OiAzMDAxIH0pKVxyXG4gIH0pKVxyXG59KSk7XHJcblxyXG4vLyBFbmhhbmNlZCBQcmlzbWFDbGllbnQgbW9jayB3aXRoIGJldHRlciBlcnJvciBoYW5kbGluZ1xyXG5qZXN0Lm1vY2soJ0BwcmlzbWEvY2xpZW50JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tQcmlzbWEgPSB7XHJcbiAgICB1c2VyOiB7XHJcbiAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcclxuICAgICAgZmluZEZpcnN0OiBqZXN0LmZuKCksXHJcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxyXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIHVwc2VydDogamVzdC5mbigpXHJcbiAgICB9LFxyXG4gICAgcGF0aWVudDoge1xyXG4gICAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXHJcbiAgICAgIGZpbmRGaXJzdDogamVzdC5mbigpLFxyXG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxyXG4gICAgICBjcmVhdGU6IGplc3QuZm4oKSxcclxuICAgICAgdXBkYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpLFxyXG4gICAgICB1cHNlcnQ6IGplc3QuZm4oKVxyXG4gICAgfSxcclxuICAgIGFwcG9pbnRtZW50OiB7XHJcbiAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcclxuICAgICAgZmluZEZpcnN0OiBqZXN0LmZuKCksXHJcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxyXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIHVwc2VydDogamVzdC5mbigpXHJcbiAgICB9LFxyXG4gICAgYXZhaWxhYmlsaXR5OiB7XHJcbiAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcclxuICAgICAgZmluZEZpcnN0OiBqZXN0LmZuKCksXHJcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxyXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIHVwc2VydDogamVzdC5mbigpXHJcbiAgICB9LFxyXG4gICAgJGNvbm5lY3Q6IGplc3QuZm4oKSxcclxuICAgICRkaXNjb25uZWN0OiBqZXN0LmZuKCksXHJcbiAgICAkdHJhbnNhY3Rpb246IGplc3QuZm4oKVxyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBQcmlzbWFDbGllbnQ6IGplc3QuZm4oKCkgPT4gbW9ja1ByaXNtYSlcclxuICB9O1xyXG59KTtcclxuXHJcbi8vIEluY3JlYXNlIHRpbWVvdXQgZm9yIGFsbCB0ZXN0c1xyXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApO1xyXG5cclxuLy8gUmVzZXQgbW9ja3MgYWZ0ZXIgZWFjaCB0ZXN0XHJcbmFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgZmV0Y2hNb2NrLnJlc2V0TW9ja3MoKTtcclxufSk7XHJcblxyXG4vLyBNb2NrIGNvbnNvbGUuZXJyb3IgdG8gZmFpbCB0ZXN0c1xyXG5jb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcclxuY29uc29sZS5lcnJvciA9ICguLi5hcmdzKSA9PiB7XHJcbiAgaWYgKFxyXG4gICAgL1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGluIFJlYWN0IDE4Ly50ZXN0KGFyZ3NbMF0pIHx8XHJcbiAgICAvV2FybmluZzogdXNlTGF5b3V0RWZmZWN0IGRvZXMgbm90aGluZyBvbiB0aGUgc2VydmVyLy50ZXN0KGFyZ3NbMF0pXHJcbiAgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIG9yaWdpbmFsRXJyb3IuY2FsbChjb25zb2xlLCAuLi5hcmdzKTtcclxufTtcclxuXHJcbi8vIE1vY2sgZmV0Y2hcclxuZ2xvYmFsLmZldGNoID0gamVzdC5mbigoKSA9PlxyXG4gIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe30pLFxyXG4gICAgb2s6IHRydWUsXHJcbiAgICBzdGF0dXM6IDIwMCxcclxuICB9KVxyXG4pO1xyXG5cclxuLy8gTW9jayBXZWJTb2NrZXRcclxuZ2xvYmFsLldlYlNvY2tldCA9IGNsYXNzIHtcclxuICBjb25zdHJ1Y3Rvcih1cmwpIHtcclxuICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gMDtcclxuICAgIHRoaXMub25tZXNzYWdlID0gbnVsbDtcclxuICAgIHRoaXMub25vcGVuID0gbnVsbDtcclxuICAgIHRoaXMub25jbG9zZSA9IG51bGw7XHJcbiAgICB0aGlzLm9uZXJyb3IgPSBudWxsO1xyXG4gIH1cclxuICBzZW5kKGRhdGEpIHt9XHJcbiAgY2xvc2UoKSB7fVxyXG59O1xyXG5cclxuLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIG9ic2VydmUoKSB7fVxyXG4gIHVub2JzZXJ2ZSgpIHt9XHJcbiAgZGlzY29ubmVjdCgpIHt9XHJcbn07XHJcblxyXG4vLyBNb2NrIFJlc2l6ZU9ic2VydmVyXHJcbmdsb2JhbC5SZXNpemVPYnNlcnZlciA9IGNsYXNzIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgb2JzZXJ2ZSgpIHt9XHJcbiAgdW5vYnNlcnZlKCkge31cclxuICBkaXNjb25uZWN0KCkge31cclxufTtcclxuXHJcbi8vIE1vY2sgbWF0Y2hNZWRpYVxyXG5nbG9iYWwubWF0Y2hNZWRpYSA9IGdsb2JhbC5tYXRjaE1lZGlhIHx8IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBtYXRjaGVzOiBmYWxzZSxcclxuICAgIGFkZExpc3RlbmVyOiBmdW5jdGlvbigpIHt9LFxyXG4gICAgcmVtb3ZlTGlzdGVuZXI6IGZ1bmN0aW9uKCkge31cclxuICB9O1xyXG59O1xyXG5cclxuLy8gTW9jayBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxucHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCA9ICd0ZXN0LXNlY3JldCc7XHJcbnByb2Nlc3MuZW52Lk1PTkdPREJfVVJJID0gJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvdGVzdC1kYic7XHJcbnByb2Nlc3MuZW52Lk5FWFRBVVRIX1NFQ1JFVCA9ICd0ZXN0LW5leHRhdXRoLXNlY3JldCc7XHJcbnByb2Nlc3MuZW52Lk5FWFRBVVRIX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnOyJdLCJtYXBwaW5ncyI6IkFBYUE7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU87RUFDN0JDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxPQUFPLEVBQUdDLEtBQUssSUFBSztJQUNsQixPQUFPO01BQ0xDLElBQUksRUFBRSxLQUFLO01BQ1hELEtBQUssRUFBQUUsYUFBQSxDQUFBQSxhQUFBLEtBQU9GLEtBQUs7UUFBRUcsR0FBRyxFQUFFSCxLQUFLLENBQUNHLEdBQUcsSUFBSTtNQUFFO0lBQ3pDLENBQUM7RUFDSDtBQUNGLENBQUMsQ0FBQyxD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