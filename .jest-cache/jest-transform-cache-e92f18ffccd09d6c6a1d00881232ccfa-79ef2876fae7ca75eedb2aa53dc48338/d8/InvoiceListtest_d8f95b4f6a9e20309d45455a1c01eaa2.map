{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_InvoiceList","_jsxFileName","__jsx","default","createElement","mockInvoices","id","number","patient","amount","status","describe","test","render","invoices","__self","__source","fileName","lineNumber","columnNumber","expect","screen","getByText","toBeInTheDocument","getAllByRole","toHaveLength","length","debug","getByRole","rows","toBeGreaterThan","firstRow","within","it","_id","dueDate"],"sources":["InvoiceList.test.js"],"sourcesContent":["import React from \"react\";\nimport { render, screen, within } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport InvoiceList from \"../InvoiceList\";\n\nconst mockInvoices = [\n  { id: 1, number: \"INV-001\", patient: \"John Doe\", amount: \"$100\", status: \"Paid\" },\n  { id: 2, number: \"INV-002\", patient: \"Jane Smith\", amount: \"$200\", status: \"Pending\" },\n];\n\ndescribe(\"InvoiceList Component\", () => {\n  test(\"renders without crashing\", () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    expect(screen.getByText(\"Invoices\")).toBeInTheDocument();\n  });\n\n  test(\"displays the correct number of invoices\", () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    expect(screen.getAllByRole(\"row\")).toHaveLength(mockInvoices.length + 1); // +1 for the header row\n  });\n\n  test(\"renders invoice list correctly\", () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    \n    // Debug output for inspection\n    screen.debug();\n\n    // Check if the table exists\n    expect(screen.getByRole(\"table\")).toBeInTheDocument();\n\n    // Query table rows\n    const rows = screen.getAllByRole(\"row\");\n    expect(rows.length).toBeGreaterThan(1); // Ensure there's at least a header row + invoices\n\n    // Validate first invoice row\n    const firstRow = rows[1]; // Skipping header row\n    expect(within(firstRow).getByText(\"INV-001\")).toBeInTheDocument();\n    expect(within(firstRow).getByText(\"John Doe\")).toBeInTheDocument();\n    expect(within(firstRow).getByText(/\\$100/)).toBeInTheDocument();\n    expect(within(firstRow).getByText(/paid/i)).toBeInTheDocument();\n  });\n});\n\n// Test to check if InvoiceList renders correctly with no invoices\nit(\"renders no invoices message when invoice list is empty\", () => {\n  render(<InvoiceList invoices={[]} />);\n  expect(screen.getByText(/no invoices available/i)).toBeInTheDocument();\n});\n\n// Test to check if InvoiceList renders invoices correctly\nit(\"renders invoices correctly\", () => {\n  const invoices = [\n    { _id: \"1\", number: \"INV-001\", amount: 100, dueDate: \"2023-12-31\" },\n    { _id: \"2\", number: \"INV-002\", amount: 200, dueDate: \"2024-01-15\" },\n  ];\n  render(<InvoiceList invoices={invoices} />);\n  expect(screen.getByText(/inv-001/i)).toBeInTheDocument();\n  expect(screen.getByText(/inv-002/i)).toBeInTheDocument();\n});\n"],"mappings":"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","ignoreList":[]}