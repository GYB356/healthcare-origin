276837650e3182defa1842e954940c07
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _InvoiceList = _interopRequireDefault(require("../InvoiceList"));
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\pages\\src\\components\\billing\\__tests__\\InvoiceList.test.js";
var __jsx = _react.default.createElement;
const mockInvoices = [{
  id: 1,
  number: "INV-001",
  patient: "John Doe",
  amount: "$100",
  status: "Paid"
}, {
  id: 2,
  number: "INV-002",
  patient: "Jane Smith",
  amount: "$200",
  status: "Pending"
}];
describe("InvoiceList Component", () => {
  test("renders without crashing", () => {
    (0, _react2.render)(__jsx(_InvoiceList.default, {
      invoices: mockInvoices,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 13,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText("Invoices")).toBeInTheDocument();
  });
  test("displays the correct number of invoices", () => {
    (0, _react2.render)(__jsx(_InvoiceList.default, {
      invoices: mockInvoices,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 18,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getAllByRole("row")).toHaveLength(mockInvoices.length + 1); // +1 for the header row
  });
  test("renders invoice list correctly", () => {
    (0, _react2.render)(__jsx(_InvoiceList.default, {
      invoices: mockInvoices,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 23,
        columnNumber: 12
      }
    }));

    // Debug output for inspection
    _react2.screen.debug();

    // Check if the table exists
    expect(_react2.screen.getByRole("table")).toBeInTheDocument();

    // Query table rows
    const rows = _react2.screen.getAllByRole("row");
    expect(rows.length).toBeGreaterThan(1); // Ensure there's at least a header row + invoices

    // Validate first invoice row
    const firstRow = rows[1]; // Skipping header row
    expect((0, _react2.within)(firstRow).getByText("INV-001")).toBeInTheDocument();
    expect((0, _react2.within)(firstRow).getByText("John Doe")).toBeInTheDocument();
    expect((0, _react2.within)(firstRow).getByText(/\$100/)).toBeInTheDocument();
    expect((0, _react2.within)(firstRow).getByText(/paid/i)).toBeInTheDocument();
  });
});

// Test to check if InvoiceList renders correctly with no invoices
it("renders no invoices message when invoice list is empty", () => {
  (0, _react2.render)(__jsx(_InvoiceList.default, {
    invoices: [],
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText(/no invoices available/i)).toBeInTheDocument();
});

// Test to check if InvoiceList renders invoices correctly
it("renders invoices correctly", () => {
  const invoices = [{
    _id: "1",
    number: "INV-001",
    amount: 100,
    dueDate: "2023-12-31"
  }, {
    _id: "2",
    number: "INV-002",
    amount: 200,
    dueDate: "2024-01-15"
  }];
  (0, _react2.render)(__jsx(_InvoiceList.default, {
    invoices: invoices,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText(/inv-001/i)).toBeInTheDocument();
  expect(_react2.screen.getByText(/inv-002/i)).toBeInTheDocument();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfSW52b2ljZUxpc3QiLCJfanN4RmlsZU5hbWUiLCJfX2pzeCIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwibW9ja0ludm9pY2VzIiwiaWQiLCJudW1iZXIiLCJwYXRpZW50IiwiYW1vdW50Iiwic3RhdHVzIiwiZGVzY3JpYmUiLCJ0ZXN0IiwicmVuZGVyIiwiaW52b2ljZXMiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwiZ2V0QWxsQnlSb2xlIiwidG9IYXZlTGVuZ3RoIiwibGVuZ3RoIiwiZGVidWciLCJnZXRCeVJvbGUiLCJyb3dzIiwidG9CZUdyZWF0ZXJUaGFuIiwiZmlyc3RSb3ciLCJ3aXRoaW4iLCJpdCIsIl9pZCIsImR1ZURhdGUiXSwic291cmNlcyI6WyJJbnZvaWNlTGlzdC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCB3aXRoaW4gfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XG5pbXBvcnQgSW52b2ljZUxpc3QgZnJvbSBcIi4uL0ludm9pY2VMaXN0XCI7XG5cbmNvbnN0IG1vY2tJbnZvaWNlcyA9IFtcbiAgeyBpZDogMSwgbnVtYmVyOiBcIklOVi0wMDFcIiwgcGF0aWVudDogXCJKb2huIERvZVwiLCBhbW91bnQ6IFwiJDEwMFwiLCBzdGF0dXM6IFwiUGFpZFwiIH0sXG4gIHsgaWQ6IDIsIG51bWJlcjogXCJJTlYtMDAyXCIsIHBhdGllbnQ6IFwiSmFuZSBTbWl0aFwiLCBhbW91bnQ6IFwiJDIwMFwiLCBzdGF0dXM6IFwiUGVuZGluZ1wiIH0sXG5dO1xuXG5kZXNjcmliZShcIkludm9pY2VMaXN0IENvbXBvbmVudFwiLCAoKSA9PiB7XG4gIHRlc3QoXCJyZW5kZXJzIHdpdGhvdXQgY3Jhc2hpbmdcIiwgKCkgPT4ge1xuICAgIHJlbmRlcig8SW52b2ljZUxpc3QgaW52b2ljZXM9e21vY2tJbnZvaWNlc30gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiSW52b2ljZXNcIikpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIHRlc3QoXCJkaXNwbGF5cyB0aGUgY29ycmVjdCBudW1iZXIgb2YgaW52b2ljZXNcIiwgKCkgPT4ge1xuICAgIHJlbmRlcig8SW52b2ljZUxpc3QgaW52b2ljZXM9e21vY2tJbnZvaWNlc30gLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QWxsQnlSb2xlKFwicm93XCIpKS50b0hhdmVMZW5ndGgobW9ja0ludm9pY2VzLmxlbmd0aCArIDEpOyAvLyArMSBmb3IgdGhlIGhlYWRlciByb3dcbiAgfSk7XG5cbiAgdGVzdChcInJlbmRlcnMgaW52b2ljZSBsaXN0IGNvcnJlY3RseVwiLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxJbnZvaWNlTGlzdCBpbnZvaWNlcz17bW9ja0ludm9pY2VzfSAvPik7XG4gICAgXG4gICAgLy8gRGVidWcgb3V0cHV0IGZvciBpbnNwZWN0aW9uXG4gICAgc2NyZWVuLmRlYnVnKCk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgdGFibGUgZXhpc3RzXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoXCJ0YWJsZVwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFF1ZXJ5IHRhYmxlIHJvd3NcbiAgICBjb25zdCByb3dzID0gc2NyZWVuLmdldEFsbEJ5Um9sZShcInJvd1wiKTtcbiAgICBleHBlY3Qocm93cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigxKTsgLy8gRW5zdXJlIHRoZXJlJ3MgYXQgbGVhc3QgYSBoZWFkZXIgcm93ICsgaW52b2ljZXNcblxuICAgIC8vIFZhbGlkYXRlIGZpcnN0IGludm9pY2Ugcm93XG4gICAgY29uc3QgZmlyc3RSb3cgPSByb3dzWzFdOyAvLyBTa2lwcGluZyBoZWFkZXIgcm93XG4gICAgZXhwZWN0KHdpdGhpbihmaXJzdFJvdykuZ2V0QnlUZXh0KFwiSU5WLTAwMVwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qod2l0aGluKGZpcnN0Um93KS5nZXRCeVRleHQoXCJKb2huIERvZVwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qod2l0aGluKGZpcnN0Um93KS5nZXRCeVRleHQoL1xcJDEwMC8pKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdCh3aXRoaW4oZmlyc3RSb3cpLmdldEJ5VGV4dCgvcGFpZC9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG59KTtcblxuLy8gVGVzdCB0byBjaGVjayBpZiBJbnZvaWNlTGlzdCByZW5kZXJzIGNvcnJlY3RseSB3aXRoIG5vIGludm9pY2VzXG5pdChcInJlbmRlcnMgbm8gaW52b2ljZXMgbWVzc2FnZSB3aGVuIGludm9pY2UgbGlzdCBpcyBlbXB0eVwiLCAoKSA9PiB7XG4gIHJlbmRlcig8SW52b2ljZUxpc3QgaW52b2ljZXM9e1tdfSAvPik7XG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9ubyBpbnZvaWNlcyBhdmFpbGFibGUvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG59KTtcblxuLy8gVGVzdCB0byBjaGVjayBpZiBJbnZvaWNlTGlzdCByZW5kZXJzIGludm9pY2VzIGNvcnJlY3RseVxuaXQoXCJyZW5kZXJzIGludm9pY2VzIGNvcnJlY3RseVwiLCAoKSA9PiB7XG4gIGNvbnN0IGludm9pY2VzID0gW1xuICAgIHsgX2lkOiBcIjFcIiwgbnVtYmVyOiBcIklOVi0wMDFcIiwgYW1vdW50OiAxMDAsIGR1ZURhdGU6IFwiMjAyMy0xMi0zMVwiIH0sXG4gICAgeyBfaWQ6IFwiMlwiLCBudW1iZXI6IFwiSU5WLTAwMlwiLCBhbW91bnQ6IDIwMCwgZHVlRGF0ZTogXCIyMDI0LTAxLTE1XCIgfSxcbiAgXTtcbiAgcmVuZGVyKDxJbnZvaWNlTGlzdCBpbnZvaWNlcz17aW52b2ljZXN9IC8+KTtcbiAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2ludi0wMDEvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9pbnYtMDAyL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQXlDLElBQUFHLFlBQUE7QUFBQSxJQUFBQyxLQUFBLEdBQUFOLE1BQUEsQ0FBQU8sT0FBQSxDQUFBQyxhQUFBO0FBRXpDLE1BQU1DLFlBQVksR0FBRyxDQUNuQjtFQUFFQyxFQUFFLEVBQUUsQ0FBQztFQUFFQyxNQUFNLEVBQUUsU0FBUztFQUFFQyxPQUFPLEVBQUUsVUFBVTtFQUFFQyxNQUFNLEVBQUUsTUFBTTtFQUFFQyxNQUFNLEVBQUU7QUFBTyxDQUFDLEVBQ2pGO0VBQUVKLEVBQUUsRUFBRSxDQUFDO0VBQUVDLE1BQU0sRUFBRSxTQUFTO0VBQUVDLE9BQU8sRUFBRSxZQUFZO0VBQUVDLE1BQU0sRUFBRSxNQUFNO0VBQUVDLE1BQU0sRUFBRTtBQUFVLENBQUMsQ0FDdkY7QUFFREMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLE1BQU07RUFDdENDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxNQUFNO0lBQ3JDLElBQUFDLGNBQU0sRUFBQ1gsS0FBQSxDQUFDRixZQUFBLENBQUFHLE9BQVc7TUFBQ1csUUFBUSxFQUFFVCxZQUFhO01BQUFVLE1BQUE7TUFBQUMsUUFBQTtRQUFBQyxRQUFBLEVBQUFoQixZQUFB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