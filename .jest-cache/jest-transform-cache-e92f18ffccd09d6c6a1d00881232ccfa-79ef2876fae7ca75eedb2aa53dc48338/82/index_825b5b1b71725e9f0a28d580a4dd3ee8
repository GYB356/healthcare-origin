ce1df5fcbaf1b161a8ecf1f06d6f01b0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetPortsCache = exports.tryPort = exports.validPort = exports.getFreePort = exports.MAX_PORT = exports.MIN_PORT = void 0;
const tslib_1 = require("tslib");
const net = tslib_1.__importStar(require("node:net"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const log = (0, debug_1.default)('MongoMS:GetPort');
/** Linux min port that does not require root permissions */
exports.MIN_PORT = 1024;
/** u16 max number */
exports.MAX_PORT = 65535;
/**
 * Time before {@link PORTS_CACHE} gets cleared
 * 10 seconds
 */
const PORTS_CACHE_CLEAN_TIME = 1000 * 10;
/**
 * Ports cache, so that locked ports are quickly ignored and hoping for less port stealing
 */
const PORTS_CACHE = {
  timeSet: undefined,
  ports: new Set()
};
/** Max default tries before giving up */
const MAX_DEFAULT_TRIES = 10;
/**
 * Try to get a free port.
 * @param firstPort The first port to try or empty for a random port
 * @param max_tries maximum amount of tries to get a port, default to {@link MAX_DEFAULT_TRIES}
 * @returns A valid free port
 * @throws if "max_tries" is exceeded
 */
async function getFreePort(firstPort, max_tries = MAX_DEFAULT_TRIES) {
  // use "0" as a fallback to use net0listen, which generates a random free port
  firstPort = firstPort || 0;
  // clear ports cache after some time, but not on an interval
  if (PORTS_CACHE.timeSet && Date.now() - PORTS_CACHE.timeSet > PORTS_CACHE_CLEAN_TIME) {
    PORTS_CACHE.ports.clear();
    PORTS_CACHE.timeSet = Date.now();
  } else if (!PORTS_CACHE.timeSet) {
    PORTS_CACHE.timeSet = Date.now();
  }
  let tries = 0;
  while (tries <= max_tries) {
    tries += 1;
    // "0" means to use have ".listen" use a random port
    const nextPort = tries === 1 ? firstPort : 0;
    // try next port, because it is already in the cache
    // unless port is "0" which will use "net.listen(0)"
    if (PORTS_CACHE.ports.has(nextPort) && nextPort !== 0) {
      continue;
    }
    PORTS_CACHE.ports.add(nextPort);
    const triedPort = await tryPort(nextPort);
    if (triedPort > 0) {
      // check if triedPort is already in the cache (ie the vm executed another instance's getport before binary startup)
      // and that the triedPort is not a custom port
      const inCacheAndNotSame = PORTS_CACHE.ports.has(triedPort) && nextPort !== triedPort;
      log(`getFreePort: found free port ${triedPort}, in cache and not custom: ${inCacheAndNotSame}`);
      // returned port can be different than the "nextPort" (if net0listen)
      PORTS_CACHE.ports.add(nextPort);
      // ensure that no other instance can get the same port if the vm decides to run the other instance's getport before starting the last one
      if (inCacheAndNotSame) {
        continue;
      }
      // reset the cache time as we now have just added new ports
      PORTS_CACHE.timeSet = Date.now();
      return triedPort;
    }
  }
  throw new Error('Max port tries exceeded');
}
exports.getFreePort = getFreePort;
exports.default = getFreePort;
/**
 * Ensure that input number is within range of {@link MIN_PORT} and {@link MAX_PORT}.
 * If more than {@link MAX_PORT}, wrap around, if less than {@link MIN_PORT} use {@link MIN_PORT}.
 * @param port The Number to check
 * @returns A Valid number in port range
 */
function validPort(port) {
  const mod = port % exports.MAX_PORT;
  return mod < exports.MIN_PORT ? exports.MIN_PORT : mod;
}
exports.validPort = validPort;
/**
 * Try a given port.
 * @param port The port to try
 * @returns the port if successful, "-1" in case of `EADDRINUSE`, all other errors reject
 * @throws The error given if the code is not "EADDRINUSE"
 */
function tryPort(port) {
  return new Promise((res, rej) => {
    const server = net.createServer();
    // some engines dont support ".unref"(net / tcp.unref), like "deno" in the past and now "bun"
    if (typeof server.unref === 'function') {
      server.unref(); // dont keep this server from exiting the application
    }
    server.on('error', err => {
      if (err?.code !== 'EADDRINUSE') {
        rej(err);
      }
      res(-1);
    });
    server.listen(port, () => {
      const address = server.address();
      const port = address.port;
      server.close();
      res(port);
    });
  });
}
exports.tryPort = tryPort;
/**
 * Reset the {@link PORTS_CACHE} to its initial state.
 *
 * This function is meant for debugging and testing purposes only.
 */
function resetPortsCache() {
  PORTS_CACHE.timeSet = undefined;
  PORTS_CACHE.ports.clear();
}
exports.resetPortsCache = resetPortsCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuZXQiLCJ0c2xpYl8xIiwiX19pbXBvcnRTdGFyIiwicmVxdWlyZSIsImRlYnVnXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJsb2ciLCJkZWZhdWx0IiwiZXhwb3J0cyIsIk1JTl9QT1JUIiwiTUFYX1BPUlQiLCJQT1JUU19DQUNIRV9DTEVBTl9USU1FIiwiUE9SVFNfQ0FDSEUiLCJ0aW1lU2V0IiwidW5kZWZpbmVkIiwicG9ydHMiLCJTZXQiLCJNQVhfREVGQVVMVF9UUklFUyIsImdldEZyZWVQb3J0IiwiZmlyc3RQb3J0IiwibWF4X3RyaWVzIiwiRGF0ZSIsIm5vdyIsImNsZWFyIiwidHJpZXMiLCJuZXh0UG9ydCIsImhhcyIsImFkZCIsInRyaWVkUG9ydCIsInRyeVBvcnQiLCJpbkNhY2hlQW5kTm90U2FtZSIsIkVycm9yIiwidmFsaWRQb3J0IiwicG9ydCIsIm1vZCIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJzZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJ1bnJlZiIsIm9uIiwiZXJyIiwiY29kZSIsImxpc3RlbiIsImFkZHJlc3MiLCJjbG9zZSIsInJlc2V0UG9ydHNDYWNoZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlsL2dldHBvcnQvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFBQSxHQUFBLEdBQUFDLE9BQUEsQ0FBQUMsWUFBQSxDQUFBQyxPQUFBO0FBQ0EsTUFBQUMsT0FBQSxHQUFBSCxPQUFBLENBQUFJLGVBQUEsQ0FBQUYsT0FBQTtBQUVBLE1BQU1HLEdBQUcsR0FBRyxJQUFBRixPQUFBLENBQUFHLE9BQUssRUFBQyxpQkFBaUIsQ0FBQztBQUVwQztBQUNhQyxPQUFBLENBQUFDLFFBQVEsR0FBRyxJQUFJO0FBQzVCO0FBQ2FELE9BQUEsQ0FBQUUsUUFBUSxHQUFHLEtBQUs7QUFVN0I7Ozs7QUFJQSxNQUFNQyxzQkFBc0IsR0FBRyxJQUFJLEdBQUcsRUFBRTtBQUV4Qzs7O0FB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