099bd38c03f26a2648716e23a1135c10
// Mock next/image
_getJestObj().mock("next/image", () => ({
  __esModule: true,
  default: function Image(props) {
    return {
      type: "img",
      props: _objectSpread({}, props)
    };
  }
}));

// Mock react-router-dom
_getJestObj().mock("react-router-dom", () => ({
  BrowserRouter: ({
    children
  }) => children,
  Route: ({
    children
  }) => children,
  Routes: ({
    children
  }) => children,
  Link: ({
    children,
    to
  }) => children,
  NavLink: ({
    children,
    to
  }) => children,
  Navigate: ({
    to
  }) => null,
  useNavigate: () => jest.fn(),
  useParams: () => ({}),
  useLocation: () => ({
    pathname: "/",
    search: "",
    hash: "",
    state: null
  }),
  MemoryRouter: ({
    children
  }) => children
}));

// Mock axios for tests
_getJestObj().mock("axios", () => {
  const mockAxios = {
    create: jest.fn(() => mockAxios),
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
    interceptors: {
      request: {
        use: jest.fn(),
        eject: jest.fn()
      },
      response: {
        use: jest.fn(),
        eject: jest.fn()
      }
    },
    defaults: {
      baseURL: ""
    }
  };
  return mockAxios;
});

// Mock next-auth
_getJestObj().mock("next-auth", () => ({
  getServerSession: jest.fn(() => Promise.resolve({
    user: {
      id: "1"
    }
  })),
  signIn: jest.fn(),
  signOut: jest.fn()
}));

// Mock next/navigation
_getJestObj().mock("next/navigation", () => ({
  useRouter: () => ({
    push: jest.fn(),
    replace: jest.fn(),
    prefetch: jest.fn(),
    back: jest.fn()
  }),
  usePathname: () => "",
  useSearchParams: () => new URLSearchParams()
}));

// Mock socket.io-client
_getJestObj().mock("socket.io-client", () => ({
  io: jest.fn(() => ({
    on: jest.fn(),
    emit: jest.fn(),
    connect: jest.fn(),
    disconnect: jest.fn()
  }))
}));

// Mock PrismaClient
_getJestObj().mock("@prisma/client", () => ({
  PrismaClient: jest.fn().mockImplementation(() => ({
    user: {
      findUnique: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn()
    },
    patient: {
      findUnique: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn()
    },
    appointment: {
      findUnique: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn()
    },
    availability: {
      findUnique: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn()
    }
  }))
}));

// Reset mocks after each test

// Mock ReportViewer component with a virtual module
_getJestObj().mock("components/ReportViewer", () => {
  return {
    __esModule: true,
    default: function MockReportViewer(props) {
      return {
        type: "div",
        props: _objectSpread({
          "data-testid": "mock-report-viewer"
        }, props)
      };
    }
  };
}, {
  virtual: true
});

// Also mock with various path patterns
_getJestObj().mock("./components/ReportViewer", () => {
  return {
    __esModule: true,
    default: function MockReportViewer(props) {
      return {
        type: "div",
        props: _objectSpread({
          "data-testid": "mock-report-viewer"
        }, props)
      };
    }
  };
}, {
  virtual: true
});

// Provide mock for any missing path aliases
_getJestObj().mock("@/contexts/AuthContext", () => require("./__mocks__/auth-context.js"), {
  virtual: true
});
_getJestObj().mock("@/components/common/LoadingSpinner", () => require("./__mocks__/LoadingSpinner.js"), {
  virtual: true
});
_getJestObj().mock("@/utils/validation", () => ({
  validateLoginData: jest.fn().mockReturnValue({
    isValid: true,
    errors: {}
  })
}), {
  virtual: true
});
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const process = require("node:process");

// Set environment variables first
process.env.SKIP_MONGO = process.env.SKIP_MONGO || "false";
process.env.JWT_SECRET = "test-secret";
process.env.MONGODB_URI = "mongodb://localhost:27017/test-db";
process.env.NEXTAUTH_SECRET = "test-nextauth-secret";
process.env.NEXTAUTH_URL = "http://localhost:3000";
const {
  TextEncoder,
  TextDecoder
} = require("util");
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;
require("dotenv").config({
  path: ".env.test"
});
require("@testing-library/jest-dom");

// Set global timeout
jest.setTimeout(120000);

// Check if we should skip MongoDB setup
const shouldSkipMongo = process.env.SKIP_MONGO === "true";
if (!shouldSkipMongo) {
  console.log("Setting up MongoDB for tests - requiring mongodb.setup.js");

  // Explicitly require the MongoDB setup file
  require("./__tests__/helpers/mongodb.setup.js");

  // Also provide utility functions as globals for convenience
  global.mongoTestUtils = {
    connect: jest.fn(),
    disconnect: jest.fn(),
    clear: jest.fn()
  };
} else {
  // Also mock mongoose
  _getJestObj().mock("mongoose", () => ({
    connect: jest.fn(),
    connection: {
      close: jest.fn(),
      on: jest.fn(),
      once: jest.fn(),
      readyState: 0
    },
    Schema: jest.fn().mockImplementation(() => ({
      index: jest.fn().mockReturnThis(),
      pre: jest.fn().mockReturnThis(),
      set: jest.fn().mockReturnThis()
    })),
    model: jest.fn().mockImplementation(() => ({}))
  }));
  console.log("Skipping MongoDB setup for this test");

  // Create mock MongoDB functions for tests that don't need real MongoDB
  global.mongoTestUtils = {
    connect: jest.fn(),
    disconnect: jest.fn(),
    clear: jest.fn()
  };
}

// Mock fetch
const fetchMock = require("jest-fetch-mock");
fetchMock.enableMocks();
afterEach(() => {
  jest.clearAllMocks();
});

// Suppress console.error for specific React warnings
const originalError = console.error;
console.error = (...args) => {
  if (/Warning: ReactDOM.render is no longer supported in React 18/.test(args[0]) || /Warning: useLayoutEffect does nothing on the server/.test(args[0])) {
    return;
  }
  originalError.call(console, ...args);
};

// Mock console.error to fail tests
console.error = (...args) => {
  if (/Warning: ReactDOM.render is no longer supported in React 18/.test(args[0]) || /Warning: ReactDOM.hydrate is no longer supported in React 18/.test(args[0]) || /Warning: ReactDOM.unmountComponentAtNode is no longer supported in React 18/.test(args[0])) {
    return;
  }
  originalError.call(console, ...args);
};

// Mock fetch
global.fetch = jest.fn(() => Promise.resolve({
  json: () => Promise.resolve({}),
  ok: true,
  status: 200
}));

// Mock WebSocket
global.WebSocket = class {
  constructor(url) {
    this.url = url;
    this.readyState = 0;
    this.onmessage = null;
    this.onopen = null;
    this.onclose = null;
    this.onerror = null;
  }
  send(data) {}
  close() {}
};

// Mock IntersectionObserver
global.IntersectionObserver = class {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock ResizeObserver
global.ResizeObserver = class {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock matchMedia
global.matchMedia = global.matchMedia || function () {
  return {
    matches: false,
    addListener: function () {},
    removeListener: function () {}
  };
};

// For tests that need browser-specific APIs
if (typeof window === "undefined") {
  global.window = {};
  global.document = {
    createElement: () => ({
      style: {},
      setAttribute: jest.fn(),
      getElementsByTagName: jest.fn(() => []),
      appendChild: jest.fn()
    }),
    getElementById: jest.fn(),
    querySelector: jest.fn(),
    querySelectorAll: jest.fn(() => []),
    documentElement: {
      style: {}
    }
  };
}

// Define proper React components for context providers
const React = require("react");

// Create a more functional AuthContext mock
class MockProvider extends React.Component {
  render() {
    return this.props.children;
  }
}

// Define global mocks for contexts that properly handle props
global.AuthContext = {
  Provider: MockProvider
};
global.SocketContext = {
  Provider: MockProvider
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkltYWdlIiwicHJvcHMiLCJ0eXBlIiwiX29iamVjdFNwcmVhZCIsIkJyb3dzZXJSb3V0ZXIiLCJjaGlsZHJlbiIsIlJvdXRlIiwiUm91dGVzIiwiTGluayIsInRvIiwiTmF2TGluayIsIk5hdmlnYXRlIiwidXNlTmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJ1c2VQYXJhbXMiLCJ1c2VMb2NhdGlvbiIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsInN0YXRlIiwiTWVtb3J5Um91dGVyIiwibW9ja0F4aW9zIiwiY3JlYXRlIiwiZ2V0IiwicG9zdCIsInB1dCIsImRlbGV0ZSIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJ1c2UiLCJlamVjdCIsInJlc3BvbnNlIiwiZGVmYXVsdHMiLCJiYXNlVVJMIiwiZ2V0U2VydmVyU2Vzc2lvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidXNlciIsImlkIiwic2lnbkluIiwic2lnbk91dCIsInVzZVJvdXRlciIsInB1c2giLCJyZXBsYWNlIiwicHJlZmV0Y2giLCJiYWNrIiwidXNlUGF0aG5hbWUiLCJ1c2VTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpbyIsIm9uIiwiZW1pdCIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwiUHJpc21hQ2xpZW50IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiZmluZFVuaXF1ZSIsImZpbmRNYW55IiwidXBkYXRlIiwicGF0aWVudCIsImFwcG9pbnRtZW50IiwiYXZhaWxhYmlsaXR5IiwiTW9ja1JlcG9ydFZpZXdlciIsInZpcnR1YWwiLCJyZXF1aXJlIiwidmFsaWRhdGVMb2dpbkRhdGEiLCJtb2NrUmV0dXJuVmFsdWUiLCJpc1ZhbGlkIiwiZXJyb3JzIiwiX2RlZmluZVByb3BlcnR5Iiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImFwcGx5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJwcm9jZXNzIiwiZW52IiwiU0tJUF9NT05HTyIsIkpXVF9TRUNSRVQiLCJNT05HT0RCX1VSSSIsIk5FWFRBVVRIX1NFQ1JFVCIsIk5FWFRBVVRIX1VSTCIsIlRleHRFbmNvZGVyIiwiVGV4dERlY29kZXIiLCJnbG9iYWwiLCJjb25maWciLCJwYXRoIiwic2V0VGltZW91dCIsInNob3VsZFNraXBNb25nbyIsImNvbnNvbGUiLCJsb2ciLCJtb25nb1Rlc3RVdGlscyIsImNsZWFyIiwiY29ubmVjdGlvbiIsImNsb3NlIiwib25jZSIsInJlYWR5U3RhdGUiLCJTY2hlbWEiLCJpbmRleCIsIm1vY2tSZXR1cm5UaGlzIiwicHJlIiwic2V0IiwibW9kZWwiLCJmZXRjaE1vY2siLCJlbmFibGVNb2NrcyIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJvcmlnaW5hbEVycm9yIiwiZXJyb3IiLCJhcmdzIiwidGVzdCIsImNhbGwiLCJmZXRjaCIsImpzb24iLCJvayIsInN0YXR1cyIsIldlYlNvY2tldCIsImNvbnN0cnVjdG9yIiwidXJsIiwib25tZXNzYWdlIiwib25vcGVuIiwib25jbG9zZSIsIm9uZXJyb3IiLCJzZW5kIiwiZGF0YSIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIlJlc2l6ZU9ic2VydmVyIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwiZ2V0RWxlbWVudEJ5SWQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImRvY3VtZW50RWxlbWVudCIsIlJlYWN0IiwiTW9ja1Byb3ZpZGVyIiwiQ29tcG9uZW50IiwicmVuZGVyIiwiQXV0aENvbnRleHQiLCJQcm92aWRlciIsIlNvY2tldENvbnRleHQiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByb2Nlc3MgPSByZXF1aXJlKFwibm9kZTpwcm9jZXNzXCIpO1xyXG5cclxuLy8gU2V0IGVudmlyb25tZW50IHZhcmlhYmxlcyBmaXJzdFxyXG5wcm9jZXNzLmVudi5TS0lQX01PTkdPID0gcHJvY2Vzcy5lbnYuU0tJUF9NT05HTyB8fCBcImZhbHNlXCI7XHJcbnByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSBcInRlc3Qtc2VjcmV0XCI7XHJcbnByb2Nlc3MuZW52Lk1PTkdPREJfVVJJID0gXCJtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L3Rlc3QtZGJcIjtcclxucHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVUID0gXCJ0ZXN0LW5leHRhdXRoLXNlY3JldFwiO1xyXG5wcm9jZXNzLmVudi5ORVhUQVVUSF9VUkwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiO1xyXG5cclxuY29uc3QgeyBUZXh0RW5jb2RlciwgVGV4dERlY29kZXIgfSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xyXG5nbG9iYWwuVGV4dEVuY29kZXIgPSBUZXh0RW5jb2RlcjtcclxuZ2xvYmFsLlRleHREZWNvZGVyID0gVGV4dERlY29kZXI7XHJcblxyXG5yZXF1aXJlKFwiZG90ZW52XCIpLmNvbmZpZyh7IHBhdGg6IFwiLmVudi50ZXN0XCIgfSk7XHJcbnJlcXVpcmUoXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tXCIpO1xyXG5cclxuLy8gU2V0IGdsb2JhbCB0aW1lb3V0XHJcbmplc3Quc2V0VGltZW91dCgxMjAwMDApO1xyXG5cclxuLy8gQ2hlY2sgaWYgd2Ugc2hvdWxkIHNraXAgTW9uZ29EQiBzZXR1cFxyXG5jb25zdCBzaG91bGRTa2lwTW9uZ28gPSBwcm9jZXNzLmVudi5TS0lQX01PTkdPID09PSBcInRydWVcIjtcclxuXHJcbmlmICghc2hvdWxkU2tpcE1vbmdvKSB7XHJcbiAgY29uc29sZS5sb2coXCJTZXR0aW5nIHVwIE1vbmdvREIgZm9yIHRlc3RzIC0gcmVxdWlyaW5nIG1vbmdvZGIuc2V0dXAuanNcIik7XHJcblxyXG4gIC8vIEV4cGxpY2l0bHkgcmVxdWlyZSB0aGUgTW9uZ29EQiBzZXR1cCBmaWxlXHJcbiAgcmVxdWlyZShcIi4vX190ZXN0c19fL2hlbHBlcnMvbW9uZ29kYi5zZXR1cC5qc1wiKTtcclxuXHJcbiAgLy8gQWxzbyBwcm92aWRlIHV0aWxpdHkgZnVuY3Rpb25zIGFzIGdsb2JhbHMgZm9yIGNvbnZlbmllbmNlXHJcbiAgZ2xvYmFsLm1vbmdvVGVzdFV0aWxzID0ge1xyXG4gICAgY29ubmVjdDogamVzdC5mbigpLFxyXG4gICAgZGlzY29ubmVjdDogamVzdC5mbigpLFxyXG4gICAgY2xlYXI6IGplc3QuZm4oKSxcclxuICB9O1xyXG59IGVsc2Uge1xyXG4gIGNvbnNvbGUubG9nKFwiU2tpcHBpbmcgTW9uZ29EQiBzZXR1cCBmb3IgdGhpcyB0ZXN0XCIpO1xyXG5cclxuICAvLyBDcmVhdGUgbW9jayBNb25nb0RCIGZ1bmN0aW9ucyBmb3IgdGVzdHMgdGhhdCBkb24ndCBuZWVkIHJlYWwgTW9uZ29EQlxyXG4gIGdsb2JhbC5tb25nb1Rlc3RVdGlscyA9IHtcclxuICAgIGNvbm5lY3Q6IGplc3QuZm4oKSxcclxuICAgIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcclxuICAgIGNsZWFyOiBqZXN0LmZuKCksXHJcbiAgfTtcclxuXHJcbiAgLy8gQWxzbyBtb2NrIG1vbmdvb3NlXHJcbiAgamVzdC5tb2NrKFwibW9uZ29vc2VcIiwgKCkgPT4gKHtcclxuICAgIGNvbm5lY3Q6IGplc3QuZm4oKSxcclxuICAgIGNvbm5lY3Rpb246IHtcclxuICAgICAgY2xvc2U6IGplc3QuZm4oKSxcclxuICAgICAgb246IGplc3QuZm4oKSxcclxuICAgICAgb25jZTogamVzdC5mbigpLFxyXG4gICAgICByZWFkeVN0YXRlOiAwLFxyXG4gICAgfSxcclxuICAgIFNjaGVtYTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xyXG4gICAgICBpbmRleDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICAgIHByZTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICAgIHNldDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXHJcbiAgICB9KSksXHJcbiAgICBtb2RlbDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe30pKSxcclxuICB9KSk7XHJcbn1cclxuXHJcbi8vIE1vY2sgZmV0Y2hcclxuY29uc3QgZmV0Y2hNb2NrID0gcmVxdWlyZShcImplc3QtZmV0Y2gtbW9ja1wiKTtcclxuZmV0Y2hNb2NrLmVuYWJsZU1vY2tzKCk7XHJcblxyXG4vLyBNb2NrIG5leHQvaW1hZ2VcclxuamVzdC5tb2NrKFwibmV4dC9pbWFnZVwiLCAoKSA9PiAoe1xyXG4gIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgZGVmYXVsdDogZnVuY3Rpb24gSW1hZ2UocHJvcHMpIHtcclxuICAgIHJldHVybiB7IHR5cGU6IFwiaW1nXCIsIHByb3BzOiB7IC4uLnByb3BzIH0gfTtcclxuICB9LFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIHJlYWN0LXJvdXRlci1kb21cclxuamVzdC5tb2NrKFwicmVhY3Qtcm91dGVyLWRvbVwiLCAoKSA9PiAoe1xyXG4gIEJyb3dzZXJSb3V0ZXI6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxyXG4gIFJvdXRlOiAoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlbixcclxuICBSb3V0ZXM6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxyXG4gIExpbms6ICh7IGNoaWxkcmVuLCB0byB9KSA9PiBjaGlsZHJlbixcclxuICBOYXZMaW5rOiAoeyBjaGlsZHJlbiwgdG8gfSkgPT4gY2hpbGRyZW4sXHJcbiAgTmF2aWdhdGU6ICh7IHRvIH0pID0+IG51bGwsXHJcbiAgdXNlTmF2aWdhdGU6ICgpID0+IGplc3QuZm4oKSxcclxuICB1c2VQYXJhbXM6ICgpID0+ICh7fSksXHJcbiAgdXNlTG9jYXRpb246ICgpID0+ICh7IHBhdGhuYW1lOiBcIi9cIiwgc2VhcmNoOiBcIlwiLCBoYXNoOiBcIlwiLCBzdGF0ZTogbnVsbCB9KSxcclxuICBNZW1vcnlSb3V0ZXI6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIGF4aW9zIGZvciB0ZXN0c1xyXG5qZXN0Lm1vY2soXCJheGlvc1wiLCAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja0F4aW9zID0ge1xyXG4gICAgY3JlYXRlOiBqZXN0LmZuKCgpID0+IG1vY2tBeGlvcyksXHJcbiAgICBnZXQ6IGplc3QuZm4oKSxcclxuICAgIHBvc3Q6IGplc3QuZm4oKSxcclxuICAgIHB1dDogamVzdC5mbigpLFxyXG4gICAgZGVsZXRlOiBqZXN0LmZuKCksXHJcbiAgICBpbnRlcmNlcHRvcnM6IHtcclxuICAgICAgcmVxdWVzdDogeyB1c2U6IGplc3QuZm4oKSwgZWplY3Q6IGplc3QuZm4oKSB9LFxyXG4gICAgICByZXNwb25zZTogeyB1c2U6IGplc3QuZm4oKSwgZWplY3Q6IGplc3QuZm4oKSB9LFxyXG4gICAgfSxcclxuICAgIGRlZmF1bHRzOiB7IGJhc2VVUkw6IFwiXCIgfSxcclxuICB9O1xyXG4gIHJldHVybiBtb2NrQXhpb3M7XHJcbn0pO1xyXG5cclxuLy8gTW9jayBuZXh0LWF1dGhcclxuamVzdC5tb2NrKFwibmV4dC1hdXRoXCIsICgpID0+ICh7XHJcbiAgZ2V0U2VydmVyU2Vzc2lvbjogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyB1c2VyOiB7IGlkOiBcIjFcIiB9IH0pKSxcclxuICBzaWduSW46IGplc3QuZm4oKSxcclxuICBzaWduT3V0OiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbi8vIE1vY2sgbmV4dC9uYXZpZ2F0aW9uXHJcbmplc3QubW9jayhcIm5leHQvbmF2aWdhdGlvblwiLCAoKSA9PiAoe1xyXG4gIHVzZVJvdXRlcjogKCkgPT4gKHtcclxuICAgIHB1c2g6IGplc3QuZm4oKSxcclxuICAgIHJlcGxhY2U6IGplc3QuZm4oKSxcclxuICAgIHByZWZldGNoOiBqZXN0LmZuKCksXHJcbiAgICBiYWNrOiBqZXN0LmZuKCksXHJcbiAgfSksXHJcbiAgdXNlUGF0aG5hbWU6ICgpID0+IFwiXCIsXHJcbiAgdXNlU2VhcmNoUGFyYW1zOiAoKSA9PiBuZXcgVVJMU2VhcmNoUGFyYW1zKCksXHJcbn0pKTtcclxuXHJcbi8vIE1vY2sgc29ja2V0LmlvLWNsaWVudFxyXG5qZXN0Lm1vY2soXCJzb2NrZXQuaW8tY2xpZW50XCIsICgpID0+ICh7XHJcbiAgaW86IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIG9uOiBqZXN0LmZuKCksXHJcbiAgICBlbWl0OiBqZXN0LmZuKCksXHJcbiAgICBjb25uZWN0OiBqZXN0LmZuKCksXHJcbiAgICBkaXNjb25uZWN0OiBqZXN0LmZuKCksXHJcbiAgfSkpLFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIFByaXNtYUNsaWVudFxyXG5qZXN0Lm1vY2soXCJAcHJpc21hL2NsaWVudFwiLCAoKSA9PiAoe1xyXG4gIFByaXNtYUNsaWVudDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xyXG4gICAgdXNlcjoge1xyXG4gICAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXHJcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxyXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXHJcbiAgICB9LFxyXG4gICAgcGF0aWVudDoge1xyXG4gICAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXHJcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxyXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXHJcbiAgICB9LFxyXG4gICAgYXBwb2ludG1lbnQ6IHtcclxuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxyXG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxyXG4gICAgICBjcmVhdGU6IGplc3QuZm4oKSxcclxuICAgICAgdXBkYXRlOiBqZXN0LmZuKCksXHJcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpLFxyXG4gICAgfSxcclxuICAgIGF2YWlsYWJpbGl0eToge1xyXG4gICAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXHJcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxyXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXHJcbiAgICB9LFxyXG4gIH0pKSxcclxufSkpO1xyXG5cclxuLy8gUmVzZXQgbW9ja3MgYWZ0ZXIgZWFjaCB0ZXN0XHJcbmFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbn0pO1xyXG5cclxuLy8gU3VwcHJlc3MgY29uc29sZS5lcnJvciBmb3Igc3BlY2lmaWMgUmVhY3Qgd2FybmluZ3NcclxuY29uc3Qgb3JpZ2luYWxFcnJvciA9IGNvbnNvbGUuZXJyb3I7XHJcbmNvbnNvbGUuZXJyb3IgPSAoLi4uYXJncykgPT4ge1xyXG4gIGlmIChcclxuICAgIC9XYXJuaW5nOiBSZWFjdERPTS5yZW5kZXIgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCBpbiBSZWFjdCAxOC8udGVzdChhcmdzWzBdKSB8fFxyXG4gICAgL1dhcm5pbmc6IHVzZUxheW91dEVmZmVjdCBkb2VzIG5vdGhpbmcgb24gdGhlIHNlcnZlci8udGVzdChhcmdzWzBdKVxyXG4gICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBvcmlnaW5hbEVycm9yLmNhbGwoY29uc29sZSwgLi4uYXJncyk7XHJcbn07XHJcblxyXG4vLyBNb2NrIGNvbnNvbGUuZXJyb3IgdG8gZmFpbCB0ZXN0c1xyXG5jb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcclxuICBpZiAoXHJcbiAgICAvV2FybmluZzogUmVhY3RET00ucmVuZGVyIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4gUmVhY3QgMTgvLnRlc3QoYXJnc1swXSkgfHxcclxuICAgIC9XYXJuaW5nOiBSZWFjdERPTS5oeWRyYXRlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4gUmVhY3QgMTgvLnRlc3QoYXJnc1swXSkgfHxcclxuICAgIC9XYXJuaW5nOiBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4gUmVhY3QgMTgvLnRlc3QoYXJnc1swXSlcclxuICApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgb3JpZ2luYWxFcnJvci5jYWxsKGNvbnNvbGUsIC4uLmFyZ3MpO1xyXG59O1xyXG5cclxuLy8gTW9jayBmZXRjaFxyXG5nbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCgpID0+XHJcbiAgUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7fSksXHJcbiAgICBvazogdHJ1ZSxcclxuICAgIHN0YXR1czogMjAwLFxyXG4gIH0pLFxyXG4pO1xyXG5cclxuLy8gTW9jayBXZWJTb2NrZXRcclxuZ2xvYmFsLldlYlNvY2tldCA9IGNsYXNzIHtcclxuICBjb25zdHJ1Y3Rvcih1cmwpIHtcclxuICAgIHRoaXMudXJsID0gdXJsO1xyXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gMDtcclxuICAgIHRoaXMub25tZXNzYWdlID0gbnVsbDtcclxuICAgIHRoaXMub25vcGVuID0gbnVsbDtcclxuICAgIHRoaXMub25jbG9zZSA9IG51bGw7XHJcbiAgICB0aGlzLm9uZXJyb3IgPSBudWxsO1xyXG4gIH1cclxuICBzZW5kKGRhdGEpIHt9XHJcbiAgY2xvc2UoKSB7fVxyXG59O1xyXG5cclxuLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBjbGFzcyB7XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG4gIG9ic2VydmUoKSB7fVxyXG4gIHVub2JzZXJ2ZSgpIHt9XHJcbiAgZGlzY29ubmVjdCgpIHt9XHJcbn07XHJcblxyXG4vLyBNb2NrIFJlc2l6ZU9ic2VydmVyXHJcbmdsb2JhbC5SZXNpemVPYnNlcnZlciA9IGNsYXNzIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgb2JzZXJ2ZSgpIHt9XHJcbiAgdW5vYnNlcnZlKCkge31cclxuICBkaXNjb25uZWN0KCkge31cclxufTtcclxuXHJcbi8vIE1vY2sgbWF0Y2hNZWRpYVxyXG5nbG9iYWwubWF0Y2hNZWRpYSA9XHJcbiAgZ2xvYmFsLm1hdGNoTWVkaWEgfHxcclxuICBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtYXRjaGVzOiBmYWxzZSxcclxuICAgICAgYWRkTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24gKCkge30sXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4vLyBGb3IgdGVzdHMgdGhhdCBuZWVkIGJyb3dzZXItc3BlY2lmaWMgQVBJc1xyXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gIGdsb2JhbC53aW5kb3cgPSB7fTtcclxuICBnbG9iYWwuZG9jdW1lbnQgPSB7XHJcbiAgICBjcmVhdGVFbGVtZW50OiAoKSA9PiAoe1xyXG4gICAgICBzdHlsZToge30sXHJcbiAgICAgIHNldEF0dHJpYnV0ZTogamVzdC5mbigpLFxyXG4gICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogamVzdC5mbigoKSA9PiBbXSksXHJcbiAgICAgIGFwcGVuZENoaWxkOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICAgIGdldEVsZW1lbnRCeUlkOiBqZXN0LmZuKCksXHJcbiAgICBxdWVyeVNlbGVjdG9yOiBqZXN0LmZuKCksXHJcbiAgICBxdWVyeVNlbGVjdG9yQWxsOiBqZXN0LmZuKCgpID0+IFtdKSxcclxuICAgIGRvY3VtZW50RWxlbWVudDogeyBzdHlsZToge30gfSxcclxuICB9O1xyXG59XHJcblxyXG4vLyBEZWZpbmUgcHJvcGVyIFJlYWN0IGNvbXBvbmVudHMgZm9yIGNvbnRleHQgcHJvdmlkZXJzXHJcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xyXG5cclxuLy8gQ3JlYXRlIGEgbW9yZSBmdW5jdGlvbmFsIEF1dGhDb250ZXh0IG1vY2tcclxuY2xhc3MgTW9ja1Byb3ZpZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcclxuICB9XHJcbn1cclxuXHJcbi8vIERlZmluZSBnbG9iYWwgbW9ja3MgZm9yIGNvbnRleHRzIHRoYXQgcHJvcGVybHkgaGFuZGxlIHByb3BzXHJcbmdsb2JhbC5BdXRoQ29udGV4dCA9IHtcclxuICBQcm92aWRlcjogTW9ja1Byb3ZpZGVyLFxyXG59O1xyXG5cclxuZ2xvYmFsLlNvY2tldENvbnRleHQgPSB7XHJcbiAgUHJvdmlkZXI6IE1vY2tQcm92aWRlcixcclxufTtcclxuXHJcbi8vIE1vY2sgUmVwb3J0Vmlld2VyIGNvbXBvbmVudCB3aXRoIGEgdmlydHVhbCBtb2R1bGVcclxuamVzdC5tb2NrKFxyXG4gIFwiY29tcG9uZW50cy9SZXBvcnRWaWV3ZXJcIixcclxuICAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBNb2NrUmVwb3J0Vmlld2VyKHByb3BzKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJkaXZcIiwgcHJvcHM6IHsgXCJkYXRhLXRlc3RpZFwiOiBcIm1vY2stcmVwb3J0LXZpZXdlclwiLCAuLi5wcm9wcyB9IH07XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgeyB2aXJ0dWFsOiB0cnVlIH0sXHJcbik7XHJcblxyXG4vLyBBbHNvIG1vY2sgd2l0aCB2YXJpb3VzIHBhdGggcGF0dGVybnNcclxuamVzdC5tb2NrKFxyXG4gIFwiLi9jb21wb25lbnRzL1JlcG9ydFZpZXdlclwiLFxyXG4gICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIE1vY2tSZXBvcnRWaWV3ZXIocHJvcHMpIHtcclxuICAgICAgICByZXR1cm4geyB0eXBlOiBcImRpdlwiLCBwcm9wczogeyBcImRhdGEtdGVzdGlkXCI6IFwibW9jay1yZXBvcnQtdmlld2VyXCIsIC4uLnByb3BzIH0gfTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICB7IHZpcnR1YWw6IHRydWUgfSxcclxuKTtcclxuXHJcbi8vIFByb3ZpZGUgbW9jayBmb3IgYW55IG1pc3NpbmcgcGF0aCBhbGlhc2VzXHJcbmplc3QubW9jayhcIkAvY29udGV4dHMvQXV0aENvbnRleHRcIiwgKCkgPT4gcmVxdWlyZShcIi4vX19tb2Nrc19fL2F1dGgtY29udGV4dC5qc1wiKSwge1xyXG4gIHZpcnR1YWw6IHRydWUsXHJcbn0pO1xyXG5qZXN0Lm1vY2soXCJAL2NvbXBvbmVudHMvY29tbW9uL0xvYWRpbmdTcGlubmVyXCIsICgpID0+IHJlcXVpcmUoXCIuL19fbW9ja3NfXy9Mb2FkaW5nU3Bpbm5lci5qc1wiKSwge1xyXG4gIHZpcnR1YWw6IHRydWUsXHJcbn0pO1xyXG5qZXN0Lm1vY2soXHJcbiAgXCJAL3V0aWxzL3ZhbGlkYXRpb25cIixcclxuICAoKSA9PiAoe1xyXG4gICAgdmFsaWRhdGVMb2dpbkRhdGE6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoeyBpc1ZhbGlkOiB0cnVlLCBlcnJvcnM6IHt9IH0pLFxyXG4gIH0pLFxyXG4gIHsgdmlydHVhbDogdHJ1ZSB9LFxyXG4pO1xyXG4iXSwibWFwcGluZ3MiOiJBQWtFQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTztFQUM3QkMsVUFBVSxFQUFFLElBQUk7RUFDaEJDLE9BQU8sRUFBRSxTQUFTQyxLQUFLQSxDQUFDQyxLQUFLLEVBQUU7SUFDN0IsT0FBTztNQUFFQyxJQUFJLEVBQUUsS0FBSztNQUFFRCxLQUFLLEVBQUFFLGFBQUEsS0FBT0YsS0FBSztJQUFHLENBQUM7RUFDN0M7QUFDRixDQUFDLENBQUMsQ0FBQzs7QUFFSDtBQUNBTCxXQUFBLEdBQUtDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxPQUFPO0VBQ25DTyxhQUFhLEVBQUVBLENBQUM7SUFBRUM7RUFBUyxDQUFDLEtBQUtBLFFBQVE7RUFDekNDLEtBQUssRUFBRUEsQ0FBQztJQUFFRDtFQUFTLENBQUMsS0FBS0EsUUFBUTtFQUNqQ0UsTUFBTSxFQUFFQSxDQUFDO0lBQUVGO0VBQVMsQ0FBQyxLQUFLQSxRQUFRO0VBQ2xDRyxJQUFJLEVBQUVBLENBQUM7SUFBRUgsUUFBUTtJQUFFSTtFQUFHLENBQUMsS0FBS0osUUFBUTtFQUNwQ0ssT0FBTyxFQUFFQSxDQUFDO0lBQUVMLFFBQVE7SUFBRUk7RUFBRyxDQUFDLEtBQUtKLFFBQVE7RUFDdkNNLFFBQVEsRUFBRUEsQ0FBQztJQUFFRjtFQUFHLENBQUMsS0FBSyxJQUFJO0VBQzFCRyxXQUFXLEVBQUVBLENBQUEsS0FBTUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUM1QkMsU0FBUyxFQUFFQSxDQUFBLE1BQU8sQ0FBQyxDQUFDLENBQUM7RUFDckJDLFdBQVcsRUFBRUEsQ0FBQSxNQUFPO0lBQUVDLFFBQVEsRUFBRSxHQUFHO0lBQUVDLE1BQU0sRUFBRSxFQUFFO0lBQUVDLElBQUksRUFBRSxFQUFFO0lBQUVDLEtBQUssRUFBRTtFQUFLLENBQUMsQ0FBQztFQUN6RUMsWUFBWSxFQUFFQSxDQUFDO0lBQUVoQjtFQUFTLENBQUMsS0FBS0E7QUFDbEMsQ0FBQyxDQUFDLENBQUM7O0FBRUg7QUFDQVQsV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU07RUFDdkIsTUFBTXlCLFNBQVMsR0FBRztJQUNoQkMsTUFBTSxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxNQUFNUSxTQUFTLENBQUM7SUFDaENFLEdBQUcsRUFBRVgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNkVyxJQUFJLEVBQUVaLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDZlksR0FBRyxFQUFFYixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2RhLE1BQU0sRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNqQmMsWUFBWSxFQUFFO01BQ1pDLE9BQU8sRUFBRTtRQUFFQyxHQUFHLEVBQUVqQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQUVpQixLQUFLLEVBQUVsQixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFFLENBQUM7TUFDN0NrQixRQUFRLEVBQUU7UUFBRUYsR0FBRyxFQUFFakIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUFFaUIsS0FBSyxFQUFFbEIsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBRTtJQUMvQyxDQUFDO0lBQ0RtQixRQUFRLEVBQUU7TUFBRUMsT0FBTyxFQUFFO0lBQUc7RUFDMUIsQ0FBQztFQUNELE9BQU9aLFNBQVM7QUFDbEIsQ0FBQyxDQUFDOztBQUVGO0FBQ0ExQixXQUFBLEdBQUtDLElBQUksQ0FBQyxXQUFXLEVBQUUsT0FBTztFQUM1QnNDLGdCQUFnQixFQUFFdEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsTUFBTXNCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO0lBQUVDLElBQUksRUFBRTtNQUFFQyxFQUFFLEVBQUU7SUFBSTtFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3ZFQyxNQUFNLEVBQUUzQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2pCMkIsT0FBTyxFQUFFNUIsSUFBSSxDQUFDQyxFQUFFLENBQUM7QUFDbkIsQ0FBQyxDQUFDLENBQUM7O0FBRUg7QUFDQWxCLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGlCQUFpQixFQUFFLE9BQU87RUFDbEM2QyxTQUFTLEVBQUVBLENBQUEsTUFBTztJQUNoQkMsSUFBSSxFQUFFOUIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNmOEIsT0FBTyxFQUFFL0IsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNsQitCLFFBQVEsRUFBRWhDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbkJnQyxJQUFJLEVBQUVqQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNoQixDQUFDLENBQUM7RUFDRmlDLFdBQVcsRUFBRUEsQ0FBQSxLQUFNLEVBQUU7RUFDckJDLGVBQWUsRUFBRUEsQ0FBQSxLQUFNLElBQUlDLGVBQWUsQ0FBQztBQUM3QyxDQUFDLENBQUMsQ0FBQzs7QUFFSDtBQUNBckQsV0FBQSxHQUFLQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsT0FBTztFQUNuQ3FELEVBQUUsRUFBRXJDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLE9BQU87SUFDakJxQyxFQUFFLEVBQUV0QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2JzQyxJQUFJLEVBQUV2QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2Z1QyxPQUFPLEVBQUV4QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCd0MsVUFBVSxFQUFFekMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7O0FBRUg7QUFDQWxCLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQU87RUFDakMwRCxZQUFZLEVBQUUxQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUMwQyxrQkFBa0IsQ0FBQyxPQUFPO0lBQ2hEbEIsSUFBSSxFQUFFO01BQ0ptQixVQUFVLEVBQUU1QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3JCNEMsUUFBUSxFQUFFN0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNuQlMsTUFBTSxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2pCNkMsTUFBTSxFQUFFOUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNqQmEsTUFBTSxFQUFFZCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBQ0Q4QyxPQUFPLEVBQUU7TUFDUEgsVUFBVSxFQUFFNUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNyQjRDLFFBQVEsRUFBRTdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDbkJTLE1BQU0sRUFBRVYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNqQjZDLE1BQU0sRUFBRTlDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDakJhLE1BQU0sRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUNEK0MsV0FBVyxFQUFFO01BQ1hKLFVBQVUsRUFBRTVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDckI0QyxRQUFRLEVBQUU3QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ25CUyxNQUFNLEVBQUVWLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDakI2QyxNQUFNLEVBQUU5QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2pCYSxNQUFNLEVBQUVkLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFDRGdELFlBQVksRUFBRTtNQUNaTCxVQUFVLEVBQUU1QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3JCNEMsUUFBUSxFQUFFN0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNuQlMsTUFBTSxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2pCNkMsTUFBTSxFQUFFOUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNqQmEsTUFBTSxFQUFFZCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUNsQjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDOztBQUVIOztBQW1IQTtBQUNBbEIsV0FBQSxHQUFLQyxJQUFJLENBQ1AseUJBQXlCLEVBQ3pCLE1BQU07RUFDSixPQUFPO0lBQ0xDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxPQUFPLEVBQUUsU0FBU2dFLGdCQUFnQkEsQ0FBQzlELEtBQUssRUFBRTtNQUN4QyxPQUFPO1FBQUVDLElBQUksRUFBRSxLQUFLO1FBQUVELEtBQUssRUFBQUUsYUFBQTtVQUFJLGFBQWEsRUFBRTtRQUFvQixHQUFLRixLQUFLO01BQUcsQ0FBQztJQUNsRjtFQUNGLENBQUM7QUFDSCxDQUFDLEVBQ0Q7RUFBRStELE9BQU8sRUFBRTtBQUFLLENBQ2xCLENBQUM7O0FBRUQ7QUFDQXBFLFdBQUEsR0FBS0MsSUFBSSxDQUNQLDJCQUEyQixFQUMzQixNQUFNO0VBQ0osT0FBTztJQUNMQyxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsT0FBTyxFQUFFLFNBQVNnRSxnQkFBZ0JBLENBQUM5RCxLQUFLLEVBQUU7TUFDeEMsT0FBTztRQUFFQyxJQUFJLEVBQUUsS0FBSztRQUFFRCxLQUFLLEVBQUFFLGFBQUE7VUFBSSxhQUFhLEVBQUU7UUFBb0IsR0FBS0YsS0FBSztNQUFHLENBQUM7SUFDbEY7RUFDRixDQUFDO0FBQ0gsQ0FBQyxFQUNEO0VBQUUrRCxPQUFPLEVBQUU7QUFBSyxDQUNsQixDQUFDOztBQUVEO0FBQ0FwRSxXQUFBLEdBQUtDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxNQUFNb0UsT0FBTyxDQUFDLDZCQUE2QixDQUFDLEVBQUU7RUFDaEZELE9BQU8sRUFBRTtBQUNYLENBQUMsQ0FBQztBQUNGcEUsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0NBQW9DLEVBQUUsTUFBTW9FLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxFQUFFO0VBQzlGRCxPQUFPLEVBQUU7QUFDWCxDQUFDLENBQUM7QUFDRnBFLFdBQUEsR0FBS0MsSUFBSSxDQUNQLG9CQUFvQixFQUNwQixPQUFPO0VBQ0xxRSxpQkFBaUIsRUFBRXJELElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ3FELGVBQWUsQ0FBQztJQUFFQyxPQUFPLEVBQUUsSUFBSTtJQUFFQyxNQUFNLEVBQUUsQ0FBQztFQUFFLENBQUM7QUFDNUUsQ0FBQyxDQUFDLEVBQ0Y7RUFBRUwsT0FBTyxFQUFFO0FBQUssQ0FDbEIsQ0FBQztBQUFDLElBQUFNLGVBQUEsR0FBQUwsT0FBQTtBQUFBLFNBQUFNLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBL0IsSUFBQSxDQUFBdUMsS0FBQSxDQUFBUixDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUF2RSxjQUFBcUUsQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVUsU0FBQSxDQUFBQyxNQUFBLEVBQUFYLENBQUEsVUFBQUMsQ0FBQSxXQUFBUyxTQUFBLENBQUFWLENBQUEsSUFBQVUsU0FBQSxDQUFBVixDQUFBLFFBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsT0FBQVcsT0FBQSxXQUFBWixDQUFBLElBQUFILGVBQUEsQ0FBQUUsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBRSxNQUFBLENBQUFXLHlCQUFBLEdBQUFYLE1BQUEsQ0FBQVksZ0JBQUEsQ0FBQWYsQ0FBQSxFQUFBRyxNQUFBLENBQUFXLHlCQUFBLENBQUFaLENBQUEsS0FBQUgsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQVcsT0FBQSxXQUFBWixDQUFBLElBQUFFLE1BQUEsQ0FBQWEsY0FBQSxDQUFBaEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBO0FBQUEsU0FBQTVFLFlBQUE7RUFBQTtJQUFBaUI7RUFBQSxJQUFBb0QsT0FBQTtFQUFBckUsV0FBQSxHQUFBQSxDQUFBLEtBQUFpQixJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBcFVGLE1BQU00RSxPQUFPLEdBQUd4QixPQUFPLENBQUMsY0FBYyxDQUFDOztBQUV2QztBQUNBd0IsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFVBQVUsR0FBR0YsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFVBQVUsSUFBSSxPQUFPO0FBQzFERixPQUFPLENBQUNDLEdBQUcsQ0FBQ0UsVUFBVSxHQUFHLGFBQWE7QUFDdENILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxXQUFXLEdBQUcsbUNBQW1DO0FBQzdESixPQUFPLENBQUNDLEdBQUcsQ0FBQ0ksZUFBZSxHQUFHLHNCQUFzQjtBQUNwREwsT0FBTyxDQUFDQyxHQUFHLENBQUNLLFlBQVksR0FBRyx1QkFBdUI7QUFFbEQsTUFBTTtFQUFFQyxXQUFXO0VBQUVDO0FBQVksQ0FBQyxHQUFHaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNwRGlDLE1BQU0sQ0FBQ0YsV0FBVyxHQUFHQSxXQUFXO0FBQ2hDRSxNQUFNLENBQUNELFdBQVcsR0FBR0EsV0FBVztBQUVoQ2hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQ2tDLE1BQU0sQ0FBQztFQUFFQyxJQUFJLEVBQUU7QUFBWSxDQUFDLENBQUM7QUFDL0NuQyxPQUFPLENBQUMsMkJBQTJCLENBQUM7O0FBRXBDO0FBQ0FwRCxJQUFJLENBQUN3RixVQUFVLENBQUMsTUFBTSxDQUFDOztBQUV2QjtBQUNBLE1BQU1DLGVBQWUsR0FBR2IsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFVBQVUsS0FBSyxNQUFNO0FBRXpELElBQUksQ0FBQ1csZUFBZSxFQUFFO0VBQ3BCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQywyREFBMkQsQ0FBQzs7RUFFeEU7RUFDQXZDLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQzs7RUFFL0M7RUFDQWlDLE1BQU0sQ0FBQ08sY0FBYyxHQUFHO0lBQ3RCcEQsT0FBTyxFQUFFeEMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNsQndDLFVBQVUsRUFBRXpDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDckI0RixLQUFLLEVBQUU3RixJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNqQixDQUFDO0FBQ0gsQ0FBQyxNQUFNO0VBVUw7RUFDQWxCLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPO0lBQzNCd0QsT0FBTyxFQUFFeEMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNsQjZGLFVBQVUsRUFBRTtNQUNWQyxLQUFLLEVBQUUvRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2hCcUMsRUFBRSxFQUFFdEMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNiK0YsSUFBSSxFQUFFaEcsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNmZ0csVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUNEQyxNQUFNLEVBQUVsRyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUMwQyxrQkFBa0IsQ0FBQyxPQUFPO01BQzFDd0QsS0FBSyxFQUFFbkcsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDbUcsY0FBYyxDQUFDLENBQUM7TUFDakNDLEdBQUcsRUFBRXJHLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ21HLGNBQWMsQ0FBQyxDQUFDO01BQy9CRSxHQUFHLEVBQUV0RyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNtRyxjQUFjLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDSEcsS0FBSyxFQUFFdkcsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDMEMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztFQUNoRCxDQUFDLENBQUMsQ0FBQztFQXhCSCtDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHNDQUFzQyxDQUFDOztFQUVuRDtFQUNBTixNQUFNLENBQUNPLGNBQWMsR0FBRztJQUN0QnBELE9BQU8sRUFBRXhDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDbEJ3QyxVQUFVLEVBQUV6QyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCNEYsS0FBSyxFQUFFN0YsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDakIsQ0FBQztBQWtCSDs7QUFFQTtBQUNBLE1BQU11RyxTQUFTLEdBQUdwRCxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDNUNvRCxTQUFTLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0FBeUd2QkMsU0FBUyxDQUFDLE1BQU07RUFDZDFHLElBQUksQ0FBQzJHLGFBQWEsQ0FBQyxDQUFDO0FBQ3RCLENBQUMsQ0FBQzs7QUFFRjtBQUNBLE1BQU1DLGFBQWEsR0FBR2xCLE9BQU8sQ0FBQ21CLEtBQUs7QUFDbkNuQixPQUFPLENBQUNtQixLQUFLLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLEtBQUs7RUFDM0IsSUFDRSw2REFBNkQsQ0FBQ0MsSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFDM0UscURBQXFELENBQUNDLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ25FO0lBQ0E7RUFDRjtFQUNBRixhQUFhLENBQUNJLElBQUksQ0FBQ3RCLE9BQU8sRUFBRSxHQUFHb0IsSUFBSSxDQUFDO0FBQ3RDLENBQUM7O0FBRUQ7QUFDQXBCLE9BQU8sQ0FBQ21CLEtBQUssR0FBRyxDQUFDLEdBQUdDLElBQUksS0FBSztFQUMzQixJQUNFLDZEQUE2RCxDQUFDQyxJQUFJLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUMzRSw4REFBOEQsQ0FBQ0MsSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFDNUUsNkVBQTZFLENBQUNDLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzNGO0lBQ0E7RUFDRjtFQUNBRixhQUFhLENBQUNJLElBQUksQ0FBQ3RCLE9BQU8sRUFBRSxHQUFHb0IsSUFBSSxDQUFDO0FBQ3RDLENBQUM7O0FBRUQ7QUFDQXpCLE1BQU0sQ0FBQzRCLEtBQUssR0FBR2pILElBQUksQ0FBQ0MsRUFBRSxDQUFDLE1BQ3JCc0IsT0FBTyxDQUFDQyxPQUFPLENBQUM7RUFDZDBGLElBQUksRUFBRUEsQ0FBQSxLQUFNM0YsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDL0IyRixFQUFFLEVBQUUsSUFBSTtFQUNSQyxNQUFNLEVBQUU7QUFDVixDQUFDLENBQ0gsQ0FBQzs7QUFFRDtBQUNBL0IsTUFBTSxDQUFDZ0MsU0FBUyxHQUFHLE1BQU07RUFDdkJDLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtJQUNmLElBQUksQ0FBQ0EsR0FBRyxHQUFHQSxHQUFHO0lBQ2QsSUFBSSxDQUFDdEIsVUFBVSxHQUFHLENBQUM7SUFDbkIsSUFBSSxDQUFDdUIsU0FBUyxHQUFHLElBQUk7SUFDckIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSTtJQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJO0lBQ25CLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUk7RUFDckI7RUFDQUMsSUFBSUEsQ0FBQ0MsSUFBSSxFQUFFLENBQUM7RUFDWjlCLEtBQUtBLENBQUEsRUFBRyxDQUFDO0FBQ1gsQ0FBQzs7QUFFRDtBQUNBVixNQUFNLENBQUN5QyxvQkFBb0IsR0FBRyxNQUFNO0VBQ2xDUixXQUFXQSxDQUFBLEVBQUcsQ0FBQztFQUNmUyxPQUFPQSxDQUFBLEVBQUcsQ0FBQztFQUNYQyxTQUFTQSxDQUFBLEVBQUcsQ0FBQztFQUNidkYsVUFBVUEsQ0FBQSxFQUFHLENBQUM7QUFDaEIsQ0FBQzs7QUFFRDtBQUNBNEMsTUFBTSxDQUFDNEMsY0FBYyxHQUFHLE1BQU07RUFDNUJYLFdBQVdBLENBQUEsRUFBRyxDQUFDO0VBQ2ZTLE9BQU9BLENBQUEsRUFBRyxDQUFDO0VBQ1hDLFNBQVNBLENBQUEsRUFBRyxDQUFDO0VBQ2J2RixVQUFVQSxDQUFBLEVBQUcsQ0FBQztBQUNoQixDQUFDOztBQUVEO0FBQ0E0QyxNQUFNLENBQUM2QyxVQUFVLEdBQ2Y3QyxNQUFNLENBQUM2QyxVQUFVLElBQ2pCLFlBQVk7RUFDVixPQUFPO0lBQ0xDLE9BQU8sRUFBRSxLQUFLO0lBQ2RDLFdBQVcsRUFBRSxTQUFBQSxDQUFBLEVBQVksQ0FBQyxDQUFDO0lBQzNCQyxjQUFjLEVBQUUsU0FBQUEsQ0FBQSxFQUFZLENBQUM7RUFDL0IsQ0FBQztBQUNILENBQUM7O0FBRUg7QUFDQSxJQUFJLE9BQU9DLE1BQU0sS0FBSyxXQUFXLEVBQUU7RUFDakNqRCxNQUFNLENBQUNpRCxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQ2xCakQsTUFBTSxDQUFDa0QsUUFBUSxHQUFHO0lBQ2hCQyxhQUFhLEVBQUVBLENBQUEsTUFBTztNQUNwQkMsS0FBSyxFQUFFLENBQUMsQ0FBQztNQUNUQyxZQUFZLEVBQUUxSSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ3ZCMEksb0JBQW9CLEVBQUUzSSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztNQUN2QzJJLFdBQVcsRUFBRTVJLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztJQUNGNEksY0FBYyxFQUFFN0ksSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN6QjZJLGFBQWEsRUFBRTlJLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDeEI4SSxnQkFBZ0IsRUFBRS9JLElBQUksQ0FBQ0MsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ25DK0ksZUFBZSxFQUFFO01BQUVQLEtBQUssRUFBRSxDQUFDO0lBQUU7RUFDL0IsQ0FBQztBQUNIOztBQUVBO0FBQ0EsTUFBTVEsS0FBSyxHQUFHN0YsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7QUFFOUI7QUFDQSxNQUFNOEYsWUFBWSxTQUFTRCxLQUFLLENBQUNFLFNBQVMsQ0FBQztFQUN6Q0MsTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxJQUFJLENBQUNoSyxLQUFLLENBQUNJLFFBQVE7RUFDNUI7QUFDRjs7QUFFQTtBQUNBNkYsTUFBTSxDQUFDZ0UsV0FBVyxHQUFHO0VBQ25CQyxRQUFRLEVBQUVKO0FBQ1osQ0FBQztBQUVEN0QsTUFBTSxDQUFDa0UsYUFBYSxHQUFHO0VBQ3JCRCxRQUFRLEVBQUVKO0FBQ1osQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==