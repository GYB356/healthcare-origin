{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_PaymentMethods","_jsxRuntime","_jsxFileName","React","__jsx","createElement","mockPaymentMethods","_id","cardType","lastFour","expiryMonth","expiryYear","billingName","isDefault","describe","test","render","jsx","default","paymentMethods","expect","screen","getByText","toBeInTheDocument","getAllByRole","toHaveLength","length","fireEvent","click","it"],"sources":["PaymentMethods.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport PaymentMethods from '../PaymentMethods';\n\nconst mockPaymentMethods = [\n  { _id: '1', cardType: 'Visa', lastFour: '1234', expiryMonth: '12', expiryYear: '2025', billingName: 'John Doe', isDefault: true },\n  { _id: '2', cardType: 'MasterCard', lastFour: '5678', expiryMonth: '11', expiryYear: '2024', billingName: 'Jane Doe', isDefault: false }\n];\n\ndescribe('PaymentMethods Component', () => {\n  test('renders without crashing', () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getByText('Payment Methods')).toBeInTheDocument();\n  });\n\n  test('displays the correct number of payment methods', () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getAllByRole('listitem')).toHaveLength(mockPaymentMethods.length);\n  });\n\n  test('displays payment method details correctly', () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getByText('Visa •••• 1234')).toBeInTheDocument();\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n  });\n\n  test('handles set default payment method', () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    fireEvent.click(screen.getByText('Set as Default'));\n    // Check if the default method is updated\n  });\n});\n\n// Test to check if PaymentMethods renders correctly with no payment methods\nit('renders no payment methods message when list is empty', () => {\n  render(<PaymentMethods paymentMethods={[]} />);\n  expect(screen.getByText(/no payment methods/i)).toBeInTheDocument();\n});\n\n// Test to check if PaymentMethods renders payment methods correctly\nit('renders payment methods correctly', () => {\n  const paymentMethods = [\n    { _id: '1', cardType: 'Visa', lastFour: '1234', expiryMonth: '12', expiryYear: '2023', billingName: 'John Doe' },\n    { _id: '2', cardType: 'Mastercard', lastFour: '5678', expiryMonth: '01', expiryYear: '2024', billingName: 'Jane Smith' }\n  ];\n  render(<PaymentMethods paymentMethods={paymentMethods} />);\n  expect(screen.getByText(/visa/i)).toBeInTheDocument();\n  expect(screen.getByText(/mastercard/i)).toBeInTheDocument();\n}); "],"mappings":"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","ignoreList":[]}