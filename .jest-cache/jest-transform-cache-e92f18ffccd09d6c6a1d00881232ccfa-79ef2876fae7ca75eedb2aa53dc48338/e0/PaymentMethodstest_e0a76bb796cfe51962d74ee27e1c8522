29b4b9d01b530db7ee022fc4d351a9b0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _PaymentMethods = _interopRequireDefault(require("../PaymentMethods"));
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\pages\\src\\components\\billing\\__tests__\\PaymentMethods.test.js";
import React from "react";
var __jsx = React.createElement;
const mockPaymentMethods = [{
  _id: '1',
  cardType: 'Visa',
  lastFour: '1234',
  expiryMonth: '12',
  expiryYear: '2025',
  billingName: 'John Doe',
  isDefault: true
}, {
  _id: '2',
  cardType: 'MasterCard',
  lastFour: '5678',
  expiryMonth: '11',
  expiryYear: '2024',
  billingName: 'Jane Doe',
  isDefault: false
}];
describe('PaymentMethods Component', () => {
  test('renders without crashing', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    expect(_react2.screen.getByText('Payment Methods')).toBeInTheDocument();
  });
  test('displays the correct number of payment methods', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    expect(_react2.screen.getAllByRole('listitem')).toHaveLength(mockPaymentMethods.length);
  });
  test('displays payment method details correctly', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    expect(_react2.screen.getByText('Visa •••• 1234')).toBeInTheDocument();
    expect(_react2.screen.getByText('John Doe')).toBeInTheDocument();
  });
  test('handles set default payment method', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods
    }));
    _react2.fireEvent.click(_react2.screen.getByText('Set as Default'));
    // Check if the default method is updated
  });
});

// Test to check if PaymentMethods renders correctly with no payment methods
it('renders no payment methods message when list is empty', () => {
  (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
    paymentMethods: []
  }));
  expect(_react2.screen.getByText(/no payment methods/i)).toBeInTheDocument();
});

// Test to check if PaymentMethods renders payment methods correctly
it('renders payment methods correctly', () => {
  const paymentMethods = [{
    _id: '1',
    cardType: 'Visa',
    lastFour: '1234',
    expiryMonth: '12',
    expiryYear: '2023',
    billingName: 'John Doe'
  }, {
    _id: '2',
    cardType: 'Mastercard',
    lastFour: '5678',
    expiryMonth: '01',
    expiryYear: '2024',
    billingName: 'Jane Smith'
  }];
  (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_PaymentMethods.default, {
    paymentMethods: paymentMethods
  }));
  expect(_react2.screen.getByText(/visa/i)).toBeInTheDocument();
  expect(_react2.screen.getByText(/mastercard/i)).toBeInTheDocument();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfUGF5bWVudE1ldGhvZHMiLCJfanN4UnVudGltZSIsIl9qc3hGaWxlTmFtZSIsIlJlYWN0IiwiX19qc3giLCJjcmVhdGVFbGVtZW50IiwibW9ja1BheW1lbnRNZXRob2RzIiwiX2lkIiwiY2FyZFR5cGUiLCJsYXN0Rm91ciIsImV4cGlyeU1vbnRoIiwiZXhwaXJ5WWVhciIsImJpbGxpbmdOYW1lIiwiaXNEZWZhdWx0IiwiZGVzY3JpYmUiLCJ0ZXN0IiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsInBheW1lbnRNZXRob2RzIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJnZXRBbGxCeVJvbGUiLCJ0b0hhdmVMZW5ndGgiLCJsZW5ndGgiLCJmaXJlRXZlbnQiLCJjbGljayIsIml0Il0sInNvdXJjZXMiOlsiUGF5bWVudE1ldGhvZHMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3QnO1xuaW1wb3J0IFBheW1lbnRNZXRob2RzIGZyb20gJy4uL1BheW1lbnRNZXRob2RzJztcblxuY29uc3QgbW9ja1BheW1lbnRNZXRob2RzID0gW1xuICB7IF9pZDogJzEnLCBjYXJkVHlwZTogJ1Zpc2EnLCBsYXN0Rm91cjogJzEyMzQnLCBleHBpcnlNb250aDogJzEyJywgZXhwaXJ5WWVhcjogJzIwMjUnLCBiaWxsaW5nTmFtZTogJ0pvaG4gRG9lJywgaXNEZWZhdWx0OiB0cnVlIH0sXG4gIHsgX2lkOiAnMicsIGNhcmRUeXBlOiAnTWFzdGVyQ2FyZCcsIGxhc3RGb3VyOiAnNTY3OCcsIGV4cGlyeU1vbnRoOiAnMTEnLCBleHBpcnlZZWFyOiAnMjAyNCcsIGJpbGxpbmdOYW1lOiAnSmFuZSBEb2UnLCBpc0RlZmF1bHQ6IGZhbHNlIH1cbl07XG5cbmRlc2NyaWJlKCdQYXltZW50TWV0aG9kcyBDb21wb25lbnQnLCAoKSA9PiB7XG4gIHRlc3QoJ3JlbmRlcnMgd2l0aG91dCBjcmFzaGluZycsICgpID0+IHtcbiAgICByZW5kZXIoPFBheW1lbnRNZXRob2RzIHBheW1lbnRNZXRob2RzPXttb2NrUGF5bWVudE1ldGhvZHN9IC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUGF5bWVudCBNZXRob2RzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Rpc3BsYXlzIHRoZSBjb3JyZWN0IG51bWJlciBvZiBwYXltZW50IG1ldGhvZHMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQYXltZW50TWV0aG9kcyBwYXltZW50TWV0aG9kcz17bW9ja1BheW1lbnRNZXRob2RzfSAvPik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2xpc3RpdGVtJykpLnRvSGF2ZUxlbmd0aChtb2NrUGF5bWVudE1ldGhvZHMubGVuZ3RoKTtcbiAgfSk7XG5cbiAgdGVzdCgnZGlzcGxheXMgcGF5bWVudCBtZXRob2QgZGV0YWlscyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxQYXltZW50TWV0aG9kcyBwYXltZW50TWV0aG9kcz17bW9ja1BheW1lbnRNZXRob2RzfSAvPik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1Zpc2Eg4oCi4oCi4oCi4oCiIDEyMzQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnSm9obiBEb2UnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnaGFuZGxlcyBzZXQgZGVmYXVsdCBwYXltZW50IG1ldGhvZCcsICgpID0+IHtcbiAgICByZW5kZXIoPFBheW1lbnRNZXRob2RzIHBheW1lbnRNZXRob2RzPXttb2NrUGF5bWVudE1ldGhvZHN9IC8+KTtcbiAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgnU2V0IGFzIERlZmF1bHQnKSk7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGRlZmF1bHQgbWV0aG9kIGlzIHVwZGF0ZWRcbiAgfSk7XG59KTtcblxuLy8gVGVzdCB0byBjaGVjayBpZiBQYXltZW50TWV0aG9kcyByZW5kZXJzIGNvcnJlY3RseSB3aXRoIG5vIHBheW1lbnQgbWV0aG9kc1xuaXQoJ3JlbmRlcnMgbm8gcGF5bWVudCBtZXRob2RzIG1lc3NhZ2Ugd2hlbiBsaXN0IGlzIGVtcHR5JywgKCkgPT4ge1xuICByZW5kZXIoPFBheW1lbnRNZXRob2RzIHBheW1lbnRNZXRob2RzPXtbXX0gLz4pO1xuICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvbm8gcGF5bWVudCBtZXRob2RzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xufSk7XG5cbi8vIFRlc3QgdG8gY2hlY2sgaWYgUGF5bWVudE1ldGhvZHMgcmVuZGVycyBwYXltZW50IG1ldGhvZHMgY29ycmVjdGx5XG5pdCgncmVuZGVycyBwYXltZW50IG1ldGhvZHMgY29ycmVjdGx5JywgKCkgPT4ge1xuICBjb25zdCBwYXltZW50TWV0aG9kcyA9IFtcbiAgICB7IF9pZDogJzEnLCBjYXJkVHlwZTogJ1Zpc2EnLCBsYXN0Rm91cjogJzEyMzQnLCBleHBpcnlNb250aDogJzEyJywgZXhwaXJ5WWVhcjogJzIwMjMnLCBiaWxsaW5nTmFtZTogJ0pvaG4gRG9lJyB9LFxuICAgIHsgX2lkOiAnMicsIGNhcmRUeXBlOiAnTWFzdGVyY2FyZCcsIGxhc3RGb3VyOiAnNTY3OCcsIGV4cGlyeU1vbnRoOiAnMDEnLCBleHBpcnlZZWFyOiAnMjAyNCcsIGJpbGxpbmdOYW1lOiAnSmFuZSBTbWl0aCcgfVxuICBdO1xuICByZW5kZXIoPFBheW1lbnRNZXRob2RzIHBheW1lbnRNZXRob2RzPXtwYXltZW50TWV0aG9kc30gLz4pO1xuICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvdmlzYS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL21hc3RlcmNhcmQvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG59KTsgIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFFLGVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUErQyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFBQSxJQUFBSSxZQUFBO0FBQUEsT0FBQUMsS0FBQTtBQUFBLElBQUFDLEtBQUEsR0FBQUQsS0FBQSxDQUFBRSxhQUFBO0FBRS9DLE1BQU1DLGtCQUFrQixHQUFHLENBQ3pCO0VBQUVDLEdBQUcsRUFBRSxHQUFHO0VBQUVDLFFBQVEsRUFBRSxNQUFNO0VBQUVDLFFBQVEsRUFBRSxNQUFNO0VBQUVDLFdBQVcsRUFBRSxJQUFJO0VBQUVDLFVBQVUsRUFBRSxNQUFNO0VBQUVDLFdBQVcsRUFBRSxVQUFVO0VBQUVDLFNBQVMsRUFBRTtBQUFLLENBQUMsRUFDakk7RUFBRU4sR0FBRyxFQUFFLEdBQUc7RUFBRUMsUUFBUSxFQUFFLFlBQVk7RUFBRUMsUUFBUSxFQUFFLE1BQU07RUFBRUMsV0FBVyxFQUFFLElBQUk7RUFBRUMsVUFBVSxFQUFFLE1BQU07RUFBRUMsV0FBVyxFQUFFLFVBQVU7RUFBRUMsU0FBUyxFQUFFO0FBQU0sQ0FBQyxDQUN6STtBQUVEQyxRQUFRLENBQUMsMEJBQTBCLEVBQUUsTUFBTTtFQUN6Q0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLE1BQU07SUFDckMsSUFBQUMsY0FBTSxlQUFDLElBQUFmLFdBQUEsQ0FBQWdCLEdBQUEsRUFBQ2pCLGVBQUEsQ0FBQWtCLE9BQWM7TUFBQ0MsY0FBYyxFQUFFYjtJQUFtQixDQUFFLENBQUMsQ0FB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