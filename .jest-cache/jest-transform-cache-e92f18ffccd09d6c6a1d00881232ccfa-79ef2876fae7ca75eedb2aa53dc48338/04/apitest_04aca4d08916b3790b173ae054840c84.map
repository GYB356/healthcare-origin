{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_axios","jest","describe","mockAxiosInstance","get","fn","post","put","delete","interceptors","request","use","response","beforeEach","clearAllMocks","axios","create","mockReturnValue","it","mockResponse","data","test","status","mockResolvedValueOnce","api","expect","toHaveBeenCalledWith","toEqual","mockData","mockError","Error","mockRejectedValueOnce","rejects","toThrow"],"sources":["api.test.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Mock axios\r\njest.mock('axios');\r\n\r\ndescribe('API Service', () => {\r\n  const mockAxiosInstance = {\r\n    get: jest.fn(),\r\n    post: jest.fn(),\r\n    put: jest.fn(),\r\n    delete: jest.fn(),\r\n    interceptors: {\r\n      request: { use: jest.fn() },\r\n      response: { use: jest.fn() }\r\n    }\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    (axios.create as jest.Mock).mockReturnValue(mockAxiosInstance);\r\n  });\r\n\r\n  it('should make GET request with correct parameters', async () => {\r\n    const mockResponse = { data: { test: 'data' }, status: 200 };\r\n    mockAxiosInstance.get.mockResolvedValueOnce(mockResponse);\r\n\r\n    const { api } = require('../../services/api');\r\n    const response = await api.get('/test');\r\n    \r\n    expect(mockAxiosInstance.get).toHaveBeenCalledWith('/test');\r\n    expect(response).toEqual(mockResponse);\r\n  });\r\n\r\n  it('should make POST request with correct parameters', async () => {\r\n    const mockData = { test: 'data' };\r\n    const mockResponse = { data: mockData, status: 200 };\r\n    mockAxiosInstance.post.mockResolvedValueOnce(mockResponse);\r\n\r\n    const { api } = require('../../services/api');\r\n    const response = await api.post('/test', mockData);\r\n    \r\n    expect(mockAxiosInstance.post).toHaveBeenCalledWith('/test', mockData);\r\n    expect(response).toEqual(mockResponse);\r\n  });\r\n\r\n  it('should make PUT request with correct parameters', async () => {\r\n    const mockData = { test: 'data' };\r\n    const mockResponse = { data: mockData, status: 200 };\r\n    mockAxiosInstance.put.mockResolvedValueOnce(mockResponse);\r\n\r\n    const { api } = require('../../services/api');\r\n    const response = await api.put('/test', mockData);\r\n    \r\n    expect(mockAxiosInstance.put).toHaveBeenCalledWith('/test', mockData);\r\n    expect(response).toEqual(mockResponse);\r\n  });\r\n\r\n  it('should make DELETE request with correct parameters', async () => {\r\n    const mockResponse = { data: null, status: 200 };\r\n    mockAxiosInstance.delete.mockResolvedValueOnce(mockResponse);\r\n\r\n    const { api } = require('../../services/api');\r\n    const response = await api.delete('/test');\r\n    \r\n    expect(mockAxiosInstance.delete).toHaveBeenCalledWith('/test');\r\n    expect(response).toEqual(mockResponse);\r\n  });\r\n\r\n  it('should handle errors correctly', async () => {\r\n    const mockError = new Error('Network error');\r\n    mockAxiosInstance.get.mockRejectedValueOnce(mockError);\r\n\r\n    const { api } = require('../../services/api');\r\n    await expect(api.get('/test')).rejects.toThrow('Network error');\r\n  });\r\n}); "],"mappings":"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","ignoreList":[]}