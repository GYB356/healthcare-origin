c76062922481576116ec586b3a544001
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseOS = exports.parseLSB = exports.isValidOs = exports.getOS = exports.isLinuxOS = exports.UNKNOWN = void 0;
const tslib_1 = require("tslib");
const os_1 = require("os");
const debug_1 = tslib_1.__importDefault(require("debug"));
const utils_1 = require("../utils");
const log = (0, debug_1.default)('MongoMS:getos');
/** Collection of Regexes for "lsb_release -a" parsing */
const LSBRegex = {
  // regex format is "lsb_release" (command output) and then "lsb-release" (file output)
  name: /^(?:distributor id:|DISTRIB_ID=)\s*(.*)$/im,
  codename: /^(?:codename:|DISTRIB_CODENAME=)\s*(.*)$/im,
  release: /^(?:release:|DISTRIB_RELEASE=)\s*(.*)$/im
};
/** Collection of Regexes for "/etc/os-release" parsing */
const OSRegex = {
  name: /^id\s*=\s*"?(\w*)"?$/im,
  codename: /^version_codename\s*=\s*(.*)$/im,
  release: /^version_id\s*=\s*"?(\d*(?:\.\d*)?)"?$/im,
  id_like: /^id_like\s*=\s*"?([\w\s]*)"?$/im
};
/** Helper Static so that a consistent UNKNOWN value is used */
exports.UNKNOWN = 'unknown';
/**
 * Check if the OS is a LinuxOS Typeguard
 * @param os The OS object to check for
 */
function isLinuxOS(os) {
  return os.os === 'linux';
}
exports.isLinuxOS = isLinuxOS;
/**
 * Cache the "getOS" call, so that not much has to be re-executed over and over
 */
let cachedOs;
/** Get an OS object */
async function getOS() {
  if (!cachedOs) {
    /** Node builtin function for first determinations */
    const osName = (0, os_1.platform)();
    // Linux is a special case.
    if (osName === 'linux') {
      cachedOs = await getLinuxInformation();
    } else {
      cachedOs = {
        os: osName
      };
    }
  }
  return cachedOs;
}
exports.getOS = getOS;
/** Function to outsource Linux Information Parsing */
async function getLinuxInformation() {
  // Structure of this function:
  // 1. get upstream release, if possible
  // 2. get os release (etc) because it has an "id_like"
  // 3. get os release (usr) because it has an "id_like"
  // 4. get lsb-release (etc) as fallback
  const upstreamLSB = await (0, utils_1.tryReleaseFile)('/etc/upstream-release/lsb-release', parseLSB);
  if (isValidOs(upstreamLSB)) {
    log('getLinuxInformation: Using UpstreamLSB');
    return upstreamLSB;
  }
  const etcOsRelease = await (0, utils_1.tryReleaseFile)('/etc/os-release', parseOS);
  if (isValidOs(etcOsRelease)) {
    log('getLinuxInformation: Using etcOsRelease');
    return etcOsRelease;
  }
  const usrOsRelease = await (0, utils_1.tryReleaseFile)('/usr/lib/os-release', parseOS);
  if (isValidOs(usrOsRelease)) {
    log('getLinuxInformation: Using usrOsRelease');
    return usrOsRelease;
  }
  const etcLSBRelease = await (0, utils_1.tryReleaseFile)('/etc/lsb-release', parseLSB);
  if (isValidOs(etcLSBRelease)) {
    log('getLinuxInformation: Using etcLSBRelease');
    return etcLSBRelease;
  }
  console.warn('Could not find any valid Release File, using fallback information');
  // if none has worked, return unknown
  return {
    os: 'linux',
    dist: exports.UNKNOWN,
    release: ''
  };
}
/**
 * Helper function to check if the input os is valid
 * @param os The OS information to check
 * @returns `true` if not undefined AND not UNKNOWN
 */
function isValidOs(os) {
  // helper for debugging
  if (os && os.dist === exports.UNKNOWN) {
    log('isValidOS: found defined os, but was unknown:', os);
  }
  return !(0, utils_1.isNullOrUndefined)(os) && os.dist !== exports.UNKNOWN;
}
exports.isValidOs = isValidOs;
/**
 * Parse LSB-like output (either command or file)
 */
function parseLSB(input) {
  return {
    os: 'linux',
    dist: input.match(LSBRegex.name)?.[1].toLocaleLowerCase() ?? exports.UNKNOWN,
    codename: input.match(LSBRegex.codename)?.[1].toLocaleLowerCase(),
    release: input.match(LSBRegex.release)?.[1].toLocaleLowerCase() ?? ''
  };
}
exports.parseLSB = parseLSB;
/**
 * Parse OSRelease-like output
 */
function parseOS(input) {
  return {
    os: 'linux',
    dist: input.match(OSRegex.name)?.[1].toLocaleLowerCase() ?? exports.UNKNOWN,
    codename: input.match(OSRegex.codename)?.[1].toLocaleLowerCase(),
    release: input.match(OSRegex.release)?.[1].toLocaleLowerCase() ?? '',
    id_like: input.match(OSRegex.id_like)?.[1].toLocaleLowerCase().split(' ')
  };
}
exports.parseOS = parseOS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvc18xIiwicmVxdWlyZSIsImRlYnVnXzEiLCJ0c2xpYl8xIiwiX19pbXBvcnREZWZhdWx0IiwidXRpbHNfMSIsImxvZyIsImRlZmF1bHQiLCJMU0JSZWdleCIsIm5hbWUiLCJjb2RlbmFtZSIsInJlbGVhc2UiLCJPU1JlZ2V4IiwiaWRfbGlrZSIsImV4cG9ydHMiLCJVTktOT1dOIiwiaXNMaW51eE9TIiwib3MiLCJjYWNoZWRPcyIsImdldE9TIiwib3NOYW1lIiwicGxhdGZvcm0iLCJnZXRMaW51eEluZm9ybWF0aW9uIiwidXBzdHJlYW1MU0IiLCJ0cnlSZWxlYXNlRmlsZSIsInBhcnNlTFNCIiwiaXNWYWxpZE9zIiwiZXRjT3NSZWxlYXNlIiwicGFyc2VPUyIsInVzck9zUmVsZWFzZSIsImV0Y0xTQlJlbGVhc2UiLCJjb25zb2xlIiwid2FybiIsImRpc3QiLCJpc051bGxPclVuZGVmaW5lZCIsImlucHV0IiwibWF0Y2giLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInNwbGl0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWwvZ2V0b3MvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFBQSxJQUFBLEdBQUFDLE9BQUE7QUFDQSxNQUFBQyxPQUFBLEdBQUFDLE9BQUEsQ0FBQUMsZUFBQSxDQUFBSCxPQUFBO0FBQ0EsTUFBQUksT0FBQSxHQUFBSixPQUFBO0FBRUEsTUFBTUssR0FBRyxHQUFHLElBQUFKLE9BQUEsQ0FBQUssT0FBSyxFQUFDLGVBQWUsQ0FBQztBQUVsQztBQUNBLE1BQU1DLFFBQVEsR0FBRztFQUNmO0VBQ0FDLElBQUksRUFBRSw0Q0FBNEM7RUFDbERDLFFBQVEsRUFBRSw0Q0FBNEM7RUFDdERDLE9BQU8sRUFBRTtDQUNWO0FBRUQ7QUFDQSxNQUFNQyxPQUFPLEdBQUc7RUFDZEgsSUFBSSxFQUFFLHdCQUF3QjtFQUM5QkMsUUFBUSxFQUFFLGlDQUFpQztFQUMzQ0MsT0FBTyxFQUFF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