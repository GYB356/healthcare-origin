e3fa33ab3b464c31c0644be293009c2e
"use strict";

// Mock axios
_getJestObj().mock('axios');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _axios = _interopRequireDefault(require("axios"));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('API Service', () => {
  const mockAxiosInstance = {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
    interceptors: {
      request: {
        use: jest.fn()
      },
      response: {
        use: jest.fn()
      }
    }
  };
  beforeEach(() => {
    jest.clearAllMocks();
    _axios.default.create.mockReturnValue(mockAxiosInstance);
  });
  it('should make GET request with correct parameters', async () => {
    const mockResponse = {
      data: {
        test: 'data'
      },
      status: 200
    };
    mockAxiosInstance.get.mockResolvedValueOnce(mockResponse);
    const {
      api
    } = require('../../services/api');
    const response = await api.get('/test');
    expect(mockAxiosInstance.get).toHaveBeenCalledWith('/test');
    expect(response).toEqual(mockResponse);
  });
  it('should make POST request with correct parameters', async () => {
    const mockData = {
      test: 'data'
    };
    const mockResponse = {
      data: mockData,
      status: 200
    };
    mockAxiosInstance.post.mockResolvedValueOnce(mockResponse);
    const {
      api
    } = require('../../services/api');
    const response = await api.post('/test', mockData);
    expect(mockAxiosInstance.post).toHaveBeenCalledWith('/test', mockData);
    expect(response).toEqual(mockResponse);
  });
  it('should make PUT request with correct parameters', async () => {
    const mockData = {
      test: 'data'
    };
    const mockResponse = {
      data: mockData,
      status: 200
    };
    mockAxiosInstance.put.mockResolvedValueOnce(mockResponse);
    const {
      api
    } = require('../../services/api');
    const response = await api.put('/test', mockData);
    expect(mockAxiosInstance.put).toHaveBeenCalledWith('/test', mockData);
    expect(response).toEqual(mockResponse);
  });
  it('should make DELETE request with correct parameters', async () => {
    const mockResponse = {
      data: null,
      status: 200
    };
    mockAxiosInstance.delete.mockResolvedValueOnce(mockResponse);
    const {
      api
    } = require('../../services/api');
    const response = await api.delete('/test');
    expect(mockAxiosInstance.delete).toHaveBeenCalledWith('/test');
    expect(response).toEqual(mockResponse);
  });
  it('should handle errors correctly', async () => {
    const mockError = new Error('Network error');
    mockAxiosInstance.get.mockRejectedValueOnce(mockError);
    const {
      api
    } = require('../../services/api');
    await expect(api.get('/test')).rejects.toThrow('Network error');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,