76b993cb2a470d9a772c2b1757463d18
"use strict";

var _vitest = require("vitest");
var _react = require("@testing-library/react");
var _medicalRecordSkeleton = require("@/components/skeletons/medical-record-skeleton");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\__tests__\\components\\skeletons\\medical-record-skeleton.test.tsx";
import React from "react";
var __jsx = React.createElement;
(0, _vitest.describe)('MedicalRecordSkeleton', () => {
  (0, _vitest.it)('should render a single skeleton', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_medicalRecordSkeleton.MedicalRecordSkeleton, {}));

    // Check for skeleton elements
    const skeletons = _react.screen.getAllByRole('status');
    (0, _vitest.expect)(skeletons.length).toBeGreaterThan(0);

    // Check for Card component
    const card = _react.screen.getByTestId('medical-record-skeleton');
    (0, _vitest.expect)(card).toBeInTheDocument();

    // Check for header and content sections
    (0, _vitest.expect)(_react.screen.getByTestId('skeleton-header')).toBeInTheDocument();
    (0, _vitest.expect)(_react.screen.getByTestId('skeleton-content')).toBeInTheDocument();
  });
  (0, _vitest.it)('should have appropriate ARIA attributes', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_medicalRecordSkeleton.MedicalRecordSkeleton, {}));
    const skeletons = _react.screen.getAllByRole('status');
    skeletons.forEach(skeleton => {
      (0, _vitest.expect)(skeleton).toHaveAttribute('aria-busy', 'true');
      (0, _vitest.expect)(skeleton).toHaveAttribute('aria-live', 'polite');
    });
  });
});
(0, _vitest.describe)('MedicalRecordListSkeleton', () => {
  (0, _vitest.it)('should render the specified number of skeletons', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_medicalRecordSkeleton.MedicalRecordListSkeleton, {
      count: 3
    }));
    const cards = _react.screen.getAllByTestId('medical-record-skeleton');
    (0, _vitest.expect)(cards).toHaveLength(3);
  });
  (0, _vitest.it)('should render default number of skeletons when count is not provided', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_medicalRecordSkeleton.MedicalRecordListSkeleton, {}));
    const cards = _react.screen.getAllByTestId('medical-record-skeleton');
    (0, _vitest.expect)(cards.length).toBeGreaterThan(0);
  });
  (0, _vitest.it)('should handle zero count', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_medicalRecordSkeleton.MedicalRecordListSkeleton, {
      count: 0
    }));
    const cards = _react.screen.queryAllByTestId('medical-record-skeleton');
    (0, _vitest.expect)(cards).toHaveLength(0);
  });
  (0, _vitest.it)('should handle negative count', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_medicalRecordSkeleton.MedicalRecordListSkeleton, {
      count: -1
    }));
    const cards = _react.screen.queryAllByTestId('medical-record-skeleton');
    (0, _vitest.expect)(cards).toHaveLength(0);
  });
  (0, _vitest.it)('should maintain consistent skeleton structure for each item', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_medicalRecordSkeleton.MedicalRecordListSkeleton, {
      count: 2
    }));
    const cards = _react.screen.getAllByTestId('medical-record-skeleton');
    cards.forEach(card => {
      (0, _vitest.expect)(card.querySelector('[data-testid="skeleton-header"]')).toBeInTheDocument();
      (0, _vitest.expect)(card.querySelector('[data-testid="skeleton-content"]')).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdml0ZXN0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9tZWRpY2FsUmVjb3JkU2tlbGV0b24iLCJfanN4UnVudGltZSIsIl9qc3hGaWxlTmFtZSIsIlJlYWN0IiwiX19qc3giLCJjcmVhdGVFbGVtZW50IiwiZGVzY3JpYmUiLCJpdCIsInJlbmRlciIsImpzeCIsIk1lZGljYWxSZWNvcmRTa2VsZXRvbiIsInNrZWxldG9ucyIsInNjcmVlbiIsImdldEFsbEJ5Um9sZSIsImV4cGVjdCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsImNhcmQiLCJnZXRCeVRlc3RJZCIsInRvQmVJblRoZURvY3VtZW50IiwiZm9yRWFjaCIsInNrZWxldG9uIiwidG9IYXZlQXR0cmlidXRlIiwiTWVkaWNhbFJlY29yZExpc3RTa2VsZXRvbiIsImNvdW50IiwiY2FyZHMiLCJnZXRBbGxCeVRlc3RJZCIsInRvSGF2ZUxlbmd0aCIsInF1ZXJ5QWxsQnlUZXN0SWQiLCJxdWVyeVNlbGVjdG9yIl0sInNvdXJjZXMiOlsibWVkaWNhbC1yZWNvcmQtc2tlbGV0b24udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICd2aXRlc3QnXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQge1xuICBNZWRpY2FsUmVjb3JkU2tlbGV0b24sXG4gIE1lZGljYWxSZWNvcmRMaXN0U2tlbGV0b24sXG59IGZyb20gJ0AvY29tcG9uZW50cy9za2VsZXRvbnMvbWVkaWNhbC1yZWNvcmQtc2tlbGV0b24nXG5cbmRlc2NyaWJlKCdNZWRpY2FsUmVjb3JkU2tlbGV0b24nLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgc2luZ2xlIHNrZWxldG9uJywgKCkgPT4ge1xuICAgIHJlbmRlcig8TWVkaWNhbFJlY29yZFNrZWxldG9uIC8+KVxuXG4gICAgLy8gQ2hlY2sgZm9yIHNrZWxldG9uIGVsZW1lbnRzXG4gICAgY29uc3Qgc2tlbGV0b25zID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnc3RhdHVzJylcbiAgICBleHBlY3Qoc2tlbGV0b25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApXG5cbiAgICAvLyBDaGVjayBmb3IgQ2FyZCBjb21wb25lbnRcbiAgICBjb25zdCBjYXJkID0gc2NyZWVuLmdldEJ5VGVzdElkKCdtZWRpY2FsLXJlY29yZC1za2VsZXRvbicpXG4gICAgZXhwZWN0KGNhcmQpLnRvQmVJblRoZURvY3VtZW50KClcblxuICAgIC8vIENoZWNrIGZvciBoZWFkZXIgYW5kIGNvbnRlbnQgc2VjdGlvbnNcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdza2VsZXRvbi1oZWFkZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NrZWxldG9uLWNvbnRlbnQnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgaGF2ZSBhcHByb3ByaWF0ZSBBUklBIGF0dHJpYnV0ZXMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxNZWRpY2FsUmVjb3JkU2tlbGV0b24gLz4pXG5cbiAgICBjb25zdCBza2VsZXRvbnMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdzdGF0dXMnKVxuICAgIHNrZWxldG9ucy5mb3JFYWNoKHNrZWxldG9uID0+IHtcbiAgICAgIGV4cGVjdChza2VsZXRvbikudG9IYXZlQXR0cmlidXRlKCdhcmlhLWJ1c3knLCAndHJ1ZScpXG4gICAgICBleHBlY3Qoc2tlbGV0b24pLnRvSGF2ZUF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ3BvbGl0ZScpXG4gICAgfSlcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdNZWRpY2FsUmVjb3JkTGlzdFNrZWxldG9uJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJlbmRlciB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBza2VsZXRvbnMnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxNZWRpY2FsUmVjb3JkTGlzdFNrZWxldG9uIGNvdW50PXszfSAvPilcblxuICAgIGNvbnN0IGNhcmRzID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKCdtZWRpY2FsLXJlY29yZC1za2VsZXRvbicpXG4gICAgZXhwZWN0KGNhcmRzKS50b0hhdmVMZW5ndGgoMylcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciBkZWZhdWx0IG51bWJlciBvZiBza2VsZXRvbnMgd2hlbiBjb3VudCBpcyBub3QgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxNZWRpY2FsUmVjb3JkTGlzdFNrZWxldG9uIC8+KVxuXG4gICAgY29uc3QgY2FyZHMgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoJ21lZGljYWwtcmVjb3JkLXNrZWxldG9uJylcbiAgICBleHBlY3QoY2FyZHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGhhbmRsZSB6ZXJvIGNvdW50JywgKCkgPT4ge1xuICAgIHJlbmRlcig8TWVkaWNhbFJlY29yZExpc3RTa2VsZXRvbiBjb3VudD17MH0gLz4pXG5cbiAgICBjb25zdCBjYXJkcyA9IHNjcmVlbi5xdWVyeUFsbEJ5VGVzdElkKCdtZWRpY2FsLXJlY29yZC1za2VsZXRvbicpXG4gICAgZXhwZWN0KGNhcmRzKS50b0hhdmVMZW5ndGgoMClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBuZWdhdGl2ZSBjb3VudCcsICgpID0+IHtcbiAgICByZW5kZXIoPE1lZGljYWxSZWNvcmRMaXN0U2tlbGV0b24gY291bnQ9ey0xfSAvPilcblxuICAgIGNvbnN0IGNhcmRzID0gc2NyZWVuLnF1ZXJ5QWxsQnlUZXN0SWQoJ21lZGljYWwtcmVjb3JkLXNrZWxldG9uJylcbiAgICBleHBlY3QoY2FyZHMpLnRvSGF2ZUxlbmd0aCgwKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgbWFpbnRhaW4gY29uc2lzdGVudCBza2VsZXRvbiBzdHJ1Y3R1cmUgZm9yIGVhY2ggaXRlbScsICgpID0+IHtcbiAgICByZW5kZXIoPE1lZGljYWxSZWNvcmRMaXN0U2tlbGV0b24gY291bnQ9ezJ9IC8+KVxuXG4gICAgY29uc3QgY2FyZHMgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoJ21lZGljYWwtcmVjb3JkLXNrZWxldG9uJylcbiAgICBjYXJkcy5mb3JFYWNoKGNhcmQgPT4ge1xuICAgICAgZXhwZWN0KGNhcmQucXVlcnlTZWxlY3RvcignW2RhdGEtdGVzdGlkPVwic2tlbGV0b24taGVhZGVyXCJdJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChjYXJkLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRlc3RpZD1cInNrZWxldG9uLWNvbnRlbnRcIl0nKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG4gIH0pXG59KSAiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsc0JBQUEsR0FBQUYsT0FBQTtBQUd1RCxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFBQSxJQUFBSSxZQUFBO0FBQUEsT0FBQUMsS0FBQTtBQUFBLElBQUFDLEtBQUEsR0FBQUQsS0FBQSxDQUFBRSxhQUFBO0FBRXZELElBQUFDLGdCQUFRLEVBQUMsdUJBQXVCLEVBQUUsTUFBTTtFQUN0QyxJQUFBQyxVQUFFLEVBQUMsaUNBQWlDLEVBQUUsTUFBTTtJQUMxQyxJQUFBQyxhQUFNLGVBQUMsSUFBQVAsV0FBQSxDQUFBUSxHQUFBLEVBQUNULHNCQUFBLENBQUFVLHFCQUFxQixJQUFFLENBQUMsQ0FBQzs7SUFFakM7SUFDQSxNQUFNQyxTQUFTLEdBQUdDLGFBQU0sQ0FBQ0MsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUMvQyxJQUFBQyxjQUFNLEVBQUNILFNBQVMsQ0FBQ0ksTUFBTSxDQUFDLENBQUNDLGVBQWUsQ0FBQyxDQUFDLENBQUM7O0lBRTNDO0lBQ0EsTUFBTUMsSUFBSSxHQUFHTCxhQUFNLENB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