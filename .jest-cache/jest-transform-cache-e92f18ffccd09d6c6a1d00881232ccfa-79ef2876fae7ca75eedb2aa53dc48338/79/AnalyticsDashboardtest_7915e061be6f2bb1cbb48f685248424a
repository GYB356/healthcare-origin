855ac7905ea1fb43c97dc2b234c44f0c
"use strict";

var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\components\\__tests__\\AnalyticsDashboard.test.js";
// Mock the modules
_getJestObj().mock('axios');
_getJestObj().mock('recharts', () => ({
  LineChart: () => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    "data-testid": "line-chart"
  }),
  Line: () => null,
  BarChart: () => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    "data-testid": "bar-chart"
  }),
  Bar: () => null,
  PieChart: () => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    "data-testid": "pie-chart"
  }),
  Pie: () => null,
  XAxis: () => null,
  YAxis: () => null,
  CartesianGrid: () => null,
  Tooltip: () => null,
  Legend: () => null,
  ResponsiveContainer: ({
    children
  }) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    children: children
  })
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../../context/AuthContext");
var _AnalyticsDashboard = _interopRequireDefault(require("../../pages/AnalyticsDashboard"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
import React from "react";
var __jsx = React.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('AnalyticsDashboard Component', () => {
  const mockData = {
    dashboard: {
      patientCount: 1000,
      appointmentCount: 500,
      telemedicineSessionCount: 200,
      activeDevices: 50
    },
    appointments: {
      total: 500,
      byStatus: {
        scheduled: 200,
        completed: 250,
        cancelled: 50
      },
      byMonth: {
        January: 100,
        February: 150,
        March: 250
      }
    },
    telemedicine: {
      total: 200,
      byStatus: {
        scheduled: 80,
        completed: 100,
        cancelled: 20
      },
      byDoctor: {
        'doctor-1': 50,
        'doctor-2': 75,
        'doctor-3': 75
      }
    }
  };
  const renderComponent = (role = 'admin') => {
    return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: {
            id: 'user-1',
            role
          },
          hasRole: () => role === 'admin'
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AnalyticsDashboard.default, {})
      })
    }));
  };
  beforeEach(() => {
    jest.clearAllMocks();
    Object.keys(mockData).forEach(key => {
      _axios.default.get.mockResolvedValueOnce({
        data: mockData[key]
      });
    });
  });
  it('renders access denied for unauthorized users', () => {
    renderComponent('doctor');
    expect(_react2.screen.getByText('Access Denied')).toBeInTheDocument();
  });
  it('loads and displays analytics data', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.get).toHaveBeenCalledWith('/api/analytics/dashboard');
      expect(_axios.default.get).toHaveBeenCalledWith('/api/analytics/appointments');
      expect(_axios.default.get).toHaveBeenCalledWith('/api/analytics/telemedicine');
    });
    expect(_react2.screen.getByText('1,000')).toBeInTheDocument();
    expect(_react2.screen.getByText('500')).toBeInTheDocument();
    expect(_react2.screen.getByText('200')).toBeInTheDocument();
    expect(_react2.screen.getByText('50')).toBeInTheDocument();
    expect(_react2.screen.getAllByTestId('line-chart')).toHaveLength(2);
    expect(_react2.screen.getByTestId('bar-chart')).toBeInTheDocument();
    expect(_react2.screen.getByTestId('pie-chart')).toBeInTheDocument();
  });
  it('allows changing timeframe', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Last Month')).toBeInTheDocument();
    });
    const timeframeSelect = _react2.screen.getByRole('combobox');
    _react2.fireEvent.change(timeframeSelect, {
      target: {
        value: 'week'
      }
    });
    expect(timeframeSelect.value).toBe('week');
  });
  it('handles error states', async () => {
    _axios.default.get.mockRejectedValueOnce(new Error('Failed to load analytics'));
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to load analytics data')).toBeInTheDocument();
    });
  });
  it('displays loading state', () => {
    renderComponent();
    expect(_react2.screen.getByText('Loading analytics...')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,