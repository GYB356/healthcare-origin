{"version":3,"names":["_vitest","require","_react","_medicalRecordSkeleton","_jsxRuntime","_jsxFileName","React","__jsx","createElement","describe","it","render","jsx","MedicalRecordSkeleton","skeletons","screen","getAllByRole","expect","length","toBeGreaterThan","card","getByTestId","toBeInTheDocument","forEach","skeleton","toHaveAttribute","MedicalRecordListSkeleton","count","cards","getAllByTestId","toHaveLength","queryAllByTestId","querySelector"],"sources":["medical-record-skeleton.test.tsx"],"sourcesContent":["import { describe, it, expect } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport {\n  MedicalRecordSkeleton,\n  MedicalRecordListSkeleton,\n} from '@/components/skeletons/medical-record-skeleton'\n\ndescribe('MedicalRecordSkeleton', () => {\n  it('should render a single skeleton', () => {\n    render(<MedicalRecordSkeleton />)\n\n    // Check for skeleton elements\n    const skeletons = screen.getAllByRole('status')\n    expect(skeletons.length).toBeGreaterThan(0)\n\n    // Check for Card component\n    const card = screen.getByTestId('medical-record-skeleton')\n    expect(card).toBeInTheDocument()\n\n    // Check for header and content sections\n    expect(screen.getByTestId('skeleton-header')).toBeInTheDocument()\n    expect(screen.getByTestId('skeleton-content')).toBeInTheDocument()\n  })\n\n  it('should have appropriate ARIA attributes', () => {\n    render(<MedicalRecordSkeleton />)\n\n    const skeletons = screen.getAllByRole('status')\n    skeletons.forEach(skeleton => {\n      expect(skeleton).toHaveAttribute('aria-busy', 'true')\n      expect(skeleton).toHaveAttribute('aria-live', 'polite')\n    })\n  })\n})\n\ndescribe('MedicalRecordListSkeleton', () => {\n  it('should render the specified number of skeletons', () => {\n    render(<MedicalRecordListSkeleton count={3} />)\n\n    const cards = screen.getAllByTestId('medical-record-skeleton')\n    expect(cards).toHaveLength(3)\n  })\n\n  it('should render default number of skeletons when count is not provided', () => {\n    render(<MedicalRecordListSkeleton />)\n\n    const cards = screen.getAllByTestId('medical-record-skeleton')\n    expect(cards.length).toBeGreaterThan(0)\n  })\n\n  it('should handle zero count', () => {\n    render(<MedicalRecordListSkeleton count={0} />)\n\n    const cards = screen.queryAllByTestId('medical-record-skeleton')\n    expect(cards).toHaveLength(0)\n  })\n\n  it('should handle negative count', () => {\n    render(<MedicalRecordListSkeleton count={-1} />)\n\n    const cards = screen.queryAllByTestId('medical-record-skeleton')\n    expect(cards).toHaveLength(0)\n  })\n\n  it('should maintain consistent skeleton structure for each item', () => {\n    render(<MedicalRecordListSkeleton count={2} />)\n\n    const cards = screen.getAllByTestId('medical-record-skeleton')\n    cards.forEach(card => {\n      expect(card.querySelector('[data-testid=\"skeleton-header\"]')).toBeInTheDocument()\n      expect(card.querySelector('[data-testid=\"skeleton-content\"]')).toBeInTheDocument()\n    })\n  })\n}) "],"mappings":"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","ignoreList":[]}