fa0a6bf8c67830cac90f80861c3ca24f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericMMSError = exports.UnknownLinuxDistro = exports.DownloadError = exports.UnknownVersionError = exports.UnexpectedCloseError = exports.StdoutInstanceError = exports.KnownVersionIncompatibilityError = exports.NoRegexMatchError = exports.ParseArchiveRegexError = exports.ReplsetCountLowError = exports.AssertionFallbackError = exports.BinaryNotFoundError = exports.InsufficientPermissionsError = exports.AuthNotObjectError = exports.KeyFileMissingError = exports.InstanceInfoError = exports.StartBinaryFailedError = exports.Md5CheckFailedError = exports.WaitForPrimaryTimeoutError = exports.UnknownArchitectureError = exports.UnknownPlatformError = exports.UnableToUnlockLockfileError = exports.UnknownLockfileStatusError = exports.StateError = void 0;
const utils_1 = require("./utils");
class StateError extends Error {
  constructor(wantedStates, gotState) {
    super(`Incorrect State for operation: "${gotState}", allowed States: "[${wantedStates.join(',')}]"\n` + 'This may be because of using a v6.x way of calling functions, look at the following guide if anything applies:\n' + 'https://typegoose.github.io/mongodb-memory-server/docs/guides/migration/migrate7#no-function-other-than-start-create-ensureinstance-will-be-starting-anything');
    this.wantedStates = wantedStates;
    this.gotState = gotState;
  }
}
exports.StateError = StateError;
class UnknownLockfileStatusError extends Error {
  constructor(status) {
    super(`Unknown LockFile Status: "${status}"`);
    this.status = status;
  }
}
exports.UnknownLockfileStatusError = UnknownLockfileStatusError;
class UnableToUnlockLockfileError extends Error {
  constructor(thisInstance, file) {
    super(`Cannot unlock file "${file}", because it is not locked by this ${thisInstance ? 'instance' : 'process'}`);
    this.thisInstance = thisInstance;
    this.file = file;
  }
}
exports.UnableToUnlockLockfileError = UnableToUnlockLockfileError;
class UnknownPlatformError extends Error {
  constructor(platform) {
    super(`Unknown Platform: "${platform}"`);
    this.platform = platform;
  }
}
exports.UnknownPlatformError = UnknownPlatformError;
class UnknownArchitectureError extends Error {
  constructor(arch, platform) {
    super();
    this.arch = arch;
    this.platform = platform;
    if (!(0, utils_1.isNullOrUndefined)(platform)) {
      this.message = `Unsupported Architecture-Platform combination: arch: "${arch}", platform: "${platform}"`;
    } else {
      this.message = `Unsupported Architecture: "${arch}"`;
    }
  }
}
exports.UnknownArchitectureError = UnknownArchitectureError;
class WaitForPrimaryTimeoutError extends Error {
  constructor(timeout, where) {
    super(`Timed out after ${timeout}ms while waiting for a Primary (where: "${where}")`);
    this.timeout = timeout;
    this.where = where;
  }
}
exports.WaitForPrimaryTimeoutError = WaitForPrimaryTimeoutError;
class Md5CheckFailedError extends Error {
  constructor(binarymd5, checkfilemd5) {
    super(`MD5 check failed! Binary MD5 is "${binarymd5}", Checkfile MD5 is "${checkfilemd5}"`);
    this.binarymd5 = binarymd5;
    this.checkfilemd5 = checkfilemd5;
  }
}
exports.Md5CheckFailedError = Md5CheckFailedError;
class StartBinaryFailedError extends Error {
  constructor(binary) {
    super(`Starting the Binary Failed (PID is undefined)! Binary: "${binary}"`);
    this.binary = binary;
  }
}
exports.StartBinaryFailedError = StartBinaryFailedError;
class InstanceInfoError extends Error {
  constructor(where) {
    super(`"instanceInfo" was undefined when expected to be defined! (where: "${where}")`);
    this.where = where;
  }
}
exports.InstanceInfoError = InstanceInfoError;
class KeyFileMissingError extends Error {
  constructor() {
    super(`"keyfileLocation" was undefined when expected!`);
  }
}
exports.KeyFileMissingError = KeyFileMissingError;
class AuthNotObjectError extends Error {
  constructor() {
    super('"auth" was not a object when it was expected!');
  }
}
exports.AuthNotObjectError = AuthNotObjectError;
class InsufficientPermissionsError extends Error {
  constructor(path) {
    super(`File "${path}" does not have the required Permissions, required Permissions: "--x"`);
    this.path = path;
  }
}
exports.InsufficientPermissionsError = InsufficientPermissionsError;
class BinaryNotFoundError extends Error {
  constructor(path, extra = '') {
    super(`No Binary at path "${path}" was found! (ENOENT)${extra}`);
    this.path = path;
    this.extra = extra;
  }
}
exports.BinaryNotFoundError = BinaryNotFoundError;
/**
 * Custom Fallback Error for "utils.assertion", it is a named/custom Error to confuse less in the stacktrace
 */
class AssertionFallbackError extends Error {
  constructor() {
    super('Assert failed - no custom error');
  }
}
exports.AssertionFallbackError = AssertionFallbackError;
class ReplsetCountLowError extends Error {
  constructor(count) {
    super(`ReplSet Count needs to be 1 or higher! (specified count: "${count}")`);
    this.count = count;
  }
}
exports.ReplsetCountLowError = ReplsetCountLowError;
class ParseArchiveRegexError extends Error {
  constructor(key) {
    super(`Expected "${key}" to be found in regex groups`);
    this.key = key;
  }
}
exports.ParseArchiveRegexError = ParseArchiveRegexError;
class NoRegexMatchError extends Error {
  constructor(name, extra) {
    super();
    this.name = name;
    this.extra = extra;
    const addExtra = !!extra ? `(${extra})` : '';
    this.message = `Expected "${name}" to have Regex Matches${addExtra}`;
  }
}
exports.NoRegexMatchError = NoRegexMatchError;
class KnownVersionIncompatibilityError extends Error {
  constructor(dist, requested_version, available_versions, extra) {
    super();
    this.dist = dist;
    this.requested_version = requested_version;
    this.available_versions = available_versions;
    this.extra = extra;
    const addExtra = !!extra ? `\n${extra}` : '';
    this.message = `Requested Version "${requested_version}" is not available for "${dist}"! Available Versions: "${available_versions}"${addExtra}`;
  }
}
exports.KnownVersionIncompatibilityError = KnownVersionIncompatibilityError;
/**
 * Basic Error wrapper for "instanceError" events from "stdoutHandler"
 */
class StdoutInstanceError extends Error {
  // not using "public variable: type", because it is a basic wrapper for "Error"
  constructor(msg) {
    super(msg);
  }
}
exports.StdoutInstanceError = StdoutInstanceError;
/**
 * Error for when the instance closes with non-0 (or non-12) codes or signals
 */
class UnexpectedCloseError extends Error {
  constructor(code, signal) {
    super();
    this.message = `Instance closed unexpectedly with code "${code}" and signal "${signal}"`;
    if (signal == 'SIGILL') {
      this.message += '\nThe Process Exited with SIGILL, which mean illegal instruction, which is commonly thrown in mongodb 5.0+ when not having AVX available on the CPU';
    }
    if (process.platform === 'win32' && (code ?? 0) > 1000000000) {
      this.message += '\nExit Code is large, commonly meaning that vc_redist is not installed, the latest vc_redist can be found at https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170';
    }
  }
}
exports.UnexpectedCloseError = UnexpectedCloseError;
/**
 * Error for when VERSION fails to coerce to a semver version but is required
 */
class UnknownVersionError extends Error {
  constructor(version) {
    super(`Could not coerce VERSION to a semver version (version: "${version}")`);
    this.version = version;
  }
}
exports.UnknownVersionError = UnknownVersionError;
/**
 * Error for when downloading fails
 */
class DownloadError extends Error {
  constructor(url, msg) {
    super(`Download failed for url \"${url}\", Details:\n${msg}`);
    this.url = url;
    this.msg = msg;
  }
}
exports.DownloadError = DownloadError;
/**
 * Error for when the linux distro is unknown
 */
class UnknownLinuxDistro extends Error {
  constructor(distro, id_like) {
    super(`Unknown/unsupported linux "${distro}" id_like's: [${id_like?.join(', ')}]`);
    this.distro = distro;
    this.id_like = id_like;
  }
}
exports.UnknownLinuxDistro = UnknownLinuxDistro;
/* Custom Generic Error class for MMS */
class GenericMMSError extends Error {}
exports.GenericMMSError = GenericMMSError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlsc18xIiwicmVxdWlyZSIsIlN0YXRlRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwid2FudGVkU3RhdGVzIiwiZ290U3RhdGUiLCJqb2luIiwiZXhwb3J0cyIsIlVua25vd25Mb2NrZmlsZVN0YXR1c0Vycm9yIiwic3RhdHVzIiwiVW5hYmxlVG9VbmxvY2tMb2NrZmlsZUVycm9yIiwidGhpc0luc3RhbmNlIiwiZmlsZSIsIlVua25vd25QbGF0Zm9ybUVycm9yIiwicGxhdGZvcm0iLCJVbmtub3duQXJjaGl0ZWN0dXJlRXJyb3IiLCJhcmNoIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJtZXNzYWdlIiwiV2FpdEZvclByaW1hcnlUaW1lb3V0RXJyb3IiLCJ0aW1lb3V0Iiwid2hlcmUiLCJNZDVDaGVja0ZhaWxlZEVycm9yIiwiYmluYXJ5bWQ1IiwiY2hlY2tmaWxlbWQ1IiwiU3RhcnRCaW5hcnlGYWlsZWRFcnJvciIsImJpbmFyeSIsIkluc3RhbmNlSW5mb0Vycm9yIiwiS2V5RmlsZU1pc3NpbmdFcnJvciIsIkF1dGhOb3RPYmplY3RFcnJvciIsIkluc3VmZmljaWVudFBlcm1pc3Npb25zRXJyb3IiLCJwYXRoIiwiQmluYXJ5Tm90Rm91bmRFcnJvciIsImV4dHJhIiwiQXNzZXJ0aW9uRmFsbGJhY2tFcnJvciIsIlJlcGxzZXRDb3VudExvd0Vycm9yIiwiY291bnQiLCJQYXJzZUFyY2hpdmVSZWdleEVycm9yIiwia2V5IiwiTm9SZWdleE1hdGNoRXJyb3IiLCJuYW1lIiwiYWRkRXh0cmEiLCJLbm93blZlcnNpb25JbmNvbXBhdGliaWxpdHlFcnJvciIsImRpc3QiLCJyZXF1ZXN0ZWRfdmVyc2lvbiIsImF2YWlsYWJsZV92ZXJzaW9ucyIsIlN0ZG91dEluc3RhbmNlRXJyb3IiLCJtc2ciLCJVbmV4cGVjdGVkQ2xvc2VFcnJvciIsImNvZGUiLCJzaWduYWwiLCJwcm9jZXNzIiwiVW5rbm93blZlcnNpb25FcnJvciIsInZlcnNpb24iLCJEb3dubG9hZEVycm9yIiwidXJsIiwiVW5rbm93bkxpbnV4RGlzdHJvIiwiZGlzdHJvIiwiaWRfbGlrZSIsIkdlbmVyaWNNTVNFcnJvciJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Vycm9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBRUEsTUFBYUMsVUFBVyxTQUFRQyxLQUFLO0VBQ25DQyxZQUNTQyxZQUFzQixFQUN0QkMsUUFBZ0I7SUFFdkIsS0FBSyxDQUNILG1DQUFtQ0EsUUFBUSx3QkFBd0JELFlBQVksQ0FBQ0UsSUFBSSxDQUNsRixHQUFHLENBQ0osTUFBTSxHQUNMLGtIQUFrSCxHQUNsSCwrSkFBK0osQ0FDbEs7SUFUTSxLQUFBRixZQUFZLEdBQVpBLFlBQVk7SUFDWixLQUFBQyxRQUFRLEdBQVJBLFFBQVE7RUFTakI7O0FBWkZFLE9BQUEsQ0FBQU4sVUFBQSxHQUFBQSxVQUFBO0FBZUEsTUFBYU8sMEJBQTJCLFNBQVFOLEtBQUs7RUFDbkRDLFlBQW1CTSxNQUFjO0lBQy9CLEtBQUssQ0FBQyw2QkFBNkJBLE1BQU0sR0FBRyxDQUFDO0lBRDVCLEtBQUFBLE1BQU0sR0FBTkEsTUFBTTtFQUV6Qjs7QUFIRkYsT0FBQSxDQUFBQywwQkFBQSxHQUFBQSwwQkFBQTtBQU1BLE1BQWFFLDJCQUE0QixTQUFRUixLQUFLO0VBQ3BEQyxZQUNTUSxZQUFxQixFQUNyQkMsSUFBWTtJQUVuQixLQUFLLENBQ0gsdUJBQXVCQSxJQUFJLHVDQUN6QkQsWUFBWSxHQUFHLFVBQVUsR0FBRyxTQUM5QixFQUFFLENBQ0g7SUFQTSxLQUFBQSxZQUFZLEdBQVpBLFlBQVk7SUFDWixLQUFBQyxJQUFJLEdBQUpBLElBQUk7RUFPYjs7QUFWRkwsT0FBQSxDQUFBRywyQkFBQSxHQUFBQSwyQkFBQTtBQWFBLE1BQWFHLG9CQUFxQixTQUFRWCxLQUFLO0VBQzdDQyxZQUFtQlcsUUFBZ0I7SUFDakMsS0FBSyxDQUFDLHNCQUFzQkEsUUFBUSxHQUFH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