df19ad425987ec3d70c6a8b77d54433f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _InvoiceList = _interopRequireDefault(require("../InvoiceList"));
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\pages\\src\\components\\billing\\__tests__\\InvoiceList.test.js";
var __jsx = _react.default.createElement;
const mockInvoices = [{
  id: '1',
  number: 'INV-001',
  patient: 'John Doe',
  amount: 100,
  status: 'Paid'
}, {
  id: '2',
  number: 'INV-002',
  patient: 'Jane Smith',
  amount: 200,
  status: 'Pending'
}];
describe("InvoiceList Component", () => {
  test("renders without crashing", () => {
    (0, _react2.render)(__jsx(_InvoiceList.default, {
      invoices: mockInvoices,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 13,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText("Invoices")).toBeInTheDocument();
  });
  test("displays the correct number of invoices", () => {
    (0, _react2.render)(__jsx(_InvoiceList.default, {
      invoices: mockInvoices,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 18,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getAllByRole("row")).toHaveLength(mockInvoices.length + 1); // +1 for the header row
  });
  test("renders invoice list correctly", async () => {
    (0, _react2.render)(__jsx(_InvoiceList.default, {
      invoices: mockInvoices,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 23,
        columnNumber: 12
      }
    }));

    // Check if the table exists
    await (0, _react2.waitFor)(() => expect(_react2.screen.getByRole('table')).toBeInTheDocument());

    // Query table rows
    const rows = await (0, _react2.waitFor)(() => _react2.screen.getAllByRole('row'));
    expect(rows).toHaveLength(mockInvoices.length + 1); // +1 for the header row

    // Check invoice details
    expect(_react2.screen.getByText('INV-001')).toBeInTheDocument();
    expect(_react2.screen.getByText('John Doe')).toBeInTheDocument();
    expect(_react2.screen.getByText('$100')).toBeInTheDocument();
    expect(_react2.screen.getByText('Paid')).toBeInTheDocument();
  });
});

// Test to check if InvoiceList renders correctly with no invoices
it("renders no invoices message when invoice list is empty", async () => {
  (0, _react2.render)(__jsx(_InvoiceList.default, {
    invoices: [],
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText('No invoices found')).toBeInTheDocument();
});

// Test to check if InvoiceList renders invoices correctly
it("renders invoices correctly", () => {
  const invoices = [{
    _id: "1",
    number: "INV-001",
    amount: 100,
    dueDate: "2023-12-31"
  }, {
    _id: "2",
    number: "INV-002",
    amount: 200,
    dueDate: "2024-01-15"
  }];
  (0, _react2.render)(__jsx(_InvoiceList.default, {
    invoices: invoices,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText(/inv-001/i)).toBeInTheDocument();
  expect(_react2.screen.getByText(/inv-002/i)).toBeInTheDocument();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfSW52b2ljZUxpc3QiLCJfanN4RmlsZU5hbWUiLCJfX2pzeCIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwibW9ja0ludm9pY2VzIiwiaWQiLCJudW1iZXIiLCJwYXRpZW50IiwiYW1vdW50Iiwic3RhdHVzIiwiZGVzY3JpYmUiLCJ0ZXN0IiwicmVuZGVyIiwiaW52b2ljZXMiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwiZ2V0QWxsQnlSb2xlIiwidG9IYXZlTGVuZ3RoIiwibGVuZ3RoIiwid2FpdEZvciIsImdldEJ5Um9sZSIsInJvd3MiLCJpdCIsIl9pZCIsImR1ZURhdGUiXSwic291cmNlcyI6WyJJbnZvaWNlTGlzdC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCB3YWl0Rm9yIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xuaW1wb3J0IEludm9pY2VMaXN0IGZyb20gXCIuLi9JbnZvaWNlTGlzdFwiO1xuXG5jb25zdCBtb2NrSW52b2ljZXMgPSBbXG4gIHsgaWQ6ICcxJywgbnVtYmVyOiAnSU5WLTAwMScsIHBhdGllbnQ6ICdKb2huIERvZScsIGFtb3VudDogMTAwLCBzdGF0dXM6ICdQYWlkJyB9LFxuICB7IGlkOiAnMicsIG51bWJlcjogJ0lOVi0wMDInLCBwYXRpZW50OiAnSmFuZSBTbWl0aCcsIGFtb3VudDogMjAwLCBzdGF0dXM6ICdQZW5kaW5nJyB9LFxuXTtcblxuZGVzY3JpYmUoXCJJbnZvaWNlTGlzdCBDb21wb25lbnRcIiwgKCkgPT4ge1xuICB0ZXN0KFwicmVuZGVycyB3aXRob3V0IGNyYXNoaW5nXCIsICgpID0+IHtcbiAgICByZW5kZXIoPEludm9pY2VMaXN0IGludm9pY2VzPXttb2NrSW52b2ljZXN9IC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIkludm9pY2VzXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICB0ZXN0KFwiZGlzcGxheXMgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIGludm9pY2VzXCIsICgpID0+IHtcbiAgICByZW5kZXIoPEludm9pY2VMaXN0IGludm9pY2VzPXttb2NrSW52b2ljZXN9IC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEFsbEJ5Um9sZShcInJvd1wiKSkudG9IYXZlTGVuZ3RoKG1vY2tJbnZvaWNlcy5sZW5ndGggKyAxKTsgLy8gKzEgZm9yIHRoZSBoZWFkZXIgcm93XG4gIH0pO1xuXG4gIHRlc3QoXCJyZW5kZXJzIGludm9pY2UgbGlzdCBjb3JyZWN0bHlcIiwgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8SW52b2ljZUxpc3QgaW52b2ljZXM9e21vY2tJbnZvaWNlc30gLz4pO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIHRoZSB0YWJsZSBleGlzdHNcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCd0YWJsZScpKS50b0JlSW5UaGVEb2N1bWVudCgpKTtcblxuICAgIC8vIFF1ZXJ5IHRhYmxlIHJvd3NcbiAgICBjb25zdCByb3dzID0gYXdhaXQgd2FpdEZvcigoKSA9PiBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdyb3cnKSk7XG4gICAgZXhwZWN0KHJvd3MpLnRvSGF2ZUxlbmd0aChtb2NrSW52b2ljZXMubGVuZ3RoICsgMSk7IC8vICsxIGZvciB0aGUgaGVhZGVyIHJvd1xuXG4gICAgLy8gQ2hlY2sgaW52b2ljZSBkZXRhaWxzXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0lOVi0wMDEnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnSm9obiBEb2UnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnJDEwMCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdQYWlkJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xufSk7XG5cbi8vIFRlc3QgdG8gY2hlY2sgaWYgSW52b2ljZUxpc3QgcmVuZGVycyBjb3JyZWN0bHkgd2l0aCBubyBpbnZvaWNlc1xuaXQoXCJyZW5kZXJzIG5vIGludm9pY2VzIG1lc3NhZ2Ugd2hlbiBpbnZvaWNlIGxpc3QgaXMgZW1wdHlcIiwgYXN5bmMgKCkgPT4ge1xuICByZW5kZXIoPEludm9pY2VMaXN0IGludm9pY2VzPXtbXX0gLz4pO1xuICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTm8gaW52b2ljZXMgZm91bmQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbn0pO1xuXG4vLyBUZXN0IHRvIGNoZWNrIGlmIEludm9pY2VMaXN0IHJlbmRlcnMgaW52b2ljZXMgY29ycmVjdGx5XG5pdChcInJlbmRlcnMgaW52b2ljZXMgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgY29uc3QgaW52b2ljZXMgPSBbXG4gICAgeyBfaWQ6IFwiMVwiLCBudW1iZXI6IFwiSU5WLTAwMVwiLCBhbW91bnQ6IDEwMCwgZHVlRGF0ZTogXCIyMDIzLTEyLTMxXCIgfSxcbiAgICB7IF9pZDogXCIyXCIsIG51bWJlcjogXCJJTlYtMDAyXCIsIGFtb3VudDogMjAwLCBkdWVEYXRlOiBcIjIwMjQtMDEtMTVcIiB9LFxuICBdO1xuICByZW5kZXIoPEludm9pY2VMaXN0IGludm9pY2VzPXtpbnZvaWNlc30gLz4pO1xuICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvaW52LTAwMS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2ludi0wMDIvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBeUMsSUFBQUcsWUFBQTtBQUFBLElBQUFDLEtBQUEsR0FBQU4sTUFBQSxDQUFBTyxPQUFBLENBQUFDLGFBQUE7QUFFekMsTUFBTUMsWUFBWSxHQUFHLENBQ25CO0VBQUVDLEVBQUUsRUFBRSxHQUFHO0VBQUVDLE1BQU0sRUFBRSxTQUFTO0VBQUVDLE9BQU8sRUFBRSxVQUFVO0VBQUVDLE1BQU0sRUFBRSxHQUFHO0VBQUVDLE1BQU0sRUFBRTtBQUFPLENBQUMsRUFDaEY7RUFBRUosRUFBRSxFQUFFLEdBQUc7RUFBRUMsTUFBTSxFQUFFLFNBQVM7RUFBRUMsT0FBTyxFQUFFLFlBQVk7RUFBRUMsTUFBTSxFQUFFLEdBQUc7RUFBRUMsTUFBTSxFQUFFO0FBQVUsQ0FBQyxDQUN0RjtBQUVEQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsTUFBTTtFQUN0Q0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLE1BQU07SUFDckMsSUFBQUMsY0FBTSxFQUFDWCxLQUFBLENBQUNGLFlBQUEsQ0FBQUcsT0FBVztNQUFDVyxRQUFRLEVBQUVULFlBQWE7TUFBQVUsTUFBQTtNQUFBQyxRQUFBO1FBQUFDLFFBQUEsRUFBQWhCLFlBQUE7UUFBQWlCLFVBQUE7UUFBQUMsWUFBQTtNQUFBO0lBQUEsQ0FBRSxDQUFDLENBQUM7SUFDL0NDLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUMxRCxDQUFDLENBQUM7RUFFRlgsSUFBSSxDQUFDLHlDQUF5QyxFQUFFLE1BQU07SUFDcEQsSUFBQUMsY0FBTSxFQUFDWCxLQUFBLENBQUNGLFlBQUEsQ0FBQUcsT0FBVztNQUFDVyxRQUFRLEVBQUVULFlBQWE7TUFBQVUsTUFBQTtNQUFBQyxRQUFBO1FBQUFDLFFBQUEsRUFBQWhCLFlBQUE7UUFBQWlCLFVBQUE7UUFBQUMsWUFBQTtNQUFBO0lBQUEsQ0FBRSxDQUFDLENBQUM7SUFDL0NDLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQ0MsWUFBWSxDQUFDcEIsWUFBWSxDQUFDcUIsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUUsQ0FBQyxDQUFDO0VBRUZkLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFZO0lBQ2pELElBQUFDLGNBQU0sRUFBQ1gsS0FBQSxDQUFDRixZQUFBLENBQUFHLE9BQVc7TUFBQ1csUUFBUSxFQUFFVCxZQUFhO01BQUFVLE1BQUE7TUFBQUMsUUFBQTtRQUFBQyxRQUFBLEVBQUFoQixZQUFBO1FBQUFpQixVQUFBO1FBQUFDLFlBQUE7TUFBQTtJQUFBLENBQUUsQ0FBQyxDQUFDOztJQUUvQztJQUNBLE1BQU0sSUFBQVEsZUFBTyxFQUFDLE1BQU1QLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0wsaUJBQWlCLENBQUMsQ0FBQyxDQUFDOztJQUUxRTtJQUNBLE1BQU1NLElBQUksR0FBRyxNQUFNLElBQUFGLGVBQU8sRUFBQyxNQUFNTixjQUFNLENBQUNHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1REosTUFBTSxDQUFDUyxJQUFJLENBQUMsQ0FBQ0osWUFBWSxDQUFDcEIsWUFBWSxDQUFDcUIsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O0lBRXBEO0lBQ0FOLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztJQUN2REgsTUFBTSxDQUFDQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3hESCxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7SUFDcERILE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUN0RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7O0FBRUY7QUFDQU8sRUFBRSxDQUFDLHdEQUF3RCxFQUFFLFlBQVk7RUFDdkUsSUFBQWpCLGNBQU0sRUFBQ1gsS0FBQSxDQUFDRixZQUFBLENBQUFHLE9BQVc7SUFBQ1csUUFBUSxFQUFFLEVBQUc7SUFBQUMsTUFBQTtJQUFBQyxRQUFBO01BQUFDLFFBQUEsRUFBQWhCLFlBQUE7TUFBQWlCLFVBQUE7TUFBQUMsWUFBQTtJQUFBO0VBQUEsQ0FBRSxDQUFDLENBQUM7RUFDckNDLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ25FLENBQUMsQ0FBQzs7QUFFRjtBQUNBTyxFQUFFLENBQUMsNEJBQTRCLEVBQUUsTUFBTTtFQUNyQyxNQUFNaEIsUUFBUSxHQUFHLENBQ2Y7SUFBRWlCLEdBQUcsRUFBRSxHQUFHO0lBQUV4QixNQUFNLEVBQUUsU0FBUztJQUFFRSxNQUFNLEVBQUUsR0FBRztJQUFFdUIsT0FBTyxFQUFFO0VBQWEsQ0FBQyxFQUNuRTtJQUFFRCxHQUFHLEVBQUUsR0FBRztJQUFFeEIsTUFBTSxFQUFFLFNBQVM7SUFBRUUsTUFBTSxFQUFFLEdBQUc7SUFBRXVCLE9BQU8sRUFBRTtFQUFhLENBQUMsQ0FDcEU7RUFDRCxJQUFBbkIsY0FBTSxFQUFDWCxLQUFBLENBQUNGLFlBQUEsQ0FBQUcsT0FBVztJQUFDVyxRQUFRLEVBQUVBLFFBQVM7SUFBQUMsTUFBQTtJQUFBQyxRQUFBO01BQUFDLFFBQUEsRUFBQWhCLFlBQUE7TUFBQWlCLFVBQUE7TUFBQUMsWUFBQTtJQUFBO0VBQUEsQ0FBRSxDQUFDLENBQUM7RUFDM0NDLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUN4REgsTUFBTSxDQUFDQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzFELENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==