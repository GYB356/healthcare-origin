{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_InvoiceList","_jsxFileName","__jsx","default","createElement","mockInvoices","id","number","patient","amount","status","describe","test","render","invoices","__self","__source","fileName","lineNumber","columnNumber","expect","screen","getByText","toBeInTheDocument","getAllByRole","toHaveLength","length","waitFor","getByRole","rows","it","_id","dueDate"],"sources":["InvoiceList.test.js"],"sourcesContent":["import React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport InvoiceList from \"../InvoiceList\";\n\nconst mockInvoices = [\n  { id: '1', number: 'INV-001', patient: 'John Doe', amount: 100, status: 'Paid' },\n  { id: '2', number: 'INV-002', patient: 'Jane Smith', amount: 200, status: 'Pending' },\n];\n\ndescribe(\"InvoiceList Component\", () => {\n  test(\"renders without crashing\", () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    expect(screen.getByText(\"Invoices\")).toBeInTheDocument();\n  });\n\n  test(\"displays the correct number of invoices\", () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    expect(screen.getAllByRole(\"row\")).toHaveLength(mockInvoices.length + 1); // +1 for the header row\n  });\n\n  test(\"renders invoice list correctly\", async () => {\n    render(<InvoiceList invoices={mockInvoices} />);\n    \n    // Check if the table exists\n    await waitFor(() => expect(screen.getByRole('table')).toBeInTheDocument());\n\n    // Query table rows\n    const rows = await waitFor(() => screen.getAllByRole('row'));\n    expect(rows).toHaveLength(mockInvoices.length + 1); // +1 for the header row\n\n    // Check invoice details\n    expect(screen.getByText('INV-001')).toBeInTheDocument();\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('$100')).toBeInTheDocument();\n    expect(screen.getByText('Paid')).toBeInTheDocument();\n  });\n});\n\n// Test to check if InvoiceList renders correctly with no invoices\nit(\"renders no invoices message when invoice list is empty\", async () => {\n  render(<InvoiceList invoices={[]} />);\n  expect(screen.getByText('No invoices found')).toBeInTheDocument();\n});\n\n// Test to check if InvoiceList renders invoices correctly\nit(\"renders invoices correctly\", () => {\n  const invoices = [\n    { _id: \"1\", number: \"INV-001\", amount: 100, dueDate: \"2023-12-31\" },\n    { _id: \"2\", number: \"INV-002\", amount: 200, dueDate: \"2024-01-15\" },\n  ];\n  render(<InvoiceList invoices={invoices} />);\n  expect(screen.getByText(/inv-001/i)).toBeInTheDocument();\n  expect(screen.getByText(/inv-002/i)).toBeInTheDocument();\n});\n"],"mappings":"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","ignoreList":[]}