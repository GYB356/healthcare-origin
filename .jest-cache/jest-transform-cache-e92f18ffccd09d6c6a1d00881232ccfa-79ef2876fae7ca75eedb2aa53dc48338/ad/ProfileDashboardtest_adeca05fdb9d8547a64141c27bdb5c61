082d9ddc2da04418878e40f66568e39a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom");
var _msw = require("msw");
var _node = require("msw/node");
var _ProfileDashboard = _interopRequireDefault(require("./ProfileDashboard"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["authValues", "themeValues", "notificationValues"];
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\src\\components\\ProfileDashboard.test.tsx"; // Import the component to test
// Mock contexts
import React from "react";
var __jsx = React.createElement;
const AuthContext = /*#__PURE__*/_react.default.createContext(null);
const ThemeContext = /*#__PURE__*/_react.default.createContext(null);
const NotificationContext = /*#__PURE__*/_react.default.createContext(null);

// Mock API responses
const mockUserData = {
  id: '123',
  name: 'John Doe',
  email: 'john@example.com',
  appointments: [{
    id: 'apt1',
    date: '2023-10-01',
    doctor: 'Dr. Smith',
    status: 'confirmed'
  }, {
    id: 'apt2',
    date: '2023-11-15',
    doctor: 'Dr. Johnson',
    status: 'pending'
  }]
};
const mockErrorResponse = {
  message: 'Failed to fetch user data'
};

// Setup MSW server to intercept API calls
const server = (0, _node.setupServer)(_msw.rest.get('/api/user/:userId', (req, res, ctx) => {
  const {
    userId
  } = req.params;
  if (userId === '123') {
    return res(ctx.json(mockUserData));
  } else if (userId === 'error') {
    return res(ctx.status(500), ctx.json(mockErrorResponse));
  } else {
    return res(ctx.status(404), ctx.json({
      message: 'User not found'
    }));
  }
}), _msw.rest.post('/api/appointments/cancel/:id', (req, res, ctx) => {
  const {
    id
  } = req.params;
  if (id === 'apt1') {
    return res(ctx.json({
      success: true
    }));
  } else {
    return res(ctx.status(400), ctx.json({
      message: 'Cannot cancel appointment'
    }));
  }
}));

// Mock context providers
const mockAuthValues = {
  authenticated: true,
  user: {
    id: '123',
    name: 'John Doe'
  },
  login: jest.fn(),
  logout: jest.fn()
};
const mockThemeValues = {
  theme: 'light',
  toggleTheme: jest.fn()
};
const mockNotificationValues = {
  notifications: [],
  addNotification: jest.fn(),
  clearNotifications: jest.fn()
};

// Test wrapper component that provides all necessary contexts
const AllTheProviders = ({
  children,
  authValues,
  themeValues,
  notificationValues
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(AuthContext.Provider, {
    value: authValues || mockAuthValues,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ThemeContext.Provider, {
      value: themeValues || mockThemeValues,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(NotificationContext.Provider, {
        value: notificationValues || mockNotificationValues,
        children: children
      })
    })
  });
};

// Custom render function that includes providers
const customRender = (ui, _ref = {}) => {
  let {
      authValues,
      themeValues,
      notificationValues
    } = _ref,
    renderOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(AllTheProviders, {
    authValues: authValues,
    themeValues: themeValues,
    notificationValues: notificationValues,
    children: ui
  }), renderOptions);
};

// Setup and teardown for MSW
beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
describe('ProfileDashboard Component', () => {
  // Test initial rendering with default contexts
  test('renders user profile information when authenticated', async () => {
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}));

    // Check for loading state
    expect(_react2.screen.getByTestId('loading-spinner')).toBeInTheDocument();

    // Wait for API response to load
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();
    });

    // Check that user data is displayed
    expect(_react2.screen.getByText('John Doe')).toBeInTheDocument();
    expect(_react2.screen.getByText('john@example.com')).toBeInTheDocument();
    expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    expect(_react2.screen.getByText('Dr. Johnson')).toBeInTheDocument();
  });

  // Test unauthenticated state
  test('redirects to login when user is not authenticated', () => {
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}), {
      authValues: {
        authenticated: false,
        user: null,
        login: jest.fn(),
        logout: jest.fn()
      }
    });
    expect(_react2.screen.getByText('Please login to view your profile')).toBeInTheDocument();
    expect(_react2.screen.getByRole('button', {
      name: /login/i
    })).toBeInTheDocument();
  });

  // Test theme context changes
  test('applies correct theme styles based on theme context', () => {
    // Test light theme
    const {
      rerender
    } = customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}));
    expect(_react2.screen.getByTestId('dashboard-container')).toHaveClass('light-theme');

    // Test dark theme
    rerender(/*#__PURE__*/(0, _jsxRuntime.jsx)(AllTheProviders, {
      themeValues: {
        theme: 'dark',
        toggleTheme: jest.fn()
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {})
    }));
    expect(_react2.screen.getByTestId('dashboard-container')).toHaveClass('dark-theme');
  });

  // Test API error handling
  test('displays error message when API call fails', async () => {
    // Mock a failed API response
    server.use(_msw.rest.get('/api/user/:userId', (req, res, ctx) => {
      return res(ctx.status(500), ctx.json(mockErrorResponse));
    }));
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}));

    // Wait for error state
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to fetch user data')).toBeInTheDocument();
    });

    // Check for retry button
    expect(_react2.screen.getByRole('button', {
      name: /retry/i
    })).toBeInTheDocument();
  });

  // Test user interaction - appointment cancellation
  test('handles appointment cancellation correctly', async () => {
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}));

    // Wait for data to load
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();
    });

    // Find and click the cancel button for the first appointment
    const cancelButtons = _react2.screen.getAllByRole('button', {
      name: /cancel appointment/i
    });
    _react2.fireEvent.click(cancelButtons[0]);

    // Should show confirmation dialog
    expect(_react2.screen.getByText('Are you sure you want to cancel this appointment?')).toBeInTheDocument();

    // Confirm cancellation
    _react2.fireEvent.click(_react2.screen.getByRole('button', {
      name: /confirm/i
    }));

    // Wait for success message
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Appointment cancelled successfully')).toBeInTheDocument();
    });

    // Check that notification was added
    expect(mockNotificationValues.addNotification).toHaveBeenCalledWith(expect.objectContaining({
      type: 'success',
      message: 'Appointment cancelled successfully'
    }));
  });

  // Test failed appointment cancellation
  test('handles appointment cancellation failure', async () => {
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}));

    // Wait for data to load
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();
    });

    // Find and click the cancel button for the second appointment (which will fail)
    const cancelButtons = _react2.screen.getAllByRole('button', {
      name: /cancel appointment/i
    });
    _react2.fireEvent.click(cancelButtons[1]);

    // Confirm cancellation
    _react2.fireEvent.click(_react2.screen.getByRole('button', {
      name: /confirm/i
    }));

    // Wait for error message
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Cannot cancel appointment')).toBeInTheDocument();
    });

    // Check that error notification was added
    expect(mockNotificationValues.addNotification).toHaveBeenCalledWith(expect.objectContaining({
      type: 'error',
      message: 'Cannot cancel appointment'
    }));
  });

  // Test context updates
  test('responds to auth context updates', async () => {
    const {
      rerender
    } = customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}));

    // Initially authenticated
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('John Doe')).toBeInTheDocument();
    });

    // Update to unauthenticated
    rerender(/*#__PURE__*/(0, _jsxRuntime.jsx)(AllTheProviders, {
      authValues: {
        authenticated: false,
        user: null,
        login: jest.fn(),
        logout: jest.fn()
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {})
    }));

    // Should show login prompt
    expect(_react2.screen.getByText('Please login to view your profile')).toBeInTheDocument();
  });

  // Test multiple context combinations
  test('handles complex context combinations correctly', async () => {
    // Test with authenticated user but in dark mode with notifications
    const notificationsWithItems = {
      notifications: [{
        id: 'n1',
        type: 'info',
        message: 'New feature available'
      }, {
        id: 'n2',
        type: 'warning',
        message: 'Your subscription expires soon'
      }],
      addNotification: jest.fn(),
      clearNotifications: jest.fn()
    };
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}), {
      themeValues: {
        theme: 'dark',
        toggleTheme: jest.fn()
      },
      notificationValues: notificationsWithItems
    });

    // Wait for profile to load
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('John Doe')).toBeInTheDocument();
    });

    // Check that theme is applied
    expect(_react2.screen.getByTestId('dashboard-container')).toHaveClass('dark-theme');

    // Check that notifications are displayed
    expect(_react2.screen.getByText('New feature available')).toBeInTheDocument();
    expect(_react2.screen.getByText('Your subscription expires soon')).toBeInTheDocument();
  });

  // Test conditional rendering based on user permissions
  test('renders admin controls only for admin users', async () => {
    // Regular user first
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();
    });

    // Admin controls should not be visible
    expect(_react2.screen.queryByTestId('admin-controls')).not.toBeInTheDocument();

    // Now with admin user
    customRender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_ProfileDashboard.default, {}), {
      authValues: {
        authenticated: true,
        user: {
          id: '123',
          name: 'John Doe',
          role: 'admin'
        },
        login: jest.fn(),
        logout: jest.fn()
      }
    });
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();
    });

    // Admin controls should be visible
    expect(_react2.screen.getByTestId('admin-controls')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,