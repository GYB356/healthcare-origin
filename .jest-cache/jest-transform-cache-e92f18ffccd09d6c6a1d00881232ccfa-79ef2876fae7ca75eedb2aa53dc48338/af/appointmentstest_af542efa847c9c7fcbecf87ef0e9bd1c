1902bc383b4978e08c03d88efe88cd2e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _vitest = require("vitest");
var _server = require("next/server");
var _nextAuth = require("next-auth");
var _client = require("@prisma/client");
var _route = require("@/app/api/appointments/[id]/route");
var _route2 = require("@/app/api/appointments/route");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// Mock next-auth
_vitest.vi.mock('next-auth', () => ({
  getServerSession: _vitest.vi.fn()
}));

// Mock Prisma
_vitest.vi.mock('@prisma/client', () => ({
  PrismaClient: _vitest.vi.fn(() => ({
    appointment: {
      findMany: _vitest.vi.fn(),
      findUnique: _vitest.vi.fn(),
      create: _vitest.vi.fn(),
      update: _vitest.vi.fn(),
      delete: _vitest.vi.fn()
    },
    availability: {
      findMany: _vitest.vi.fn()
    },
    auditLog: {
      create: _vitest.vi.fn()
    },
    $transaction: _vitest.vi.fn(callback => callback())
  }))
}));
(0, _vitest.describe)('Appointments API', () => {
  let mockPrisma;
  let mockSession;
  (0, _vitest.beforeEach)(() => {
    mockPrisma = new _client.PrismaClient();
    mockSession = {
      user: {
        id: 'user-id',
        role: 'DOCTOR'
      }
    };
    _nextAuth.getServerSession.mockResolvedValue(mockSession);
  });
  (0, _vitest.afterEach)(() => {
    _vitest.vi.clearAllMocks();
  });
  (0, _vitest.describe)('GET /api/appointments', () => {
    (0, _vitest.it)('should return 401 for unauthenticated users', async () => {
      ;
      _nextAuth.getServerSession.mockResolvedValue(null);
      const request = new _server.NextRequest('http://localhost:3000/api/appointments');
      const response = await (0, _route2.GET)(request);
      (0, _vitest.expect)(response.status).toBe(401);
    });
    (0, _vitest.it)('should return appointments for doctors', async () => {
      const mockAppointments = [{
        id: '1',
        patientId: 'patient-1',
        doctorId: 'user-id',
        date: '2024-03-15',
        time: '09:00',
        status: 'SCHEDULED'
      }];
      mockPrisma.appointment.findMany.mockResolvedValue(mockAppointments);
      const request = new _server.NextRequest('http://localhost:3000/api/appointments');
      const response = await (0, _route2.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockAppointments);
    });
    (0, _vitest.it)('should filter appointments by patient for patient users', async () => {
      mockSession.user.role = 'PATIENT';
      mockSession.user.id = 'patient-id';
      const request = new _server.NextRequest('http://localhost:3000/api/appointments');
      await (0, _route2.GET)(request);
      (0, _vitest.expect)(mockPrisma.appointment.findMany).toHaveBeenCalledWith(_vitest.expect.objectContaining({
        where: _vitest.expect.objectContaining({
          patientId: 'patient-id'
        })
      }));
    });
    (0, _vitest.it)('should handle date range filtering', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/appointments?startDate=2024-03-01&endDate=2024-03-31');
      await (0, _route2.GET)(request);
      (0, _vitest.expect)(mockPrisma.appointment.findMany).toHaveBeenCalledWith(_vitest.expect.objectContaining({
        where: _vitest.expect.objectContaining({
          date: {
            gte: '2024-03-01',
            lte: '2024-03-31'
          }
        })
      }));
    });
  });
  (0, _vitest.describe)('GET /api/appointments/[id]', () => {
    (0, _vitest.it)('should return appointment data for valid ID', async () => {
      const mockAppointment = {
        id: '1',
        patientId: 'patient-1',
        doctorId: 'doctor-1',
        date: '2024-03-15',
        time: '09:00',
        status: 'SCHEDULED'
      };
      mockPrisma.appointment.findUnique.mockResolvedValue(mockAppointment);
      const request = new _server.NextRequest('http://localhost:3000/api/appointments/1');
      const response = await (0, _route.GET)(request, {
        params: {
          id: '1'
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockAppointment);
    });
    (0, _vitest.it)('should return 404 for non-existent appointment', async () => {
      ;
      mockPrisma.appointment.findUnique.mockResolvedValue(null);
      const request = new _server.NextRequest('http://localhost:3000/api/appointments/999');
      const response = await (0, _route.GET)(request, {
        params: {
          id: '999'
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
  (0, _vitest.describe)('POST /api/appointments', () => {
    (0, _vitest.it)('should create a new appointment', async () => {
      const mockAppointment = {
        patientId: 'patient-1',
        doctorId: 'doctor-1',
        date: '2024-03-15',
        time: '09:00'
      };
      mockPrisma.appointment.create.mockResolvedValue(_objectSpread(_objectSpread({
        id: '1'
      }, mockAppointment), {}, {
        status: 'SCHEDULED'
      }));
      mockPrisma.availability.findMany.mockResolvedValue([{
        dayOfWeek: 'FRIDAY',
        startTime: '09:00',
        endTime: '17:00'
      }]);
      const request = new _server.NextRequest('http://localhost:3000/api/appointments', {
        method: 'POST',
        body: JSON.stringify(mockAppointment)
      });
      const response = await (0, _route.POST)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(201);
      (0, _vitest.expect)(data.id).toBe('1');
      (0, _vitest.expect)(data.status).toBe('SCHEDULED');
    });
    (0, _vitest.it)('should validate required fields', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/appointments', {
        method: 'POST',
        body: JSON.stringify({})
      });
      const response = await (0, _route.POST)(request);
      (0, _vitest.expect)(response.status).toBe(400);
    });
    (0, _vitest.it)('should validate doctor availability', async () => {
      ;
      mockPrisma.availability.findMany.mockResolvedValue([]);
      const request = new _server.NextRequest('http://localhost:3000/api/appointments', {
        method: 'POST',
        body: JSON.stringify({
          patientId: 'patient-1',
          doctorId: 'doctor-1',
          date: '2024-03-15',
          time: '09:00'
        })
      });
      const response = await (0, _route.POST)(request);
      (0, _vitest.expect)(response.status).toBe(400);
    });
  });
  (0, _vitest.describe)('PUT /api/appointments/[id]', () => {
    (0, _vitest.it)('should update appointment status', async () => {
      const mockAppointment = {
        id: '1',
        status: 'COMPLETED'
      };
      mockPrisma.appointment.update.mockResolvedValue(mockAppointment);
      const request = new _server.NextRequest('http://localhost:3000/api/appointments/1', {
        method: 'PUT',
        body: JSON.stringify({
          status: 'COMPLETED'
        })
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: '1'
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data.status).toBe('COMPLETED');
    });
    (0, _vitest.it)('should validate status values', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/appointments/1', {
        method: 'PUT',
        body: JSON.stringify({
          status: 'INVALID_STATUS'
        })
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(400);
    });
  });
  (0, _vitest.describe)('DELETE /api/appointments/[id]', () => {
    (0, _vitest.it)('should cancel an appointment', async () => {
      ;
      mockPrisma.appointment.delete.mockResolvedValue({
        id: '1'
      });
      const request = new _server.NextRequest('http://localhost:3000/api/appointments/1', {
        method: 'DELETE'
      });
      const response = await (0, _route.DELETE)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(204);
    });
    (0, _vitest.it)('should return 404 for non-existent appointment', async () => {
      ;
      mockPrisma.appointment.delete.mockRejectedValue(new Error('Not found'));
      const request = new _server.NextRequest('http://localhost:3000/api/appointments/999', {
        method: 'DELETE'
      });
      const response = await (0, _route.DELETE)(request, {
        params: {
          id: '999'
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,