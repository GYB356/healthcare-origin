{"version":3,"names":["_vitest","require","_utils","describe","it","expect","cn","toBe","conditional","undefined","date","Date","formatDate","formatDateTime","formatFileSize","NaN","getInitials"],"sources":["utils.test.ts"],"sourcesContent":["import { describe, it, expect } from 'vitest'\nimport {\n  cn,\n  formatDate,\n  formatDateTime,\n  formatFileSize,\n  getInitials,\n} from '@/lib/utils'\n\ndescribe('cn', () => {\n  it('should merge class names correctly', () => {\n    expect(cn('base', 'extra')).toBe('base extra')\n    expect(cn('base', { conditional: true })).toBe('base conditional')\n    expect(cn('base', { conditional: false })).toBe('base')\n    expect(cn('base', null, undefined, 'extra')).toBe('base extra')\n  })\n\n  it('should handle tailwind conflicts', () => {\n    expect(cn('px-2 py-1', 'p-4')).toBe('p-4')\n    expect(cn('text-sm font-bold', 'text-lg')).toBe('text-lg font-bold')\n  })\n})\n\ndescribe('formatDate', () => {\n  it('should format dates correctly', () => {\n    const date = new Date('2024-03-15')\n    expect(formatDate(date)).toBe('March 15, 2024')\n  })\n\n  it('should handle invalid dates', () => {\n    expect(formatDate(new Date('invalid'))).toBe('Invalid Date')\n  })\n})\n\ndescribe('formatDateTime', () => {\n  it('should format date and time correctly', () => {\n    const date = new Date('2024-03-15T14:30:00')\n    expect(formatDateTime(date)).toBe('March 15, 2024, 2:30 PM')\n  })\n\n  it('should handle invalid dates', () => {\n    expect(formatDateTime(new Date('invalid'))).toBe('Invalid Date')\n  })\n})\n\ndescribe('formatFileSize', () => {\n  it('should format bytes correctly', () => {\n    expect(formatFileSize(0)).toBe('0 B')\n    expect(formatFileSize(1024)).toBe('1.0 KB')\n    expect(formatFileSize(1024 * 1024)).toBe('1.0 MB')\n    expect(formatFileSize(1024 * 1024 * 1024)).toBe('1.0 GB')\n  })\n\n  it('should handle decimal places correctly', () => {\n    expect(formatFileSize(1536)).toBe('1.5 KB')\n    expect(formatFileSize(1600)).toBe('1.6 KB')\n  })\n\n  it('should handle invalid input', () => {\n    expect(formatFileSize(-1)).toBe('0 B')\n    expect(formatFileSize(NaN)).toBe('0 B')\n  })\n})\n\ndescribe('getInitials', () => {\n  it('should get initials from full name', () => {\n    expect(getInitials('John Doe')).toBe('JD')\n    expect(getInitials('Alice Bob Charlie')).toBe('ABC')\n  })\n\n  it('should handle single word names', () => {\n    expect(getInitials('John')).toBe('J')\n  })\n\n  it('should handle empty strings', () => {\n    expect(getInitials('')).toBe('')\n  })\n\n  it('should handle whitespace', () => {\n    expect(getInitials('   John   Doe   ')).toBe('JD')\n  })\n\n  it('should handle special characters', () => {\n    expect(getInitials('Jean-Pierre Dubois')).toBe('JD')\n  })\n}) "],"mappings":"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","ignoreList":[]}