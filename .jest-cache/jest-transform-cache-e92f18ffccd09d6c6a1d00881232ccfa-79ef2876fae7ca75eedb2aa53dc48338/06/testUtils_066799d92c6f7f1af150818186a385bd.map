{"version":3,"names":["cov_1l1g950k03","actualCoverage","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","mongoose","s","require","MongoMemoryServer","mongod","connectDB","f","create","uri","getUri","connect","useNewUrlParser","useUnifiedTopology","maxPoolSize","serverSelectionTimeoutMS","socketTimeoutMS","closeDB","connection","close","stop","clearDB","collections","db","Promise","all","map","collection","deleteMany","createTestUser","userData","b","defaultUser","name","email","password","role","model","createTestPatient","patientData","defaultPatient","phone","createTestAppointment","appointmentData","defaultAppointment","patientId","_id","doctorId","date","Date","status","createTestChat","chatData","chat","save","mockWebSocket","mockSocket","on","jest","fn","emit","connected","disconnect","waitForCondition","condition","timeout","startTime","now","Error","resolve","setTimeout","module","exports"],"sources":["testUtils.js"],"sourcesContent":["const mongoose = require('mongoose');\r\nconst { MongoMemoryServer } = require('mongodb-memory-server');\r\n\r\nlet mongod;\r\n\r\nconst connectDB = async () => {\r\n  mongod = await MongoMemoryServer.create();\r\n  const uri = mongod.getUri();\r\n  \r\n  await mongoose.connect(uri, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    maxPoolSize: 10,\r\n    serverSelectionTimeoutMS: 5000,\r\n    socketTimeoutMS: 45000,\r\n  });\r\n};\r\n\r\nconst closeDB = async () => {\r\n  await mongoose.connection.close();\r\n  await mongod.stop();\r\n};\r\n\r\nconst clearDB = async () => {\r\n  const collections = await mongoose.connection.db.collections();\r\n  await Promise.all(\r\n    collections.map(collection => collection.deleteMany())\r\n  );\r\n};\r\n\r\nconst createTestUser = async (userData = {}) => {\r\n  const defaultUser = {\r\n    name: 'Test User',\r\n    email: 'test@example.com',\r\n    password: 'hashedPassword',\r\n    role: 'DOCTOR',\r\n    ...userData\r\n  };\r\n  \r\n  return await mongoose.model('User').create(defaultUser);\r\n};\r\n\r\nconst createTestPatient = async (patientData = {}) => {\r\n  const defaultPatient = {\r\n    name: 'Test Patient',\r\n    email: 'patient@example.com',\r\n    phone: '1234567890',\r\n    ...patientData\r\n  };\r\n  \r\n  return await mongoose.model('Patient').create(defaultPatient);\r\n};\r\n\r\nconst createTestAppointment = async (appointmentData = {}) => {\r\n  const defaultAppointment = {\r\n    patientId: appointmentData.patientId || (await createTestPatient())._id,\r\n    doctorId: appointmentData.doctorId || (await createTestUser())._id,\r\n    date: new Date(),\r\n    status: 'SCHEDULED',\r\n    ...appointmentData\r\n  };\r\n  \r\n  return await mongoose.model('Appointment').create(defaultAppointment);\r\n};\r\n\r\nconst createTestChat = async (chatData) => {\r\n  const chat = new mongoose.model('Chat')(chatData);\r\n  await chat.save();\r\n  return chat;\r\n};\r\n\r\nconst mockWebSocket = () => {\r\n  const mockSocket = {\r\n    on: jest.fn(),\r\n    emit: jest.fn(),\r\n    connected: false,\r\n    disconnect: jest.fn(),\r\n    connect: jest.fn(),\r\n  };\r\n  return mockSocket;\r\n};\r\n\r\nconst waitForCondition = async (condition, timeout = 5000) => {\r\n  const startTime = Date.now();\r\n  while (!condition()) {\r\n    if (Date.now() - startTime > timeout) {\r\n      throw new Error('Condition not met within timeout');\r\n    }\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  connectDB,\r\n  closeDB,\r\n  clearDB,\r\n  createTestUser,\r\n  createTestPatient,\r\n  createTestAppointment,\r\n  createTestChat,\r\n  mockWebSocket,\r\n  waitForCondition,\r\n}; "],"mappings":"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","ignoreList":[]}