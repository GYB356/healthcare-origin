35ddca303d33111f6d507c25af80d9a1
/**
 * MongoDB Standalone Test
 * 
 * This test verifies MongoDB connections without relying on the Jest setup file
 */

const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
let mongoServer;
beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create({
    binary: {
      version: '6.0.4',
      downloadDir: './.cache/mongodb-memory-server/mongodb-binaries'
    }
  });
  const uri = mongoServer.getUri();
  await mongoose.connect(uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
});
afterAll(async () => {
  await mongoose.disconnect();
  await mongoServer.stop();
});
describe('MongoDB Basic Operations', () => {
  test('should connect successfully', () => {
    expect(mongoose.connection.readyState).toBe(1);
  });
  test('should perform CRUD operations', async () => {
    // Create a test model
    const TestModel = mongoose.model('Test', new mongoose.Schema({
      name: String,
      value: Number
    }));

    // Create
    const testDoc = new TestModel({
      name: 'test',
      value: 42
    });
    await testDoc.save();

    // Read
    const savedDoc = await TestModel.findOne({
      name: 'test'
    });
    expect(savedDoc.name).toBe('test');
    expect(savedDoc.value).toBe(42);

    // Update
    savedDoc.value = 100;
    await savedDoc.save();
    const updatedDoc = await TestModel.findOne({
      name: 'test'
    });
    expect(updatedDoc.value).toBe(100);

    // Delete
    await TestModel.deleteOne({
      name: 'test'
    });
    const deletedDoc = await TestModel.findOne({
      name: 'test'
    });
    expect(deletedDoc).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsIm1vbmdvU2VydmVyIiwiYmVmb3JlQWxsIiwiY3JlYXRlIiwiYmluYXJ5IiwidmVyc2lvbiIsImRvd25sb2FkRGlyIiwidXJpIiwiZ2V0VXJpIiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsInVzZVVuaWZpZWRUb3BvbG9neSIsImFmdGVyQWxsIiwiZGlzY29ubmVjdCIsInN0b3AiLCJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsInRvQmUiLCJUZXN0TW9kZWwiLCJtb2RlbCIsIlNjaGVtYSIsIm5hbWUiLCJTdHJpbmciLCJ2YWx1ZSIsIk51bWJlciIsInRlc3REb2MiLCJzYXZlIiwic2F2ZWREb2MiLCJmaW5kT25lIiwidXBkYXRlZERvYyIsImRlbGV0ZU9uZSIsImRlbGV0ZWREb2MiLCJ0b0JlTnVsbCJdLCJzb3VyY2VzIjpbIm1vbmdvLXN0YW5kYWxvbmUudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTW9uZ29EQiBTdGFuZGFsb25lIFRlc3RcclxuICogXHJcbiAqIFRoaXMgdGVzdCB2ZXJpZmllcyBNb25nb0RCIGNvbm5lY3Rpb25zIHdpdGhvdXQgcmVseWluZyBvbiB0aGUgSmVzdCBzZXR1cCBmaWxlXHJcbiAqL1xyXG5cclxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCB7IE1vbmdvTWVtb3J5U2VydmVyIH0gPSByZXF1aXJlKCdtb25nb2RiLW1lbW9yeS1zZXJ2ZXInKTtcclxuXHJcbmxldCBtb25nb1NlcnZlcjtcclxuXHJcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgbW9uZ29TZXJ2ZXIgPSBhd2FpdCBNb25nb01lbW9yeVNlcnZlci5jcmVhdGUoe1xyXG4gICAgYmluYXJ5OiB7XHJcbiAgICAgIHZlcnNpb246ICc2LjAuNCcsXHJcbiAgICAgIGRvd25sb2FkRGlyOiAnLi8uY2FjaGUvbW9uZ29kYi1tZW1vcnktc2VydmVyL21vbmdvZGItYmluYXJpZXMnXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgXHJcbiAgY29uc3QgdXJpID0gbW9uZ29TZXJ2ZXIuZ2V0VXJpKCk7XHJcbiAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdCh1cmksIHtcclxuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcclxuICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZVxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcclxuICBhd2FpdCBtb25nb29zZS5kaXNjb25uZWN0KCk7XHJcbiAgYXdhaXQgbW9uZ29TZXJ2ZXIuc3RvcCgpO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdNb25nb0RCIEJhc2ljIE9wZXJhdGlvbnMnLCAoKSA9PiB7XHJcbiAgdGVzdCgnc2hvdWxkIGNvbm5lY3Qgc3VjY2Vzc2Z1bGx5JywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSkudG9CZSgxKTtcclxuICB9KTtcclxuICBcclxuICB0ZXN0KCdzaG91bGQgcGVyZm9ybSBDUlVEIG9wZXJhdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBDcmVhdGUgYSB0ZXN0IG1vZGVsXHJcbiAgICBjb25zdCBUZXN0TW9kZWwgPSBtb25nb29zZS5tb2RlbCgnVGVzdCcsIG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gICAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICAgIHZhbHVlOiBOdW1iZXJcclxuICAgIH0pKTtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlXHJcbiAgICBjb25zdCB0ZXN0RG9jID0gbmV3IFRlc3RNb2RlbCh7IG5hbWU6ICd0ZXN0JywgdmFsdWU6IDQyIH0pO1xyXG4gICAgYXdhaXQgdGVzdERvYy5zYXZlKCk7XHJcbiAgICBcclxuICAgIC8vIFJlYWRcclxuICAgIGNvbnN0IHNhdmVkRG9jID0gYXdhaXQgVGVzdE1vZGVsLmZpbmRPbmUoeyBuYW1lOiAndGVzdCcgfSk7XHJcbiAgICBleHBlY3Qoc2F2ZWREb2MubmFtZSkudG9CZSgndGVzdCcpO1xyXG4gICAgZXhwZWN0KHNhdmVkRG9jLnZhbHVlKS50b0JlKDQyKTtcclxuICAgIFxyXG4gICAgLy8gVXBkYXRlXHJcbiAgICBzYXZlZERvYy52YWx1ZSA9IDEwMDtcclxuICAgIGF3YWl0IHNhdmVkRG9jLnNhdmUoKTtcclxuICAgIFxyXG4gICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IFRlc3RNb2RlbC5maW5kT25lKHsgbmFtZTogJ3Rlc3QnIH0pO1xyXG4gICAgZXhwZWN0KHVwZGF0ZWREb2MudmFsdWUpLnRvQmUoMTAwKTtcclxuICAgIFxyXG4gICAgLy8gRGVsZXRlXHJcbiAgICBhd2FpdCBUZXN0TW9kZWwuZGVsZXRlT25lKHsgbmFtZTogJ3Rlc3QnIH0pO1xyXG4gICAgY29uc3QgZGVsZXRlZERvYyA9IGF3YWl0IFRlc3RNb2RlbC5maW5kT25lKHsgbmFtZTogJ3Rlc3QnIH0pO1xyXG4gICAgZXhwZWN0KGRlbGV0ZWREb2MpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcbn0pOyAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU07RUFBRUM7QUFBa0IsQ0FBQyxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFFOUQsSUFBSUUsV0FBVztBQUVmQyxTQUFTLENBQUMsWUFBWTtFQUNwQkQsV0FBVyxHQUFHLE1BQU1ELGlCQUFpQixDQUFDRyxNQUFNLENBQUM7SUFDM0NDLE1BQU0sRUFBRTtNQUNOQyxPQUFPLEVBQUUsT0FBTztNQUNoQkMsV0FBVyxFQUFFO0lBQ2Y7RUFDRixDQUFDLENBQUM7RUFFRixNQUFNQyxHQUFHLEdBQUdOLFdBQVcsQ0FBQ08sTUFBTSxDQUFDLENBQUM7RUFDaEMsTUFBTVYsUUFBUSxDQUFDVyxPQUFPLENBQUNGLEdBQUcsRUFBRTtJQUMxQkcsZUFBZSxFQUFFLElBQUk7SUFDckJDLGtCQUFrQixFQUFFO0VBQ3RCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGQyxRQUFRLENBQUMsWUFBWTtFQUNuQixNQUFNZCxRQUFRLENBQUNlLFVBQVUsQ0FBQyxDQUFDO0VBQzNCLE1BQU1aLFdBQVcsQ0FBQ2EsSUFBSSxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUZDLFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxNQUFNO0VBQ3pDQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsTUFBTTtJQUN4Q0MsTUFBTSxDQUFDbkIsUUFBUSxDQUFDb0IsVUFBVSxDQUFDQyxVQUFVLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNoRCxDQUFDLENBQUM7RUFFRkosSUFBSSxDQUFDLGdDQUFnQyxFQUFFLFlBQVk7SUFDakQ7SUFDQSxNQUFNSyxTQUFTLEdBQUd2QixRQUFRLENBQUN3QixLQUFLLENBQUMsTUFBTSxFQUFFLElBQUl4QixRQUFRLENBQUN5QixNQUFNLENBQUM7TUFDM0RDLElBQUksRUFBRUMsTUFBTTtNQUNaQyxLQUFLLEVBQUVDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7O0lBRUg7SUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSVAsU0FBUyxDQUFDO01BQUVHLElBQUksRUFBRSxNQUFNO01BQUVFLEtBQUssRUFBRTtJQUFHLENBQUMsQ0FBQztJQUMxRCxNQUFNRSxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDOztJQUVwQjtJQUNBLE1BQU1DLFFBQVEsR0FBRyxNQUFNVCxTQUFTLENBQUNVLE9BQU8sQ0FBQztNQUFFUCxJQUFJLEVBQUU7SUFBTyxDQUFDLENBQUM7SUFDMURQLE1BQU0sQ0FBQ2EsUUFBUSxDQUFDTixJQUFJLENBQUMsQ0FBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNsQ0gsTUFBTSxDQUFDYSxRQUFRLENBQUNKLEtBQUssQ0FBQyxDQUFDTixJQUFJLENBQUMsRUFBRSxDQUFDOztJQUUvQjtJQUNBVSxRQUFRLENBQUNKLEtBQUssR0FBRyxHQUFHO0lBQ3BCLE1BQU1JLFFBQVEsQ0FBQ0QsSUFBSSxDQUFDLENBQUM7SUFFckIsTUFBTUcsVUFBVSxHQUFHLE1BQU1YLFNBQVMsQ0FBQ1UsT0FBTyxDQUFDO01BQUVQLElBQUksRUFBRTtJQUFPLENBQUMsQ0FBQztJQUM1RFAsTUFBTSxDQUFDZSxVQUFVLENBQUNOLEtBQUssQ0FBQyxDQUFDTixJQUFJLENBQUMsR0FBRyxDQUFDOztJQUVsQztJQUNBLE1BQU1DLFNBQVMsQ0FBQ1ksU0FBUyxDQUFDO01BQUVULElBQUksRUFBRTtJQUFPLENBQUMsQ0FBQztJQUMzQyxNQUFNVSxVQUFVLEdBQUcsTUFBTWIsU0FBUyxDQUFDVSxPQUFPLENBQUM7TUFBRVAsSUFBSSxFQUFFO0lBQU8sQ0FBQyxDQUFDO0lBQzVEUCxNQUFNLENBQUNpQixVQUFVLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7RUFDL0IsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119