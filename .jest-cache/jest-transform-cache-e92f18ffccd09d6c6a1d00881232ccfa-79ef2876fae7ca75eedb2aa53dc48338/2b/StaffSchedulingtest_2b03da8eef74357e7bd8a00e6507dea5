07460e6a692aac2450e874832dd3b0e7
"use strict";

// Mock the modules
_getJestObj().mock('axios');
_getJestObj().mock('../../context/SocketContext', () => _objectSpread(_objectSpread({}, jest.requireActual('../../context/SocketContext')), {}, {
  useSocket: () => ({
    socket: {
      on: jest.fn(),
      off: jest.fn(),
      emit: jest.fn()
    },
    updateSchedule: jest.fn()
  })
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../../context/AuthContext");
var _SocketContext = require("../../context/SocketContext");
var _StaffScheduling = _interopRequireDefault(require("../../pages/StaffScheduling"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\components\\__tests__\\StaffScheduling.test.js";
import React from "react";
var __jsx = React.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('StaffScheduling Component', () => {
  const mockSchedules = [{
    id: 'schedule-1',
    staffId: 'staff-1',
    staffName: 'Dr. Smith',
    shiftType: 'regular',
    department: 'Cardiology',
    startTime: '2024-03-01T09:00:00Z',
    endTime: '2024-03-01T17:00:00Z',
    notes: 'Morning shift'
  }, {
    id: 'schedule-2',
    staffId: 'staff-2',
    staffName: 'Dr. Johnson',
    shiftType: 'on-call',
    department: 'Emergency',
    startTime: '2024-03-01T17:00:00Z',
    endTime: '2024-03-02T09:00:00Z',
    notes: 'Night shift'
  }];
  const renderComponent = (role = 'admin') => {
    const mockUser = {
      id: 'user-1',
      role: role
    };
    return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: mockUser,
          hasRole: () => role === 'admin' || role === 'staff'
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SocketContext.SocketProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_StaffScheduling.default, {})
        })
      })
    }));
  };
  beforeEach(() => {
    jest.clearAllMocks();
    _axios.default.get.mockResolvedValue({
      data: mockSchedules
    });
  });
  it('renders access denied for unauthorized users', () => {
    renderComponent('patient');
    expect(_react2.screen.getByText('Access Denied')).toBeInTheDocument();
  });
  it('loads and displays staff schedules', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.get).toHaveBeenCalledWith('/api/staff-schedules');
    });
    expect(_react2.screen.getByText('Staff Scheduling')).toBeInTheDocument();
    expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    expect(_react2.screen.getByText('Dr. Johnson')).toBeInTheDocument();
  });
  it('allows admin to add new schedule', async () => {
    renderComponent();
    const newSchedule = {
      id: 'schedule-3',
      staffId: 'staff-3',
      staffName: 'Dr. Brown',
      shiftType: 'regular',
      department: 'Pediatrics',
      startTime: '2024-03-02T09:00:00Z',
      endTime: '2024-03-02T17:00:00Z',
      notes: 'Morning shift'
    };
    _axios.default.post.mockResolvedValueOnce({
      data: newSchedule
    });

    // Click add schedule button
    const addButton = await _react2.screen.findByText('Add Schedule');
    _react2.fireEvent.click(addButton);

    // Fill out the form
    const staffIdInput = _react2.screen.getByLabelText(/Staff Member/i);
    const departmentInput = _react2.screen.getByLabelText(/Department/i);
    const notesInput = _react2.screen.getByLabelText(/Notes/i);
    _react2.fireEvent.change(staffIdInput, {
      target: {
        value: 'staff-3'
      }
    });
    _react2.fireEvent.change(departmentInput, {
      target: {
        value: 'Pediatrics'
      }
    });
    _react2.fireEvent.change(notesInput, {
      target: {
        value: 'Morning shift'
      }
    });

    // Submit the form
    const saveButton = _react2.screen.getByText('Save');
    _react2.fireEvent.click(saveButton);
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.post).toHaveBeenCalled();
    });
  });
  it('allows admin to edit schedule', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });

    // Click on a schedule to edit
    const scheduleCard = _react2.screen.getByText('Dr. Smith').closest('div');
    _react2.fireEvent.click(scheduleCard);

    // Update the notes
    const notesInput = _react2.screen.getByLabelText(/Notes/i);
    _react2.fireEvent.change(notesInput, {
      target: {
        value: 'Updated shift notes'
      }
    });

    // Save the changes
    const saveButton = _react2.screen.getByText('Save');
    _react2.fireEvent.click(saveButton);
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.put).toHaveBeenCalled();
    });
  });
  it('allows admin to delete schedule', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });

    // Click on a schedule to edit
    const scheduleCard = _react2.screen.getByText('Dr. Smith').closest('div');
    _react2.fireEvent.click(scheduleCard);

    // Click delete button
    const deleteButton = _react2.screen.getByText('Delete');
    _react2.fireEvent.click(deleteButton);
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.delete).toHaveBeenCalledWith('/api/staff-schedules/schedule-1');
    });
  });
  it('handles error states', async () => {
    _axios.default.get.mockRejectedValueOnce(new Error('Failed to load schedules'));
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to load schedules')).toBeInTheDocument();
    });
  });
  it('updates schedule display when receiving WebSocket events', async () => {
    const {
      rerender
    } = renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });

    // Simulate receiving a WebSocket update
    const updatedSchedule = _objectSpread(_objectSpread({}, mockSchedules[0]), {}, {
      notes: 'Updated via WebSocket'
    });
    _axios.default.get.mockResolvedValueOnce({
      data: [updatedSchedule, mockSchedules[1]]
    });
    rerender(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: {
            id: 'user-1',
            role: 'admin'
          },
          hasRole: () => true
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SocketContext.SocketProvider, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_StaffScheduling.default, {})
        })
      })
    }));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Updated via WebSocket')).toBeInTheDocument();
    });
  });
  it('restricts edit/delete actions for non-admin users', async () => {
    renderComponent('staff');
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Dr. Smith')).toBeInTheDocument();
    });
    expect(_react2.screen.queryByText('Add Schedule')).not.toBeInTheDocument();
    expect(_react2.screen.queryByText('Delete')).not.toBeInTheDocument();
  });
  it('renders the Staff Scheduling page', () => {
    (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_StaffScheduling.default, {}));
    expect(_react2.screen.getByText('Staff Scheduling')).toBeInTheDocument();
    expect(_react2.screen.getByText('Welcome to the Staff Scheduling page.')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,