{"version":3,"names":["_react2","require","_PaymentMethods","_interopRequireDefault","_jsxFileName","__jsx","_react","default","createElement","mockPaymentMethods","id","cardType","last4","expiry","cardholderName","isDefault","it","render","paymentMethods","__self","__source","fileName","lineNumber","columnNumber","waitFor","list","screen","getByRole","expect","toBeInTheDocument","items","getAllByRole","toHaveLength","length","getByText","defaultBadge"],"sources":["PaymentMethods.test.js"],"sourcesContent":["import { render, screen, waitFor } from '@testing-library/react';\r\nimport PaymentMethods from '../PaymentMethods';\r\n\r\nconst mockPaymentMethods = [\r\n  {\r\n    id: '1',\r\n    cardType: 'Visa',\r\n    last4: '1234',\r\n    expiry: '12/23',\r\n    cardholderName: 'John Doe',\r\n    isDefault: true,\r\n  },\r\n  {\r\n    id: '2',\r\n    cardType: 'MasterCard',\r\n    last4: '5678',\r\n    expiry: '11/24',\r\n    cardholderName: 'Jane Smith',\r\n    isDefault: false,\r\n  },\r\n];\r\n\r\n// Test for rendering payment methods\r\nit('renders payment methods list correctly', async () => {\r\n  render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\r\n\r\n  await waitFor(() => {\r\n    const list = screen.getByRole('list');\r\n    expect(list).toBeInTheDocument();\r\n\r\n    const items = screen.getAllByRole('listitem');\r\n    expect(items).toHaveLength(mockPaymentMethods.length);\r\n\r\n    expect(screen.getByText('Visa •••• 1234')).toBeInTheDocument();\r\n    expect(screen.getByText('MasterCard •••• 5678')).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n// Test for no payment methods\r\nit('displays message when no payment methods are present', async () => {\r\n  render(<PaymentMethods paymentMethods={[]} />);\r\n\r\n  await waitFor(() => {\r\n    expect(screen.getByText('No payment methods available.')).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n// Test for setting default payment method\r\nit('handles setting a default payment method', async () => {\r\n  render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\r\n\r\n  await waitFor(() => {\r\n    const defaultBadge = screen.getByText('Default');\r\n    expect(defaultBadge).toBeInTheDocument();\r\n  });\r\n}); "],"mappings":";;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,eAAA,GAAAC,sBAAA,CAAAF,OAAA;AAA+C,IAAAG,YAAA;AAAA,IAAAC,KAAA,GAAAC,MAAA,CAAAC,OAAA,CAAAC,aAAA;AAE/C,MAAMC,kBAAkB,GAAG,CACzB;EACEC,EAAE,EAAE,GAAG;EACPC,QAAQ,EAAE,MAAM;EAChBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,OAAO;EACfC,cAAc,EAAE,UAAU;EAC1BC,SAAS,EAAE;AACb,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPC,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,OAAO;EACfC,cAAc,EAAE,YAAY;EAC5BC,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACAC,EAAE,CAAC,wCAAwC,EAAE,YAAY;EACvD,IAAAC,cAAM,EAACZ,KAAA,CAACH,eAAA,CAAAK,OAAc;IAACW,cAAc,EAAET,kBAAmB;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;EAE9D,MAAM,IAAAC,eAAO,EAAC,MAAM;IAClB,MAAMC,IAAI,GAAGC,cAAM,CAACC,SAAS,CAAC,MAAM,CAAC;IACrCC,MAAM,CAACH,IAAI,CAAC,CAACI,iBAAiB,CAAC,CAAC;IAEhC,MAAMC,KAAK,GAAGJ,cAAM,CAACK,YAAY,CAAC,UAAU,CAAC;IAC7CH,MAAM,CAACE,KAAK,CAAC,CAACE,YAAY,CAACvB,kBAAkB,CAACwB,MAAM,CAAC;IAErDL,MAAM,CAACF,cAAM,CAACQ,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAACL,iBAAiB,CAAC,CAAC;IAC9DD,MAAM,CAACF,cAAM,CAACQ,SAAS,CAAC,sBAAsB,CAAC,CAAC,CAACL,iBAAiB,CAAC,CAAC;EACtE,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAb,EAAE,CAAC,sDAAsD,EAAE,YAAY;EACrE,IAAAC,cAAM,EAACZ,KAAA,CAACH,eAAA,CAAAK,OAAc;IAACW,cAAc,EAAE,EAAG;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;EAE9C,MAAM,IAAAC,eAAO,EAAC,MAAM;IAClBI,MAAM,CAACF,cAAM,CAACQ,SAAS,CAAC,+BAA+B,CAAC,CAAC,CAACL,iBAAiB,CAAC,CAAC;EAC/E,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAb,EAAE,CAAC,0CAA0C,EAAE,YAAY;EACzD,IAAAC,cAAM,EAACZ,KAAA,CAACH,eAAA,CAAAK,OAAc;IAACW,cAAc,EAAET,kBAAmB;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;EAE9D,MAAM,IAAAC,eAAO,EAAC,MAAM;IAClB,MAAMW,YAAY,GAAGT,cAAM,CAACQ,SAAS,CAAC,SAAS,CAAC;IAChDN,MAAM,CAACO,YAAY,CAAC,CAACN,iBAAiB,CAAC,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}