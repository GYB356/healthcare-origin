b95b996af3b51971207698da593c3974
"use strict";

var _vitest = require("vitest");
var _server = require("next/server");
var _nextAuth = require("next-auth");
var _client = require("@prisma/client");
var _route = require("@/app/api/patients/[id]/route");
var _route2 = require("@/app/api/patients/search/route");
var _route3 = require("@/app/api/patients/route");
// Mock next-auth
_vitest.vi.mock('next-auth', () => ({
  getServerSession: _vitest.vi.fn()
}));

// Mock Prisma
_vitest.vi.mock('@prisma/client', () => ({
  PrismaClient: _vitest.vi.fn(() => ({
    user: {
      findMany: _vitest.vi.fn(),
      findUnique: _vitest.vi.fn(),
      create: _vitest.vi.fn(),
      update: _vitest.vi.fn(),
      delete: _vitest.vi.fn()
    },
    patientProfile: {
      findMany: _vitest.vi.fn(),
      findUnique: _vitest.vi.fn(),
      create: _vitest.vi.fn(),
      update: _vitest.vi.fn(),
      delete: _vitest.vi.fn()
    },
    $transaction: _vitest.vi.fn(callback => callback())
  }))
}));
(0, _vitest.describe)('Patients API', () => {
  let mockPrisma;
  let mockSession;
  (0, _vitest.beforeEach)(() => {
    mockPrisma = new _client.PrismaClient();
    mockSession = {
      user: {
        id: 'test-user-id',
        role: 'ADMIN'
      }
    };
    _nextAuth.getServerSession.mockResolvedValue(mockSession);
  });
  (0, _vitest.afterEach)(() => {
    _vitest.vi.clearAllMocks();
  });
  (0, _vitest.describe)('GET /api/patients', () => {
    (0, _vitest.it)('should return 401 if user is not authenticated', async () => {
      ;
      _nextAuth.getServerSession.mockResolvedValue(null);
      const request = new _server.NextRequest('http://localhost:3000/api/patients');
      const response = await (0, _route3.GET)(request);
      (0, _vitest.expect)(response.status).toBe(401);
    });
    (0, _vitest.it)('should return 403 if user is not authorized', async () => {
      mockSession.user.role = 'PATIENT';
      const request = new _server.NextRequest('http://localhost:3000/api/patients');
      const response = await (0, _route3.GET)(request);
      (0, _vitest.expect)(response.status).toBe(403);
    });
    (0, _vitest.it)('should return list of patients with pagination', async () => {
      const mockPatients = [{
        id: '1',
        name: 'John Doe',
        email: 'john@example.com'
      }, {
        id: '2',
        name: 'Jane Smith',
        email: 'jane@example.com'
      }];
      mockPrisma.user.findMany.mockResolvedValue(mockPatients);
      const request = new _server.NextRequest('http://localhost:3000/api/patients?page=1&limit=10');
      const response = await (0, _route3.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data.patients).toEqual(mockPatients);
      (0, _vitest.expect)(mockPrisma.user.findMany).toHaveBeenCalledWith({
        where: {
          role: 'PATIENT'
        },
        skip: 0,
        take: 10,
        include: {
          patientProfile: true
        }
      });
    });
  });
  (0, _vitest.describe)('GET /api/patients/search', () => {
    (0, _vitest.it)('should return matching patients', async () => {
      const mockPatients = [{
        id: '1',
        name: 'John Doe',
        email: 'john@example.com'
      }];
      mockPrisma.user.findMany.mockResolvedValue(mockPatients);
      const request = new _server.NextRequest('http://localhost:3000/api/patients/search?q=john');
      const response = await (0, _route2.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data.patients).toEqual(mockPatients);
      (0, _vitest.expect)(mockPrisma.user.findMany).toHaveBeenCalledWith({
        where: {
          role: 'PATIENT',
          OR: [{
            name: {
              contains: 'john',
              mode: 'insensitive'
            }
          }, {
            email: {
              contains: 'john',
              mode: 'insensitive'
            }
          }]
        },
        include: {
          patientProfile: true
        }
      });
    });
  });
  (0, _vitest.describe)('GET /api/patients/[id]', () => {
    (0, _vitest.it)('should return patient data for valid ID', async () => {
      const mockPatient = {
        id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        patientProfile: {
          dateOfBirth: '1990-01-01',
          bloodType: 'A+'
        }
      };
      mockPrisma.user.findUnique.mockResolvedValue(mockPatient);
      const request = new _server.NextRequest('http://localhost:3000/api/patients/1');
      const response = await (0, _route.GET)(request, {
        params: {
          id: '1'
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data.patient).toEqual(mockPatient);
    });
    (0, _vitest.it)('should return 404 for non-existent patient', async () => {
      mockPrisma.user.findUnique.mockResolvedValue(null);
      const request = new _server.NextRequest('http://localhost:3000/api/patients/999');
      const response = await (0, _route.GET)(request, {
        params: {
          id: '999'
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
  (0, _vitest.describe)('PUT /api/patients/[id]', () => {
    (0, _vitest.it)('should update patient profile', async () => {
      const mockPatient = {
        id: '1',
        name: 'John Doe',
        patientProfile: {
          id: 'profile-1',
          dateOfBirth: '1990-01-01',
          bloodType: 'A+'
        }
      };
      mockPrisma.user.update.mockResolvedValue(mockPatient);
      const request = new _server.NextRequest('http://localhost:3000/api/patients/1', {
        method: 'PUT',
        body: JSON.stringify({
          name: 'John Doe',
          dateOfBirth: '1990-01-01',
          bloodType: 'A+'
        })
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: '1'
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data.patient).toEqual(mockPatient);
    });
    (0, _vitest.it)('should validate required fields', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/patients/1', {
        method: 'PUT',
        body: JSON.stringify({})
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(400);
    });
  });
  (0, _vitest.describe)('DELETE /api/patients/[id]', () => {
    (0, _vitest.it)('should delete patient', async () => {
      mockPrisma.user.delete.mockResolvedValue({
        id: '1'
      });
      const request = new _server.NextRequest('http://localhost:3000/api/patients/1', {
        method: 'DELETE'
      });
      const response = await (0, _route.DELETE)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(200);
    });
    (0, _vitest.it)('should return 404 for non-existent patient', async () => {
      mockPrisma.user.delete.mockRejectedValue(new Error('Record not found'));
      const request = new _server.NextRequest('http://localhost:3000/api/patients/999', {
        method: 'DELETE'
      });
      const response = await (0, _route.DELETE)(request, {
        params: {
          id: '999'
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,