{"version":3,"names":["_vitest","require","_server","_nextAuth","_client","_route","_route2","_route3","vi","mock","getServerSession","fn","PrismaClient","user","findMany","findUnique","create","update","delete","patientProfile","$transaction","callback","describe","mockPrisma","mockSession","beforeEach","id","role","mockResolvedValue","afterEach","clearAllMocks","it","request","NextRequest","response","listGET","expect","status","toBe","mockPatients","name","email","data","json","patients","toEqual","toHaveBeenCalledWith","where","skip","take","include","searchGET","OR","contains","mode","mockPatient","dateOfBirth","bloodType","GET","params","patient","method","body","JSON","stringify","PUT","DELETE","mockRejectedValue","Error"],"sources":["patients.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'\nimport { NextRequest } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { PrismaClient } from '@prisma/client'\nimport { GET, POST, PUT, DELETE } from '@/app/api/patients/[id]/route'\nimport { GET as searchGET } from '@/app/api/patients/search/route'\nimport { GET as listGET } from '@/app/api/patients/route'\n\n// Mock next-auth\nvi.mock('next-auth', () => ({\n  getServerSession: vi.fn(),\n}))\n\n// Mock Prisma\nvi.mock('@prisma/client', () => ({\n  PrismaClient: vi.fn(() => ({\n    user: {\n      findMany: vi.fn(),\n      findUnique: vi.fn(),\n      create: vi.fn(),\n      update: vi.fn(),\n      delete: vi.fn(),\n    },\n    patientProfile: {\n      findMany: vi.fn(),\n      findUnique: vi.fn(),\n      create: vi.fn(),\n      update: vi.fn(),\n      delete: vi.fn(),\n    },\n    $transaction: vi.fn(callback => callback()),\n  })),\n}))\n\ndescribe('Patients API', () => {\n  let mockPrisma: any\n  let mockSession: any\n\n  beforeEach(() => {\n    mockPrisma = new PrismaClient()\n    mockSession = {\n      user: {\n        id: 'test-user-id',\n        role: 'ADMIN',\n      },\n    }\n    ;(getServerSession as any).mockResolvedValue(mockSession)\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('GET /api/patients', () => {\n    it('should return 401 if user is not authenticated', async () => {\n      ;(getServerSession as any).mockResolvedValue(null)\n      const request = new NextRequest('http://localhost:3000/api/patients')\n      const response = await listGET(request)\n      expect(response.status).toBe(401)\n    })\n\n    it('should return 403 if user is not authorized', async () => {\n      mockSession.user.role = 'PATIENT'\n      const request = new NextRequest('http://localhost:3000/api/patients')\n      const response = await listGET(request)\n      expect(response.status).toBe(403)\n    })\n\n    it('should return list of patients with pagination', async () => {\n      const mockPatients = [\n        { id: '1', name: 'John Doe', email: 'john@example.com' },\n        { id: '2', name: 'Jane Smith', email: 'jane@example.com' },\n      ]\n      mockPrisma.user.findMany.mockResolvedValue(mockPatients)\n\n      const request = new NextRequest('http://localhost:3000/api/patients?page=1&limit=10')\n      const response = await listGET(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.patients).toEqual(mockPatients)\n      expect(mockPrisma.user.findMany).toHaveBeenCalledWith({\n        where: { role: 'PATIENT' },\n        skip: 0,\n        take: 10,\n        include: { patientProfile: true },\n      })\n    })\n  })\n\n  describe('GET /api/patients/search', () => {\n    it('should return matching patients', async () => {\n      const mockPatients = [\n        { id: '1', name: 'John Doe', email: 'john@example.com' },\n      ]\n      mockPrisma.user.findMany.mockResolvedValue(mockPatients)\n\n      const request = new NextRequest('http://localhost:3000/api/patients/search?q=john')\n      const response = await searchGET(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.patients).toEqual(mockPatients)\n      expect(mockPrisma.user.findMany).toHaveBeenCalledWith({\n        where: {\n          role: 'PATIENT',\n          OR: [\n            { name: { contains: 'john', mode: 'insensitive' } },\n            { email: { contains: 'john', mode: 'insensitive' } },\n          ],\n        },\n        include: { patientProfile: true },\n      })\n    })\n  })\n\n  describe('GET /api/patients/[id]', () => {\n    it('should return patient data for valid ID', async () => {\n      const mockPatient = {\n        id: '1',\n        name: 'John Doe',\n        email: 'john@example.com',\n        patientProfile: {\n          dateOfBirth: '1990-01-01',\n          bloodType: 'A+',\n        },\n      }\n      mockPrisma.user.findUnique.mockResolvedValue(mockPatient)\n\n      const request = new NextRequest('http://localhost:3000/api/patients/1')\n      const response = await GET(request, { params: { id: '1' } })\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.patient).toEqual(mockPatient)\n    })\n\n    it('should return 404 for non-existent patient', async () => {\n      mockPrisma.user.findUnique.mockResolvedValue(null)\n\n      const request = new NextRequest('http://localhost:3000/api/patients/999')\n      const response = await GET(request, { params: { id: '999' } })\n\n      expect(response.status).toBe(404)\n    })\n  })\n\n  describe('PUT /api/patients/[id]', () => {\n    it('should update patient profile', async () => {\n      const mockPatient = {\n        id: '1',\n        name: 'John Doe',\n        patientProfile: {\n          id: 'profile-1',\n          dateOfBirth: '1990-01-01',\n          bloodType: 'A+',\n        },\n      }\n      mockPrisma.user.update.mockResolvedValue(mockPatient)\n\n      const request = new NextRequest('http://localhost:3000/api/patients/1', {\n        method: 'PUT',\n        body: JSON.stringify({\n          name: 'John Doe',\n          dateOfBirth: '1990-01-01',\n          bloodType: 'A+',\n        }),\n      })\n      const response = await PUT(request, { params: { id: '1' } })\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.patient).toEqual(mockPatient)\n    })\n\n    it('should validate required fields', async () => {\n      const request = new NextRequest('http://localhost:3000/api/patients/1', {\n        method: 'PUT',\n        body: JSON.stringify({}),\n      })\n      const response = await PUT(request, { params: { id: '1' } })\n\n      expect(response.status).toBe(400)\n    })\n  })\n\n  describe('DELETE /api/patients/[id]', () => {\n    it('should delete patient', async () => {\n      mockPrisma.user.delete.mockResolvedValue({ id: '1' })\n\n      const request = new NextRequest('http://localhost:3000/api/patients/1', {\n        method: 'DELETE',\n      })\n      const response = await DELETE(request, { params: { id: '1' } })\n\n      expect(response.status).toBe(200)\n    })\n\n    it('should return 404 for non-existent patient', async () => {\n      mockPrisma.user.delete.mockRejectedValue(new Error('Record not found'))\n\n      const request = new NextRequest('http://localhost:3000/api/patients/999', {\n        method: 'DELETE',\n      })\n      const response = await DELETE(request, { params: { id: '999' } })\n\n      expect(response.status).toBe(404)\n    })\n  })\n}) "],"mappings":"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","ignoreList":[]}