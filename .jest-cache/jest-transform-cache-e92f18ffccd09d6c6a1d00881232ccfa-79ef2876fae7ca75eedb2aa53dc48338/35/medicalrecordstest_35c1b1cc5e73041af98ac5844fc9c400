ad687952ead19e98ebb7d8bc80dd68ca
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _vitest = require("vitest");
var _nodeMocksHttp = require("node-mocks-http");
var _route = require("@/app/api/medical-records/[id]/route");
var _route2 = require("@/app/api/medical-records/route");
var _prisma = require("@/lib/prisma");
var _nextAuth = require("next-auth");
var _server = require("next/server");
var _blob = require("@vercel/blob");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
_vitest.vi.mock("next-auth");
_vitest.vi.mock("@vercel/blob");
(0, _vitest.describe)("Medical Records API", () => {
  let mockUser;
  let mockPatient;
  let mockDoctor;
  let mockPrisma;
  let mockSession;
  (0, _vitest.beforeEach)(async () => {
    // Create test users
    mockPatient = await _prisma.prisma.user.create({
      data: {
        name: "Test Patient",
        email: "patient@test.com",
        role: "PATIENT"
      }
    });
    mockDoctor = await _prisma.prisma.user.create({
      data: {
        name: "Test Doctor",
        email: "doctor@test.com",
        role: "DOCTOR"
      }
    });
    mockPrisma = new _prisma.prisma.PrismaClient();
    mockSession = {
      user: {
        id: 'doctor-id',
        role: 'DOCTOR'
      }
    };
    _nextAuth.getServerSession.mockResolvedValue(mockSession);
  });
  (0, _vitest.afterEach)(async () => {
    // Clean up test data
    await _prisma.prisma.auditLog.deleteMany();
    await _prisma.prisma.attachment.deleteMany();
    await _prisma.prisma.medicalRecord.deleteMany();
    await _prisma.prisma.user.deleteMany();
    _vitest.vi.clearAllMocks();
  });
  (0, _vitest.describe)("GET /api/medical-records", () => {
    (0, _vitest.it)("should return 401 if user is not authenticated", async () => {
      const {
        req,
        res
      } = (0, _nodeMocksHttp.createMocks)({
        method: "GET"
      });
      _vitest.vi.mocked(_nextAuth.getServerSession).mockResolvedValueOnce(null);
      await (0, _route2.GET)(req);
      (0, _vitest.expect)(res._getStatusCode()).toBe(401);
    });
    (0, _vitest.it)("should return medical records for authenticated doctor", async () => {
      const {
        req,
        res
      } = (0, _nodeMocksHttp.createMocks)({
        method: "GET"
      });
      _vitest.vi.mocked(_nextAuth.getServerSession).mockResolvedValueOnce({
        user: mockDoctor
      });

      // Create test medical record
      await _prisma.prisma.medicalRecord.create({
        data: {
          type: "CONSULTATION",
          date: new Date(),
          description: "Test consultation",
          patientId: mockPatient.id,
          doctorId: mockDoctor.id
        }
      });
      const response = await (0, _route2.GET)(req);
      const data = await response.json();
      (0, _vitest.expect)(data.records).toBeDefined();
      (0, _vitest.expect)(data.records.length).toBe(1);
      (0, _vitest.expect)(data.pagination).toBeDefined();
    });
    (0, _vitest.it)("should filter records by patient for patient users", async () => {
      mockSession.user.role = "PATIENT";
      mockSession.user.id = "patient-id";
      const mockRecords = [{
        id: "1",
        patientId: "patient-id",
        type: "CONSULTATION"
      }];
      mockPrisma.medicalRecord.findMany.mockResolvedValue(mockRecords);
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records");
      const response = await (0, _route2.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockRecords);
      (0, _vitest.expect)(mockPrisma.medicalRecord.findMany).toHaveBeenCalledWith(_vitest.expect.objectContaining({
        where: _vitest.expect.objectContaining({
          patientId: "patient-id"
        })
      }));
    });
  });
  (0, _vitest.describe)("GET /api/medical-records/[id]", () => {
    (0, _vitest.it)("should return 401 for unauthenticated users", async () => {
      _vitest.vi.mocked(_nextAuth.getServerSession).mockResolvedValueOnce(null);
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records/1");
      const response = await (0, _route.GET)(request, {
        params: {
          id: "1"
        }
      });
      (0, _vitest.expect)(response.status).toBe(401);
    });
    (0, _vitest.it)("should return medical record for valid ID", async () => {
      const mockRecord = {
        id: "1",
        patientId: "1",
        type: "CONSULTATION",
        doctorId: "doctor-id"
      };
      mockPrisma.medicalRecord.findUnique.mockResolvedValue(mockRecord);
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records/1");
      const response = await (0, _route.GET)(request, {
        params: {
          id: "1"
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockRecord);
    });
    (0, _vitest.it)("should return 404 for non-existent record", async () => {
      ;
      mockPrisma.medicalRecord.findUnique.mockResolvedValue(null);
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records/999");
      const response = await (0, _route.GET)(request, {
        params: {
          id: "999"
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
  (0, _vitest.describe)("POST /api/medical-records", () => {
    (0, _vitest.it)("should return 401 if user is not a doctor", async () => {
      const {
        req,
        res
      } = (0, _nodeMocksHttp.createMocks)({
        method: "POST",
        body: {
          patientId: mockPatient.id,
          type: "CONSULTATION",
          date: new Date().toISOString(),
          description: "Test consultation"
        }
      });
      _vitest.vi.mocked(_nextAuth.getServerSession).mockResolvedValueOnce({
        user: mockPatient
      });
      await (0, _route.POST)(req);
      (0, _vitest.expect)(res._getStatusCode()).toBe(401);
    });
    (0, _vitest.it)("should create a new medical record", async () => {
      const mockRecord = {
        patientId: "1",
        type: "CONSULTATION",
        description: "Regular checkup"
      };
      mockPrisma.medicalRecord.create.mockResolvedValue(_objectSpread(_objectSpread({
        id: "1"
      }, mockRecord), {}, {
        doctorId: "doctor-id"
      }));
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records", {
        method: "POST",
        body: JSON.stringify(mockRecord)
      });
      const response = await (0, _route.POST)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(201);
      (0, _vitest.expect)(data.id).toBe("1");
      (0, _vitest.expect)(data.doctorId).toBe("doctor-id");
    });
    (0, _vitest.it)("should validate required fields", async () => {
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records", {
        method: "POST",
        body: JSON.stringify({})
      });
      const response = await (0, _route.POST)(request);
      (0, _vitest.expect)(response.status).toBe(400);
    });
    (0, _vitest.it)("should handle file uploads", async () => {
      const mockFile = new File(["test"], "test.pdf", {
        type: "application/pdf"
      });
      _blob.put.mockResolvedValue({
        url: "https://example.com/test.pdf"
      });
      const formData = new FormData();
      formData.append("file", mockFile);
      formData.append("data", JSON.stringify({
        patientId: "1",
        type: "CONSULTATION",
        description: "With attachment"
      }));
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records", {
        method: "POST",
        body: formData
      });
      const response = await (0, _route.POST)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(201);
      (0, _vitest.expect)(data.attachments).toContainEqual({
        url: "https://example.com/test.pdf",
        name: "test.pdf",
        type: "application/pdf"
      });
    });
  });
  (0, _vitest.describe)("PUT /api/medical-records/[id]", () => {
    (0, _vitest.it)("should update an existing record", async () => {
      const mockRecord = {
        id: "1",
        description: "Updated description"
      };
      mockPrisma.medicalRecord.update.mockResolvedValue(mockRecord);
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records/1", {
        method: "PUT",
        body: JSON.stringify({
          description: "Updated description"
        })
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: "1"
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data.description).toBe("Updated description");
    });
    (0, _vitest.it)("should return 404 for non-existent record", async () => {
      ;
      mockPrisma.medicalRecord.update.mockRejectedValue(new Error("Not found"));
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records/999", {
        method: "PUT",
        body: JSON.stringify({
          description: "Updated"
        })
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: "999"
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
  (0, _vitest.describe)("DELETE /api/medical-records/[id]", () => {
    (0, _vitest.it)("should delete an existing record", async () => {
      ;
      mockPrisma.medicalRecord.delete.mockResolvedValue({
        id: "1"
      });
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records/1", {
        method: "DELETE"
      });
      const response = await (0, _route.DELETE)(request, {
        params: {
          id: "1"
        }
      });
      (0, _vitest.expect)(response.status).toBe(204);
    });
    (0, _vitest.it)("should return 404 for non-existent record", async () => {
      ;
      mockPrisma.medicalRecord.delete.mockRejectedValue(new Error("Not found"));
      const request = new _server.NextRequest("http://localhost:3000/api/medical-records/999", {
        method: "DELETE"
      });
      const response = await (0, _route.DELETE)(request, {
        params: {
          id: "999"
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,