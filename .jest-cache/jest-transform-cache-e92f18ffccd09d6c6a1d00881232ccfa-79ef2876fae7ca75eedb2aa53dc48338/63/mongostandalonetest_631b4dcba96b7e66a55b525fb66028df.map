{"version":3,"names":["mongoose","require","MongoMemoryServer","mongoServer","beforeAll","create","binary","version","downloadDir","uri","getUri","connect","useNewUrlParser","useUnifiedTopology","afterAll","disconnect","stop","describe","test","expect","connection","readyState","toBe","TestModel","model","Schema","name","String","value","Number","testDoc","save","savedDoc","findOne","updatedDoc","deleteOne","deletedDoc","toBeNull"],"sources":["mongo-standalone.test.js"],"sourcesContent":["/**\r\n * MongoDB Standalone Test\r\n * \r\n * This test verifies MongoDB connections without relying on the Jest setup file\r\n */\r\n\r\nconst mongoose = require('mongoose');\r\nconst { MongoMemoryServer } = require('mongodb-memory-server');\r\n\r\nlet mongoServer;\r\n\r\nbeforeAll(async () => {\r\n  mongoServer = await MongoMemoryServer.create({\r\n    binary: {\r\n      version: '6.0.4',\r\n      downloadDir: './.cache/mongodb-memory-server/mongodb-binaries'\r\n    }\r\n  });\r\n  \r\n  const uri = mongoServer.getUri();\r\n  await mongoose.connect(uri, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  });\r\n});\r\n\r\nafterAll(async () => {\r\n  await mongoose.disconnect();\r\n  await mongoServer.stop();\r\n});\r\n\r\ndescribe('MongoDB Basic Operations', () => {\r\n  test('should connect successfully', () => {\r\n    expect(mongoose.connection.readyState).toBe(1);\r\n  });\r\n  \r\n  test('should perform CRUD operations', async () => {\r\n    // Create a test model\r\n    const TestModel = mongoose.model('Test', new mongoose.Schema({\r\n      name: String,\r\n      value: Number\r\n    }));\r\n    \r\n    // Create\r\n    const testDoc = new TestModel({ name: 'test', value: 42 });\r\n    await testDoc.save();\r\n    \r\n    // Read\r\n    const savedDoc = await TestModel.findOne({ name: 'test' });\r\n    expect(savedDoc.name).toBe('test');\r\n    expect(savedDoc.value).toBe(42);\r\n    \r\n    // Update\r\n    savedDoc.value = 100;\r\n    await savedDoc.save();\r\n    \r\n    const updatedDoc = await TestModel.findOne({ name: 'test' });\r\n    expect(updatedDoc.value).toBe(100);\r\n    \r\n    // Delete\r\n    await TestModel.deleteOne({ name: 'test' });\r\n    const deletedDoc = await TestModel.findOne({ name: 'test' });\r\n    expect(deletedDoc).toBeNull();\r\n  });\r\n}); "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAM;EAAEC;AAAkB,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE9D,IAAIE,WAAW;AAEfC,SAAS,CAAC,YAAY;EACpBD,WAAW,GAAG,MAAMD,iBAAiB,CAACG,MAAM,CAAC;IAC3CC,MAAM,EAAE;MACNC,OAAO,EAAE,OAAO;MAChBC,WAAW,EAAE;IACf;EACF,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAGN,WAAW,CAACO,MAAM,CAAC,CAAC;EAChC,MAAMV,QAAQ,CAACW,OAAO,CAACF,GAAG,EAAE;IAC1BG,eAAe,EAAE,IAAI;IACrBC,kBAAkB,EAAE;EACtB,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFC,QAAQ,CAAC,YAAY;EACnB,MAAMd,QAAQ,CAACe,UAAU,CAAC,CAAC;EAC3B,MAAMZ,WAAW,CAACa,IAAI,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEFC,QAAQ,CAAC,0BAA0B,EAAE,MAAM;EACzCC,IAAI,CAAC,6BAA6B,EAAE,MAAM;IACxCC,MAAM,CAACnB,QAAQ,CAACoB,UAAU,CAACC,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;EAEFJ,IAAI,CAAC,gCAAgC,EAAE,YAAY;IACjD;IACA,MAAMK,SAAS,GAAGvB,QAAQ,CAACwB,KAAK,CAAC,MAAM,EAAE,IAAIxB,QAAQ,CAACyB,MAAM,CAAC;MAC3DC,IAAI,EAAEC,MAAM;MACZC,KAAK,EAAEC;IACT,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMC,OAAO,GAAG,IAAIP,SAAS,CAAC;MAAEG,IAAI,EAAE,MAAM;MAAEE,KAAK,EAAE;IAAG,CAAC,CAAC;IAC1D,MAAME,OAAO,CAACC,IAAI,CAAC,CAAC;;IAEpB;IACA,MAAMC,QAAQ,GAAG,MAAMT,SAAS,CAACU,OAAO,CAAC;MAAEP,IAAI,EAAE;IAAO,CAAC,CAAC;IAC1DP,MAAM,CAACa,QAAQ,CAACN,IAAI,CAAC,CAACJ,IAAI,CAAC,MAAM,CAAC;IAClCH,MAAM,CAACa,QAAQ,CAACJ,KAAK,CAAC,CAACN,IAAI,CAAC,EAAE,CAAC;;IAE/B;IACAU,QAAQ,CAACJ,KAAK,GAAG,GAAG;IACpB,MAAMI,QAAQ,CAACD,IAAI,CAAC,CAAC;IAErB,MAAMG,UAAU,GAAG,MAAMX,SAAS,CAACU,OAAO,CAAC;MAAEP,IAAI,EAAE;IAAO,CAAC,CAAC;IAC5DP,MAAM,CAACe,UAAU,CAACN,KAAK,CAAC,CAACN,IAAI,CAAC,GAAG,CAAC;;IAElC;IACA,MAAMC,SAAS,CAACY,SAAS,CAAC;MAAET,IAAI,EAAE;IAAO,CAAC,CAAC;IAC3C,MAAMU,UAAU,GAAG,MAAMb,SAAS,CAACU,OAAO,CAAC;MAAEP,IAAI,EAAE;IAAO,CAAC,CAAC;IAC5DP,MAAM,CAACiB,UAAU,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC/B,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}