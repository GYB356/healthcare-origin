1287ae6d8c502c18ebca975d4c04280b
// Mock next/image with better error handling
_getJestObj().mock('next/image', () => ({
  __esModule: true,
  default: props => {
    return {
      type: 'img',
      props: _objectSpread(_objectSpread({}, props), {}, {
        alt: props.alt || ''
      })
    };
  }
}));

// Enhanced next/auth mock with better type safety
_getJestObj().mock('next-auth', () => ({
  __esModule: true,
  getServerSession: jest.fn(() => ({
    user: {
      id: '1',
      name: 'Test User',
      email: 'test@example.com',
      role: 'DOCTOR'
    },
    expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
  })),
  signIn: jest.fn(),
  signOut: jest.fn()
}));

// Enhanced next/navigation mock
_getJestObj().mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
    back: jest.fn(),
    pathname: '/',
    query: {},
    events: {
      on: jest.fn(),
      off: jest.fn(),
      emit: jest.fn()
    }
  }),
  usePathname: () => '/',
  useSearchParams: () => new URLSearchParams()
}));

// Enhanced socket.io-client mock with better event handling
_getJestObj().mock('socket.io-client', () => {
  const mockSocket = {
    on: jest.fn(),
    emit: jest.fn(),
    connect: jest.fn(),
    disconnect: jest.fn(),
    close: jest.fn(),
    join: jest.fn(),
    leave: jest.fn(),
    connected: false,
    id: 'test-socket-id'
  };
  return {
    io: jest.fn(() => mockSocket),
    connect: jest.fn(() => mockSocket)
  };
});

// Enhanced http server mock
_getJestObj().mock('http', () => ({
  createServer: jest.fn(() => ({
    listen: jest.fn((port, callback) => {
      if (callback) callback();
      return {
        port: port || 3001
      };
    }),
    close: jest.fn(callback => {
      if (callback) callback();
    }),
    address: jest.fn(() => ({
      port: 3001
    }))
  }))
}));

// Enhanced PrismaClient mock with better error handling
_getJestObj().mock('@prisma/client', () => {
  const mockPrisma = {
    user: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    patient: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    appointment: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    availability: {
      findUnique: jest.fn(),
      findFirst: jest.fn(),
      findMany: jest.fn(),
      create: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
      upsert: jest.fn()
    },
    $connect: jest.fn(),
    $disconnect: jest.fn(),
    $transaction: jest.fn()
  };
  return {
    PrismaClient: jest.fn(() => mockPrisma)
  };
});

// Increase timeout for all tests

// Enhanced WebSocket mock with better error handling
_getJestObj().mock('ws', () => {
  return jest.fn().mockImplementation(() => ({
    on: jest.fn(),
    send: jest.fn(),
    close: jest.fn(),
    readyState: 0,
    ping: jest.fn(),
    terminate: jest.fn()
  }));
});

// Global setup
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
require('dotenv').config({
  path: '.env.test'
});
const {
  connectDB,
  closeDB,
  clearDB
} = require('./__tests__/helpers/testUtils');
require('@testing-library/jest-dom');
const {
  TextEncoder,
  TextDecoder
} = require('util');
const fetchMock = require('jest-fetch-mock');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
const mongoose = require('mongoose');
const React = require('react');

// Set test environment variables
process.env.JWT_SECRET = 'test-secret-key';
process.env.NEXT_PUBLIC_API_URL = 'http://localhost:3000/api';
process.env.NEXT_PUBLIC_WS_URL = 'ws://localhost:3001';

// Polyfills
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;

// Mock fetch with better error handling
fetchMock.enableMocks();
fetchMock.dontMockIf(/^https:\/\/fonts\.googleapis\.com/);
fetchMock.dontMockIf(/^https:\/\/fonts\.gstatic\.com/);
jest.setTimeout(30000);

// Reset mocks after each test
afterEach(() => {
  jest.clearAllMocks();
  fetchMock.resetMocks();
});
let mongod;

// Connect to the in-memory database before running tests
beforeAll(async () => {
  mongod = await MongoMemoryServer.create();
  const uri = mongod.getUri();
  await mongoose.connect(uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
});

// Clear all data between tests
afterEach(async () => {
  const collections = await mongoose.connection.db.collections();
  for (let collection of collections) {
    await collection.deleteMany();
  }
});

// Close database connection after all tests
afterAll(async () => {
  await mongoose.connection.close();
  await mongod.stop();
});
beforeAll(async () => {
  await connectDB();
});

// Clean up after each test
afterEach(async () => {
  await clearDB();
});

// Global teardown
afterAll(async () => {
  await closeDB();
});

// Mock console.error to fail tests
const originalError = console.error;
console.error = (...args) => {
  if (/Warning: ReactDOM.render is no longer supported in React 18/.test(args[0]) || /Warning: useLayoutEffect does nothing on the server/.test(args[0])) {
    return;
  }
  originalError.call(console, ...args);
};

// Mock fetch
global.fetch = jest.fn(() => Promise.resolve({
  json: () => Promise.resolve({}),
  ok: true,
  status: 200
}));

// Mock WebSocket
global.WebSocket = class {
  constructor(url) {
    this.url = url;
    this.readyState = 0;
    this.onmessage = null;
    this.onopen = null;
    this.onclose = null;
    this.onerror = null;
  }
  send(data) {}
  close() {}
};

// Mock IntersectionObserver
global.IntersectionObserver = class {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock ResizeObserver
global.ResizeObserver = class {
  constructor() {}
  observe() {}
  unobserve() {}
  disconnect() {}
};

// Mock matchMedia
global.matchMedia = global.matchMedia || function () {
  return {
    matches: false,
    addListener: function () {},
    removeListener: function () {}
  };
};

// Mock environment variables
process.env.JWT_SECRET = 'test-secret';
process.env.MONGODB_URI = 'mongodb://localhost:27017/test-db';
process.env.NEXTAUTH_SECRET = 'test-nextauth-secret';
process.env.NEXTAUTH_URL = 'http://localhost:3000';

// Clean up after each test
afterEach(() => {
  jest.clearAllMocks();
});

// Global test setup
beforeAll(() => {
  // Add any global setup here
});

// Global test teardown
afterAll(() => {
  // Add any global cleanup here
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,