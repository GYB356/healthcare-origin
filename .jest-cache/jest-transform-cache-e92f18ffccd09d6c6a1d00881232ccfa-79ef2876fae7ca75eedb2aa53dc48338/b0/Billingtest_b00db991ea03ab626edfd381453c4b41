c441884f904586ab5915ea2433348b32
"use strict";

// Mock the AuthContext
_getJestObj().mock('../context/AuthContext', () => ({
  AuthProvider: ({
    children
  }) => children,
  useAuth: () => ({
    user: {
      id: '1',
      name: 'Test User',
      email: 'test@example.com',
      role: 'admin'
    }
  })
}));

// Mock fetch API
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../context/AuthContext");
var _Billing = _interopRequireDefault(require("./Billing"));
require("@testing-library/jest-dom/extend-expect");
var _AuthContext2 = require("../contexts/AuthContext");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\lib\\Billing.test.js";
import React from "react";
var __jsx = React.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
global.fetch = jest.fn();

// Helper function to render component with router
const renderWithRouter = component => {
  return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
      children: component
    })
  }));
};
describe('Billing Component', () => {
  const mockUser = {
    id: '1',
    role: 'patient'
  };
  const renderWithAuthContext = component => {
    return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext2.AuthContext.Provider, {
      value: {
        user: mockUser,
        isAuthenticated: true
      },
      children: component
    }));
  };
  beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();

    // Mock successful API response
    global.fetch.mockResolvedValue({
      ok: true,
      json: async () => ({
        invoices: [{
          id: '1',
          patientName: 'John Doe',
          patientId: '101',
          amount: 150.00,
          status: 'paid',
          dueDate: '2023-12-15',
          createdAt: '2023-11-15'
        }, {
          id: '2',
          patientName: 'Jane Smith',
          patientId: '102',
          amount: 250.00,
          status: 'pending',
          dueDate: '2023-12-20',
          createdAt: '2023-11-20'
        }]
      })
    });
  });
  test('renders Billing component', async () => {
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // Check if the component title is rendered
    expect(_react2.screen.getByText('Billing Component')).toBeInTheDocument();
  });
  test('displays loading state initially', () => {
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // This test assumes the Billing component shows a loading indicator
    // If it doesn't, this test should be adjusted or removed
    // expect(screen.getByText(/loading/i)).toBeInTheDocument();
  });
  test('fetches and displays invoices', async () => {
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // Wait for the API call to resolve and component to update
    await (0, _react2.waitFor)(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1);
    });

    // Check if invoice data is displayed
    // Note: This test will need to be updated based on the actual implementation of the Billing component
    // expect(screen.getByText('John Doe')).toBeInTheDocument();
    // expect(screen.getByText('Jane Smith')).toBeInTheDocument();
  });
  test('handles API error gracefully', async () => {
    // Mock API error
    global.fetch.mockRejectedValueOnce(new Error('Failed to fetch'));
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // Wait for the API call to reject and component to update
    await (0, _react2.waitFor)(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1);
    });

    // Check if error message is displayed
    // Note: This test will need to be updated based on the actual error handling in the Billing component
    // expect(screen.getByText(/error/i)).toBeInTheDocument();
  });
  test('filters invoices by status', async () => {
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // Wait for the API call to resolve and component to update
    await (0, _react2.waitFor)(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1);
    });

    // Find and click the status filter dropdown
    // Note: This test will need to be updated based on the actual implementation of the Billing component
    // const statusFilter = screen.getByLabelText(/status/i);
    // fireEvent.change(statusFilter, { target: { value: 'paid' } });

    // Check if only paid invoices are displayed
    // expect(screen.getByText('John Doe')).toBeInTheDocument();
    // expect(screen.queryByText('Jane Smith')).not.toBeInTheDocument();
  });
  test('searches invoices by patient name', async () => {
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // Wait for the API call to resolve and component to update
    await (0, _react2.waitFor)(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1);
    });

    // Find and use the search input
    // Note: This test will need to be updated based on the actual implementation of the Billing component
    // const searchInput = screen.getByPlaceholderText(/search/i);
    // fireEvent.change(searchInput, { target: { value: 'John' } });

    // Check if only matching invoices are displayed
    // expect(screen.getByText('John Doe')).toBeInTheDocument();
    // expect(screen.queryByText('Jane Smith')).not.toBeInTheDocument();
  });
  test('opens invoice details when clicking on an invoice', async () => {
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // Wait for the API call to resolve and component to update
    await (0, _react2.waitFor)(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1);
    });

    // Find and click on an invoice
    // Note: This test will need to be updated based on the actual implementation of the Billing component
    // const invoiceRow = screen.getByText('John Doe').closest('tr');
    // fireEvent.click(invoiceRow);

    // Check if invoice details are displayed
    // expect(screen.getByText(/invoice details/i)).toBeInTheDocument();
  });
  test('creates a new invoice', async () => {
    // Mock API response for creating a new invoice
    global.fetch.mockImplementation((url, options) => {
      if (options && options.method === 'POST') {
        return Promise.resolve({
          ok: true,
          json: async () => ({
            id: '3',
            patientName: 'New Patient',
            patientId: '103',
            amount: 300.00,
            status: 'pending',
            dueDate: '2023-12-25',
            createdAt: '2023-11-25'
          })
        });
      }

      // Default response for GET requests
      return Promise.resolve({
        ok: true,
        json: async () => ({
          invoices: [{
            id: '1',
            patientName: 'John Doe',
            patientId: '101',
            amount: 150.00,
            status: 'paid',
            dueDate: '2023-12-15',
            createdAt: '2023-11-15'
          }, {
            id: '2',
            patientName: 'Jane Smith',
            patientId: '102',
            amount: 250.00,
            status: 'pending',
            dueDate: '2023-12-20',
            createdAt: '2023-11-20'
          }]
        })
      });
    });
    renderWithRouter(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));

    // Wait for the initial API call to resolve
    await (0, _react2.waitFor)(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1);
    });

    // Find and click the "Create Invoice" button
    // Note: This test will need to be updated based on the actual implementation of the Billing component
    // const createButton = screen.getByText(/create invoice/i);
    // fireEvent.click(createButton);

    // Fill out the form
    // const patientInput = screen.getByLabelText(/patient/i);
    // const amountInput = screen.getByLabelText(/amount/i);
    // const dueDateInput = screen.getByLabelText(/due date/i);

    // fireEvent.change(patientInput, { target: { value: '103' } });
    // fireEvent.change(amountInput, { target: { value: '300' } });
    // fireEvent.change(dueDateInput, { target: { value: '2023-12-25' } });

    // Submit the form
    // const submitButton = screen.getByText(/submit/i);
    // fireEvent.click(submitButton);

    // Wait for the POST API call
    // await waitFor(() => {
    //     expect(global.fetch).toHaveBeenCalledTimes(2);
    //     expect(global.fetch.mock.calls[1][1].method).toBe('POST');
    // });

    // Check if the new invoice is added to the list
    // expect(screen.getByText('New Patient')).toBeInTheDocument();
  });
  test('renders without crashing', () => {
    renderWithAuthContext(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));
    expect(_react2.screen.getByText('Payment Methods')).toBeInTheDocument();
  });
  test('displays loading spinner initially', () => {
    renderWithAuthContext(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));
    expect(_react2.screen.getByRole('status')).toBeInTheDocument();
  });
  test('displays payment methods when loaded', async () => {
    renderWithAuthContext(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));
    // Mock fetch and socket data here
    // Check if payment methods are displayed
  });
  test('handles add payment method', async () => {
    renderWithAuthContext(/*#__PURE__*/(0, _jsxRuntime.jsx)(_Billing.default, {}));
    _react2.fireEvent.click(_react2.screen.getByLabelText('Add Payment Method'));
    // Check if modal opens and form is displayed
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,