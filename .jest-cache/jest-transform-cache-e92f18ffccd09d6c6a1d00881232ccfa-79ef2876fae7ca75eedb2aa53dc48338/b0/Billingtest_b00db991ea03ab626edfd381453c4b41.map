{"version":3,"names":["_getJestObj","mock","AuthProvider","children","useAuth","user","id","name","email","role","_interopRequireDefault","require","_react","_react2","_reactRouterDom","_AuthContext","_Billing","_AuthContext2","_jsxRuntime","_jsxFileName","React","__jsx","createElement","jest","global","fetch","fn","renderWithRouter","component","render","jsx","BrowserRouter","describe","mockUser","renderWithAuthContext","AuthContext","Provider","value","isAuthenticated","beforeEach","clearAllMocks","mockResolvedValue","ok","json","invoices","patientName","patientId","amount","status","dueDate","createdAt","test","default","expect","screen","getByText","toBeInTheDocument","waitFor","toHaveBeenCalledTimes","mockRejectedValueOnce","Error","mockImplementation","url","options","method","Promise","resolve","getByRole","fireEvent","click","getByLabelText"],"sources":["Billing.test.js"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from '../context/AuthContext';\nimport Billing from './Billing';\nimport '@testing-library/jest-dom/extend-expect';\nimport { AuthContext } from '../contexts/AuthContext';\n\n// Mock the AuthContext\njest.mock('../context/AuthContext', () => ({\n    AuthProvider: ({ children }) => children,\n    useAuth: () => ({\n        user: {\n            id: '1',\n            name: 'Test User',\n            email: 'test@example.com',\n            role: 'admin'\n        }\n    })\n}));\n\n// Mock fetch API\nglobal.fetch = jest.fn();\n\n// Helper function to render component with router\nconst renderWithRouter = (component) => {\n    return render(\n        <BrowserRouter>\n            <AuthProvider>\n                {component}\n            </AuthProvider>\n        </BrowserRouter>\n    );\n};\n\ndescribe('Billing Component', () => {\n    const mockUser = {\n        id: '1',\n        role: 'patient'\n    };\n\n    const renderWithAuthContext = (component) => {\n        return render(\n            <AuthContext.Provider value={{ user: mockUser, isAuthenticated: true }}>\n                {component}\n            </AuthContext.Provider>\n        );\n    };\n\n    beforeEach(() => {\n        // Reset mocks before each test\n        jest.clearAllMocks();\n        \n        // Mock successful API response\n        global.fetch.mockResolvedValue({\n            ok: true,\n            json: async () => ({\n                invoices: [\n                    {\n                        id: '1',\n                        patientName: 'John Doe',\n                        patientId: '101',\n                        amount: 150.00,\n                        status: 'paid',\n                        dueDate: '2023-12-15',\n                        createdAt: '2023-11-15'\n                    },\n                    {\n                        id: '2',\n                        patientName: 'Jane Smith',\n                        patientId: '102',\n                        amount: 250.00,\n                        status: 'pending',\n                        dueDate: '2023-12-20',\n                        createdAt: '2023-11-20'\n                    }\n                ]\n            })\n        });\n    });\n    \n    test('renders Billing component', async () => {\n        renderWithRouter(<Billing />);\n        \n        // Check if the component title is rendered\n        expect(screen.getByText('Billing Component')).toBeInTheDocument();\n    });\n    \n    test('displays loading state initially', () => {\n        renderWithRouter(<Billing />);\n        \n        // This test assumes the Billing component shows a loading indicator\n        // If it doesn't, this test should be adjusted or removed\n        // expect(screen.getByText(/loading/i)).toBeInTheDocument();\n    });\n    \n    test('fetches and displays invoices', async () => {\n        renderWithRouter(<Billing />);\n        \n        // Wait for the API call to resolve and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Check if invoice data is displayed\n        // Note: This test will need to be updated based on the actual implementation of the Billing component\n        // expect(screen.getByText('John Doe')).toBeInTheDocument();\n        // expect(screen.getByText('Jane Smith')).toBeInTheDocument();\n    });\n    \n    test('handles API error gracefully', async () => {\n        // Mock API error\n        global.fetch.mockRejectedValueOnce(new Error('Failed to fetch'));\n        \n        renderWithRouter(<Billing />);\n        \n        // Wait for the API call to reject and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Check if error message is displayed\n        // Note: This test will need to be updated based on the actual error handling in the Billing component\n        // expect(screen.getByText(/error/i)).toBeInTheDocument();\n    });\n    \n    test('filters invoices by status', async () => {\n        renderWithRouter(<Billing />);\n        \n        // Wait for the API call to resolve and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Find and click the status filter dropdown\n        // Note: This test will need to be updated based on the actual implementation of the Billing component\n        // const statusFilter = screen.getByLabelText(/status/i);\n        // fireEvent.change(statusFilter, { target: { value: 'paid' } });\n        \n        // Check if only paid invoices are displayed\n        // expect(screen.getByText('John Doe')).toBeInTheDocument();\n        // expect(screen.queryByText('Jane Smith')).not.toBeInTheDocument();\n    });\n    \n    test('searches invoices by patient name', async () => {\n        renderWithRouter(<Billing />);\n        \n        // Wait for the API call to resolve and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Find and use the search input\n        // Note: This test will need to be updated based on the actual implementation of the Billing component\n        // const searchInput = screen.getByPlaceholderText(/search/i);\n        // fireEvent.change(searchInput, { target: { value: 'John' } });\n        \n        // Check if only matching invoices are displayed\n        // expect(screen.getByText('John Doe')).toBeInTheDocument();\n        // expect(screen.queryByText('Jane Smith')).not.toBeInTheDocument();\n    });\n    \n    test('opens invoice details when clicking on an invoice', async () => {\n        renderWithRouter(<Billing />);\n        \n        // Wait for the API call to resolve and component to update\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Find and click on an invoice\n        // Note: This test will need to be updated based on the actual implementation of the Billing component\n        // const invoiceRow = screen.getByText('John Doe').closest('tr');\n        // fireEvent.click(invoiceRow);\n        \n        // Check if invoice details are displayed\n        // expect(screen.getByText(/invoice details/i)).toBeInTheDocument();\n    });\n    \n    test('creates a new invoice', async () => {\n        // Mock API response for creating a new invoice\n        global.fetch.mockImplementation((url, options) => {\n            if (options && options.method === 'POST') {\n                return Promise.resolve({\n                    ok: true,\n                    json: async () => ({\n                        id: '3',\n                        patientName: 'New Patient',\n                        patientId: '103',\n                        amount: 300.00,\n                        status: 'pending',\n                        dueDate: '2023-12-25',\n                        createdAt: '2023-11-25'\n                    })\n                });\n            }\n            \n            // Default response for GET requests\n            return Promise.resolve({\n                ok: true,\n                json: async () => ({\n                    invoices: [\n                        {\n                            id: '1',\n                            patientName: 'John Doe',\n                            patientId: '101',\n                            amount: 150.00,\n                            status: 'paid',\n                            dueDate: '2023-12-15',\n                            createdAt: '2023-11-15'\n                        },\n                        {\n                            id: '2',\n                            patientName: 'Jane Smith',\n                            patientId: '102',\n                            amount: 250.00,\n                            status: 'pending',\n                            dueDate: '2023-12-20',\n                            createdAt: '2023-11-20'\n                        }\n                    ]\n                })\n            });\n        });\n        \n        renderWithRouter(<Billing />);\n        \n        // Wait for the initial API call to resolve\n        await waitFor(() => {\n            expect(global.fetch).toHaveBeenCalledTimes(1);\n        });\n        \n        // Find and click the \"Create Invoice\" button\n        // Note: This test will need to be updated based on the actual implementation of the Billing component\n        // const createButton = screen.getByText(/create invoice/i);\n        // fireEvent.click(createButton);\n        \n        // Fill out the form\n        // const patientInput = screen.getByLabelText(/patient/i);\n        // const amountInput = screen.getByLabelText(/amount/i);\n        // const dueDateInput = screen.getByLabelText(/due date/i);\n        \n        // fireEvent.change(patientInput, { target: { value: '103' } });\n        // fireEvent.change(amountInput, { target: { value: '300' } });\n        // fireEvent.change(dueDateInput, { target: { value: '2023-12-25' } });\n        \n        // Submit the form\n        // const submitButton = screen.getByText(/submit/i);\n        // fireEvent.click(submitButton);\n        \n        // Wait for the POST API call\n        // await waitFor(() => {\n        //     expect(global.fetch).toHaveBeenCalledTimes(2);\n        //     expect(global.fetch.mock.calls[1][1].method).toBe('POST');\n        // });\n        \n        // Check if the new invoice is added to the list\n        // expect(screen.getByText('New Patient')).toBeInTheDocument();\n    });\n\n    test('renders without crashing', () => {\n        renderWithAuthContext(<Billing />);\n        expect(screen.getByText('Payment Methods')).toBeInTheDocument();\n    });\n\n    test('displays loading spinner initially', () => {\n        renderWithAuthContext(<Billing />);\n        expect(screen.getByRole('status')).toBeInTheDocument();\n    });\n\n    test('displays payment methods when loaded', async () => {\n        renderWithAuthContext(<Billing />);\n        // Mock fetch and socket data here\n        // Check if payment methods are displayed\n    });\n\n    test('handles add payment method', async () => {\n        renderWithAuthContext(<Billing />);\n        fireEvent.click(screen.getByLabelText('Add Payment Method'));\n        // Check if modal opens and form is displayed\n    });\n});"],"mappings":";;AAQA;AACAA,WAAA,GAAKC,IAAI,CAAC,wBAAwB,EAAE,OAAO;EACvCC,YAAY,EAAEA,CAAC;IAAEC;EAAS,CAAC,KAAKA,QAAQ;EACxCC,OAAO,EAAEA,CAAA,MAAO;IACZC,IAAI,EAAE;MACFC,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAE,kBAAkB;MACzBC,IAAI,EAAE;IACV;EACJ,CAAC;AACL,CAAC,CAAC,CAAC;;AAEH;AAAA,IAAAC,sBAAA,GAAAC,OAAA;AArBA,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AACA,IAAAI,YAAA,GAAAJ,OAAA;AACA,IAAAK,QAAA,GAAAN,sBAAA,CAAAC,OAAA;AACAA,OAAA;AACA,IAAAM,aAAA,GAAAN,OAAA;AAAsD,IAAAO,WAAA,GAAAP,OAAA;AAAA,IAAAQ,YAAA;AAAA,OAAAC,KAAA;AAAA,IAAAC,KAAA,GAAAD,KAAA,CAAAE,aAAA;AAAA,SAAAtB,YAAA;EAAA;IAAAuB;EAAA,IAAAZ,OAAA;EAAAX,WAAA,GAAAA,CAAA,KAAAuB,IAAA;EAAA,OAAAA,IAAA;AAAA;AAgBtDC,MAAM,CAACC,KAAK,GAAGF,IAAI,CAACG,EAAE,CAAC,CAAC;;AAExB;AACA,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;EACpC,OAAO,IAAAC,cAAM,eACT,IAAAX,WAAA,CAAAY,GAAA,EAAChB,eAAA,CAAAiB,aAAa;IAAA5B,QAAA,eACV,IAAAe,WAAA,CAAAY,GAAA,EAACf,YAAA,CAAAb,YAAY;MAAAC,QAAA,EACRyB;IAAS,CACA;EAAC,CACJ,CACnB,CAAC;AACL,CAAC;AAEDI,QAAQ,CAAC,mBAAmB,EAAE,MAAM;EAChC,MAAMC,QAAQ,GAAG;IACb3B,EAAE,EAAE,GAAG;IACPG,IAAI,EAAE;EACV,CAAC;EAED,MAAMyB,qBAAqB,GAAIN,SAAS,IAAK;IACzC,OAAO,IAAAC,cAAM,eACT,IAAAX,WAAA,CAAAY,GAAA,EAACb,aAAA,CAAAkB,WAAW,CAACC,QAAQ;MAACC,KAAK,EAAE;QAAEhC,IAAI,EAAE4B,QAAQ;QAAEK,eAAe,EAAE;MAAK,CAAE;MAAAnC,QAAA,EAClEyB;IAAS,CACQ,CAC1B,CAAC;EACL,CAAC;EAEDW,UAAU,CAAC,MAAM;IACb;IACAhB,IAAI,CAACiB,aAAa,CAAC,CAAC;;IAEpB;IACAhB,MAAM,CAACC,KAAK,CAACgB,iBAAiB,CAAC;MAC3BC,EAAE,EAAE,IAAI;MACRC,IAAI,EAAE,MAAAA,CAAA,MAAa;QACfC,QAAQ,EAAE,CACN;UACItC,EAAE,EAAE,GAAG;UACPuC,WAAW,EAAE,UAAU;UACvBC,SAAS,EAAE,KAAK;UAChBC,MAAM,EAAE,MAAM;UACdC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE,YAAY;UACrBC,SAAS,EAAE;QACf,CAAC,EACD;UACI5C,EAAE,EAAE,GAAG;UACPuC,WAAW,EAAE,YAAY;UACzBC,SAAS,EAAE,KAAK;UAChBC,MAAM,EAAE,MAAM;UACdC,MAAM,EAAE,SAAS;UACjBC,OAAO,EAAE,YAAY;UACrBC,SAAS,EAAE;QACf,CAAC;MAET,CAAC;IACL,CAAC,CAAC;EACN,CAAC,CAAC;EAEFC,IAAI,CAAC,2BAA2B,EAAE,YAAY;IAC1CxB,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACAC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACrE,CAAC,CAAC;EAEFL,IAAI,CAAC,kCAAkC,EAAE,MAAM;IAC3CxB,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACA;IACA;EACJ,CAAC,CAAC;EAEFD,IAAI,CAAC,+BAA+B,EAAE,YAAY;IAC9CxB,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACA,MAAM,IAAAK,eAAO,EAAC,MAAM;MAChBJ,MAAM,CAAC7B,MAAM,CAACC,KAAK,CAAC,CAACiC,qBAAqB,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;;IAEF;IACA;IACA;IACA;EACJ,CAAC,CAAC;EAEFP,IAAI,CAAC,8BAA8B,EAAE,YAAY;IAC7C;IACA3B,MAAM,CAACC,KAAK,CAACkC,qBAAqB,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAEhEjC,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACA,MAAM,IAAAK,eAAO,EAAC,MAAM;MAChBJ,MAAM,CAAC7B,MAAM,CAACC,KAAK,CAAC,CAACiC,qBAAqB,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;;IAEF;IACA;IACA;EACJ,CAAC,CAAC;EAEFP,IAAI,CAAC,4BAA4B,EAAE,YAAY;IAC3CxB,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACA,MAAM,IAAAK,eAAO,EAAC,MAAM;MAChBJ,MAAM,CAAC7B,MAAM,CAACC,KAAK,CAAC,CAACiC,qBAAqB,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;;IAEF;IACA;IACA;IACA;;IAEA;IACA;IACA;EACJ,CAAC,CAAC;EAEFP,IAAI,CAAC,mCAAmC,EAAE,YAAY;IAClDxB,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACA,MAAM,IAAAK,eAAO,EAAC,MAAM;MAChBJ,MAAM,CAAC7B,MAAM,CAACC,KAAK,CAAC,CAACiC,qBAAqB,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;;IAEF;IACA;IACA;IACA;;IAEA;IACA;IACA;EACJ,CAAC,CAAC;EAEFP,IAAI,CAAC,mDAAmD,EAAE,YAAY;IAClExB,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACA,MAAM,IAAAK,eAAO,EAAC,MAAM;MAChBJ,MAAM,CAAC7B,MAAM,CAACC,KAAK,CAAC,CAACiC,qBAAqB,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;;IAEF;IACA;IACA;IACA;;IAEA;IACA;EACJ,CAAC,CAAC;EAEFP,IAAI,CAAC,uBAAuB,EAAE,YAAY;IACtC;IACA3B,MAAM,CAACC,KAAK,CAACoC,kBAAkB,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;MAC9C,IAAIA,OAAO,IAAIA,OAAO,CAACC,MAAM,KAAK,MAAM,EAAE;QACtC,OAAOC,OAAO,CAACC,OAAO,CAAC;UACnBxB,EAAE,EAAE,IAAI;UACRC,IAAI,EAAE,MAAAA,CAAA,MAAa;YACfrC,EAAE,EAAE,GAAG;YACPuC,WAAW,EAAE,aAAa;YAC1BC,SAAS,EAAE,KAAK;YAChBC,MAAM,EAAE,MAAM;YACdC,MAAM,EAAE,SAAS;YACjBC,OAAO,EAAE,YAAY;YACrBC,SAAS,EAAE;UACf,CAAC;QACL,CAAC,CAAC;MACN;;MAEA;MACA,OAAOe,OAAO,CAACC,OAAO,CAAC;QACnBxB,EAAE,EAAE,IAAI;QACRC,IAAI,EAAE,MAAAA,CAAA,MAAa;UACfC,QAAQ,EAAE,CACN;YACItC,EAAE,EAAE,GAAG;YACPuC,WAAW,EAAE,UAAU;YACvBC,SAAS,EAAE,KAAK;YAChBC,MAAM,EAAE,MAAM;YACdC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE,YAAY;YACrBC,SAAS,EAAE;UACf,CAAC,EACD;YACI5C,EAAE,EAAE,GAAG;YACPuC,WAAW,EAAE,YAAY;YACzBC,SAAS,EAAE,KAAK;YAChBC,MAAM,EAAE,MAAM;YACdC,MAAM,EAAE,SAAS;YACjBC,OAAO,EAAE,YAAY;YACrBC,SAAS,EAAE;UACf,CAAC;QAET,CAAC;MACL,CAAC,CAAC;IACN,CAAC,CAAC;IAEFvB,gBAAgB,cAAC,IAAAT,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;;IAE7B;IACA,MAAM,IAAAK,eAAO,EAAC,MAAM;MAChBJ,MAAM,CAAC7B,MAAM,CAACC,KAAK,CAAC,CAACiC,qBAAqB,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;;IAEF;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;EACJ,CAAC,CAAC;EAEFP,IAAI,CAAC,0BAA0B,EAAE,MAAM;IACnCjB,qBAAqB,cAAC,IAAAhB,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;IAClCC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACnE,CAAC,CAAC;EAEFL,IAAI,CAAC,oCAAoC,EAAE,MAAM;IAC7CjB,qBAAqB,cAAC,IAAAhB,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;IAClCC,MAAM,CAACC,cAAM,CAACa,SAAS,CAAC,QAAQ,CAAC,CAAC,CAACX,iBAAiB,CAAC,CAAC;EAC1D,CAAC,CAAC;EAEFL,IAAI,CAAC,sCAAsC,EAAE,YAAY;IACrDjB,qBAAqB,cAAC,IAAAhB,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;IAClC;IACA;EACJ,CAAC,CAAC;EAEFD,IAAI,CAAC,4BAA4B,EAAE,YAAY;IAC3CjB,qBAAqB,cAAC,IAAAhB,WAAA,CAAAY,GAAA,EAACd,QAAA,CAAAoC,OAAO,IAAE,CAAC,CAAC;IAClCgB,iBAAS,CAACC,KAAK,CAACf,cAAM,CAACgB,cAAc,CAAC,oBAAoB,CAAC,CAAC;IAC5D;EACJ,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]}