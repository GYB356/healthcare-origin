{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_PaymentMethods","_jsxFileName","__jsx","default","createElement","mockPaymentMethods","id","cardType","last4","expiry","cardholderName","isDefault","describe","test","render","paymentMethods","__self","__source","fileName","lineNumber","columnNumber","expect","screen","getByText","toBeInTheDocument","getAllByRole","toHaveLength","length","fireEvent","click","it","_id","lastFour","expiryMonth","expiryYear","billingName","waitFor","getByRole","items","getAllByText"],"sources":["PaymentMethods.test.js"],"sourcesContent":["import React from \"react\";\nimport { render, screen, waitFor, fireEvent } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport PaymentMethods from \"../PaymentMethods\";\n\nconst mockPaymentMethods = [\n  { id: '1', cardType: 'Visa', last4: '1234', expiry: '12/2025', cardholderName: 'John Doe', isDefault: true },\n  { id: '2', cardType: 'MasterCard', last4: '5678', expiry: '11/2024', cardholderName: 'Jane Doe', isDefault: false },\n];\n\ndescribe(\"PaymentMethods Component\", () => {\n  test(\"renders without crashing\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getByText(\"Payment Methods\")).toBeInTheDocument();\n  });\n\n  test(\"displays the correct number of payment methods\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getAllByRole(\"listitem\")).toHaveLength(mockPaymentMethods.length);\n  });\n\n  test(\"displays payment method details correctly\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getByText(\"Visa •••• 1234\")).toBeInTheDocument();\n    expect(screen.getByText(\"Expires: 12/2025\")).toBeInTheDocument();\n    expect(screen.getByText(\"John Doe\")).toBeInTheDocument();\n    expect(screen.getByText(\"Default\")).toBeInTheDocument();\n  });\n\n  test(\"handles set default payment method\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    fireEvent.click(screen.getByText(\"Set as Default\"));\n    // Check if the default method is updated\n  });\n});\n\n// Test to check if PaymentMethods renders correctly with no payment methods\nit(\"renders no payment methods message when list is empty\", () => {\n  render(<PaymentMethods paymentMethods={[]} />);\n  expect(screen.getByText(/no payment methods/i)).toBeInTheDocument();\n});\n\n// Test to check if PaymentMethods renders payment methods correctly\nit(\"renders payment methods correctly\", () => {\n  const paymentMethods = [\n    {\n      _id: \"1\",\n      cardType: \"Visa\",\n      lastFour: \"1234\",\n      expiryMonth: \"12\",\n      expiryYear: \"2023\",\n      billingName: \"John Doe\",\n    },\n    {\n      _id: \"2\",\n      cardType: \"Mastercard\",\n      lastFour: \"5678\",\n      expiryMonth: \"01\",\n      expiryYear: \"2024\",\n      billingName: \"Jane Smith\",\n    },\n  ];\n  render(<PaymentMethods paymentMethods={paymentMethods} />);\n  expect(screen.getByText(/visa/i)).toBeInTheDocument();\n  expect(screen.getByText(/mastercard/i)).toBeInTheDocument();\n});\n\n// Test to check if PaymentMethods renders correctly\nit('renders the payment methods list correctly', async () => {\n  render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n\n  // Check if the list exists\n  await waitFor(() => expect(screen.getByRole('list')).toBeInTheDocument());\n\n  // Query list items\n  const items = await waitFor(() => screen.getAllByRole('listitem'));\n  expect(items).toHaveLength(mockPaymentMethods.length);\n\n  // Check payment method details\n  expect(screen.getByText('Visa •••• 1234')).toBeInTheDocument();\n  expect(screen.getByText('Expires: 12/2025')).toBeInTheDocument();\n  expect(screen.getByText('John Doe')).toBeInTheDocument();\n  expect(screen.getByText('Default')).toBeInTheDocument();\n});\n\n// Test to check if no payment methods message is displayed\nit('displays no payment methods message when list is empty', async () => {\n  render(<PaymentMethods paymentMethods={[]} />);\n\n  // Check for no payment methods message\n  await waitFor(() => expect(screen.getAllByText(/no payment methods/i)).toHaveLength(1));\n});\n\n// Test to check if the default payment method can be set\nit('handles set default payment method', async () => {\n  render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n\n  // Click the set default button\n  fireEvent.click(screen.getByText(/Set as Default/i));\n\n  // Check if the default method is updated\n  await waitFor(() => expect(screen.getByText('Default')).toBeInTheDocument());\n});\n"],"mappings":";;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACAA,OAAA;AACA,IAAAE,eAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA+C,IAAAG,YAAA;AAAA,IAAAC,KAAA,GAAAN,MAAA,CAAAO,OAAA,CAAAC,aAAA;AAE/C,MAAMC,kBAAkB,GAAG,CACzB;EAAEC,EAAE,EAAE,GAAG;EAAEC,QAAQ,EAAE,MAAM;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,SAAS;EAAEC,cAAc,EAAE,UAAU;EAAEC,SAAS,EAAE;AAAK,CAAC,EAC5G;EAAEL,EAAE,EAAE,GAAG;EAAEC,QAAQ,EAAE,YAAY;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,SAAS;EAAEC,cAAc,EAAE,UAAU;EAAEC,SAAS,EAAE;AAAM,CAAC,CACpH;AAEDC,QAAQ,CAAC,0BAA0B,EAAE,MAAM;EACzCC,IAAI,CAAC,0BAA0B,EAAE,MAAM;IACrC,IAAAC,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;MAACY,cAAc,EAAEV,kBAAmB;MAAAW,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAjB,YAAA;QAAAkB,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,CAAC;IAC9DC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACjE,CAAC,CAAC;EAEFX,IAAI,CAAC,gDAAgD,EAAE,MAAM;IAC3D,IAAAC,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;MAACY,cAAc,EAAEV,kBAAmB;MAAAW,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAjB,YAAA;QAAAkB,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,CAAC;IAC9DC,MAAM,CAACC,cAAM,CAACG,YAAY,CAAC,UAAU,CAAC,CAAC,CAACC,YAAY,CAACrB,kBAAkB,CAACsB,MAAM,CAAC;EACjF,CAAC,CAAC;EAEFd,IAAI,CAAC,2CAA2C,EAAE,MAAM;IACtD,IAAAC,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;MAACY,cAAc,EAAEV,kBAAmB;MAAAW,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAjB,YAAA;QAAAkB,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,CAAC;IAC9DC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;IAC9DH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;IAChEH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,UAAU,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;IACxDH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACzD,CAAC,CAAC;EAEFX,IAAI,CAAC,oCAAoC,EAAE,MAAM;IAC/C,IAAAC,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;MAACY,cAAc,EAAEV,kBAAmB;MAAAW,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAjB,YAAA;QAAAkB,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CAAC,CAAC;IAC9DQ,iBAAS,CAACC,KAAK,CAACP,cAAM,CAACC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IACnD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAO,EAAE,CAAC,uDAAuD,EAAE,MAAM;EAChE,IAAAhB,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;IAACY,cAAc,EAAE,EAAG;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;EAC9CC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;AACrE,CAAC,CAAC;;AAEF;AACAM,EAAE,CAAC,mCAAmC,EAAE,MAAM;EAC5C,MAAMf,cAAc,GAAG,CACrB;IACEgB,GAAG,EAAE,GAAG;IACRxB,QAAQ,EAAE,MAAM;IAChByB,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,MAAM;IAClBC,WAAW,EAAE;EACf,CAAC,EACD;IACEJ,GAAG,EAAE,GAAG;IACRxB,QAAQ,EAAE,YAAY;IACtByB,QAAQ,EAAE,MAAM;IAChBC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,MAAM;IAClBC,WAAW,EAAE;EACf,CAAC,CACF;EACD,IAAArB,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;IAACY,cAAc,EAAEA,cAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;EAC1DC,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,OAAO,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACrDH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,aAAa,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;AAC7D,CAAC,CAAC;;AAEF;AACAM,EAAE,CAAC,4CAA4C,EAAE,YAAY;EAC3D,IAAAhB,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;IAACY,cAAc,EAAEV,kBAAmB;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;;EAE9D;EACA,MAAM,IAAAgB,eAAO,EAAC,MAAMf,MAAM,CAACC,cAAM,CAACe,SAAS,CAAC,MAAM,CAAC,CAAC,CAACb,iBAAiB,CAAC,CAAC,CAAC;;EAEzE;EACA,MAAMc,KAAK,GAAG,MAAM,IAAAF,eAAO,EAAC,MAAMd,cAAM,CAACG,YAAY,CAAC,UAAU,CAAC,CAAC;EAClEJ,MAAM,CAACiB,KAAK,CAAC,CAACZ,YAAY,CAACrB,kBAAkB,CAACsB,MAAM,CAAC;;EAErD;EACAN,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC9DH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAChEH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,UAAU,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EACxDH,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;AACzD,CAAC,CAAC;;AAEF;AACAM,EAAE,CAAC,wDAAwD,EAAE,YAAY;EACvE,IAAAhB,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;IAACY,cAAc,EAAE,EAAG;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;;EAE9C;EACA,MAAM,IAAAgB,eAAO,EAAC,MAAMf,MAAM,CAACC,cAAM,CAACiB,YAAY,CAAC,qBAAqB,CAAC,CAAC,CAACb,YAAY,CAAC,CAAC,CAAC,CAAC;AACzF,CAAC,CAAC;;AAEF;AACAI,EAAE,CAAC,oCAAoC,EAAE,YAAY;EACnD,IAAAhB,cAAM,EAACZ,KAAA,CAACF,eAAA,CAAAG,OAAc;IAACY,cAAc,EAAEV,kBAAmB;IAAAW,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,CAAC;;EAE9D;EACAQ,iBAAS,CAACC,KAAK,CAACP,cAAM,CAACC,SAAS,CAAC,iBAAiB,CAAC,CAAC;;EAEpD;EACA,MAAM,IAAAa,eAAO,EAAC,MAAMf,MAAM,CAACC,cAAM,CAACC,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC,CAAC;AAC9E,CAAC,CAAC","ignoreList":[]}