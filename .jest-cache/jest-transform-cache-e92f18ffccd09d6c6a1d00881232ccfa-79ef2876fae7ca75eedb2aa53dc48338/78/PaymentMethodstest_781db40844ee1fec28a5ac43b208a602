ab6d1915e80089a1673b0465aebc28ca
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _PaymentMethods = _interopRequireDefault(require("../PaymentMethods"));
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\pages\\src\\components\\billing\\__tests__\\PaymentMethods.test.js";
var __jsx = _react.default.createElement;
const mockPaymentMethods = [{
  id: '1',
  cardType: 'Visa',
  last4: '1234',
  expiry: '12/2025',
  cardholderName: 'John Doe',
  isDefault: true
}, {
  id: '2',
  cardType: 'MasterCard',
  last4: '5678',
  expiry: '11/2024',
  cardholderName: 'Jane Doe',
  isDefault: false
}];
describe("PaymentMethods Component", () => {
  test("renders without crashing", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 13,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText("Payment Methods")).toBeInTheDocument();
  });
  test("displays the correct number of payment methods", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 18,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getAllByRole("listitem")).toHaveLength(mockPaymentMethods.length);
  });
  test("displays payment method details correctly", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 23,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText("Visa •••• 1234")).toBeInTheDocument();
    expect(_react2.screen.getByText("Expires: 12/2025")).toBeInTheDocument();
    expect(_react2.screen.getByText("John Doe")).toBeInTheDocument();
    expect(_react2.screen.getByText("Default")).toBeInTheDocument();
  });
  test("handles set default payment method", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 31,
        columnNumber: 12
      }
    }));
    _react2.fireEvent.click(_react2.screen.getByText("Set as Default"));
    // Check if the default method is updated
  });
});

// Test to check if PaymentMethods renders correctly with no payment methods
it("renders no payment methods message when list is empty", () => {
  (0, _react2.render)(__jsx(_PaymentMethods.default, {
    paymentMethods: [],
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText(/no payment methods/i)).toBeInTheDocument();
});

// Test to check if PaymentMethods renders payment methods correctly
it("renders payment methods correctly", () => {
  const paymentMethods = [{
    _id: "1",
    cardType: "Visa",
    lastFour: "1234",
    expiryMonth: "12",
    expiryYear: "2023",
    billingName: "John Doe"
  }, {
    _id: "2",
    cardType: "Mastercard",
    lastFour: "5678",
    expiryMonth: "01",
    expiryYear: "2024",
    billingName: "Jane Smith"
  }];
  (0, _react2.render)(__jsx(_PaymentMethods.default, {
    paymentMethods: paymentMethods,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 63,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText(/visa/i)).toBeInTheDocument();
  expect(_react2.screen.getByText(/mastercard/i)).toBeInTheDocument();
});

// Test to check if PaymentMethods renders correctly
it('renders the payment methods list correctly', async () => {
  (0, _react2.render)(__jsx(_PaymentMethods.default, {
    paymentMethods: mockPaymentMethods,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 70,
      columnNumber: 10
    }
  }));

  // Check if the list exists
  await (0, _react2.waitFor)(() => expect(_react2.screen.getByRole('list')).toBeInTheDocument());

  // Query list items
  const items = await (0, _react2.waitFor)(() => _react2.screen.getAllByRole('listitem'));
  expect(items).toHaveLength(mockPaymentMethods.length);

  // Check payment method details
  expect(_react2.screen.getByText('Visa •••• 1234')).toBeInTheDocument();
  expect(_react2.screen.getByText('Expires: 12/2025')).toBeInTheDocument();
  expect(_react2.screen.getByText('John Doe')).toBeInTheDocument();
  expect(_react2.screen.getByText('Default')).toBeInTheDocument();
});

// Test to check if no payment methods message is displayed
it('displays no payment methods message when list is empty', async () => {
  (0, _react2.render)(__jsx(_PaymentMethods.default, {
    paymentMethods: [],
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 10
    }
  }));

  // Check for no payment methods message
  await (0, _react2.waitFor)(() => expect(_react2.screen.getAllByText(/no payment methods/i)).toHaveLength(1));
});

// Test to check if the default payment method can be set
it('handles set default payment method', async () => {
  (0, _react2.render)(__jsx(_PaymentMethods.default, {
    paymentMethods: mockPaymentMethods,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 10
    }
  }));

  // Click the set default button
  _react2.fireEvent.click(_react2.screen.getByText(/Set as Default/i));

  // Check if the default method is updated
  await (0, _react2.waitFor)(() => expect(_react2.screen.getByText('Default')).toBeInTheDocument());
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,