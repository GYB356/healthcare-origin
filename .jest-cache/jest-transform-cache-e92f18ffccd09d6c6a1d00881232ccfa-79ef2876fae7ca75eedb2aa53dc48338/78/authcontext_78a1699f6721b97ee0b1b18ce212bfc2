862b349543f859a0be2b1e60e71206de
const React = require("react");

// Mock AuthContext
const mockAuthState = {
  isAuthenticated: true,
  user: {
    id: "123",
    username: "testuser",
    email: "test@example.com",
    role: "admin"
  },
  login: jest.fn(() => Promise.resolve({
    success: true
  })),
  logout: jest.fn(),
  register: jest.fn(() => Promise.resolve({
    success: true
  })),
  loading: false,
  error: null,
  token: "mock-token"
};
const AuthContext = React.createContext(mockAuthState);
AuthContext.displayName = "AuthContext";

// Auth Provider component
const AuthProvider = ({
  children,
  value = mockAuthState
}) => {
  return React.createElement(AuthContext.Provider, {
    value
  }, children);
};

// Custom hook for consuming Auth Context
const useAuth = () => React.useContext(AuthContext);

// Handle both ESM and CommonJS
// const exports = {
//   AuthContext,
//   AuthProvider,
//   useAuth,
//   mockAuthState,
//   default: {
//     AuthContext,
//     AuthProvider,
//     useAuth,
//     mockAuthState,
//   },
// };

// For default export patterns
exports.AuthContext = AuthContext;
exports.AuthProvider = AuthProvider;
exports.useAuth = useAuth;
exports.mockAuthState = mockAuthState;
exports.__esModule = true;
exports.default = useAuth;

// module.exports = exports;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJtb2NrQXV0aFN0YXRlIiwiaXNBdXRoZW50aWNhdGVkIiwidXNlciIsImlkIiwidXNlcm5hbWUiLCJlbWFpbCIsInJvbGUiLCJsb2dpbiIsImplc3QiLCJmbiIsIlByb21pc2UiLCJyZXNvbHZlIiwic3VjY2VzcyIsImxvZ291dCIsInJlZ2lzdGVyIiwibG9hZGluZyIsImVycm9yIiwidG9rZW4iLCJBdXRoQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJkaXNwbGF5TmFtZSIsIkF1dGhQcm92aWRlciIsImNoaWxkcmVuIiwidmFsdWUiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJ1c2VBdXRoIiwidXNlQ29udGV4dCIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbImF1dGgtY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcclxuXHJcbi8vIE1vY2sgQXV0aENvbnRleHRcclxuY29uc3QgbW9ja0F1dGhTdGF0ZSA9IHtcclxuICBpc0F1dGhlbnRpY2F0ZWQ6IHRydWUsXHJcbiAgdXNlcjoge1xyXG4gICAgaWQ6IFwiMTIzXCIsXHJcbiAgICB1c2VybmFtZTogXCJ0ZXN0dXNlclwiLFxyXG4gICAgZW1haWw6IFwidGVzdEBleGFtcGxlLmNvbVwiLFxyXG4gICAgcm9sZTogXCJhZG1pblwiLFxyXG4gIH0sXHJcbiAgbG9naW46IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgc3VjY2VzczogdHJ1ZSB9KSksXHJcbiAgbG9nb3V0OiBqZXN0LmZuKCksXHJcbiAgcmVnaXN0ZXI6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgc3VjY2VzczogdHJ1ZSB9KSksXHJcbiAgbG9hZGluZzogZmFsc2UsXHJcbiAgZXJyb3I6IG51bGwsXHJcbiAgdG9rZW46IFwibW9jay10b2tlblwiLFxyXG59O1xyXG5cclxuY29uc3QgQXV0aENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG1vY2tBdXRoU3RhdGUpO1xyXG5BdXRoQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXV0aENvbnRleHRcIjtcclxuXHJcbi8vIEF1dGggUHJvdmlkZXIgY29tcG9uZW50XHJcbmNvbnN0IEF1dGhQcm92aWRlciA9ICh7IGNoaWxkcmVuLCB2YWx1ZSA9IG1vY2tBdXRoU3RhdGUgfSkgPT4ge1xyXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEF1dGhDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlIH0sIGNoaWxkcmVuKTtcclxufTtcclxuXHJcbi8vIEN1c3RvbSBob29rIGZvciBjb25zdW1pbmcgQXV0aCBDb250ZXh0XHJcbmNvbnN0IHVzZUF1dGggPSAoKSA9PiBSZWFjdC51c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcclxuXHJcbi8vIEhhbmRsZSBib3RoIEVTTSBhbmQgQ29tbW9uSlNcclxuLy8gY29uc3QgZXhwb3J0cyA9IHtcclxuLy8gICBBdXRoQ29udGV4dCxcclxuLy8gICBBdXRoUHJvdmlkZXIsXHJcbi8vICAgdXNlQXV0aCxcclxuLy8gICBtb2NrQXV0aFN0YXRlLFxyXG4vLyAgIGRlZmF1bHQ6IHtcclxuLy8gICAgIEF1dGhDb250ZXh0LFxyXG4vLyAgICAgQXV0aFByb3ZpZGVyLFxyXG4vLyAgICAgdXNlQXV0aCxcclxuLy8gICAgIG1vY2tBdXRoU3RhdGUsXHJcbi8vICAgfSxcclxuLy8gfTtcclxuXHJcbi8vIEZvciBkZWZhdWx0IGV4cG9ydCBwYXR0ZXJuc1xyXG5leHBvcnRzLkF1dGhDb250ZXh0ID0gQXV0aENvbnRleHQ7XHJcbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gQXV0aFByb3ZpZGVyO1xyXG5leHBvcnRzLnVzZUF1dGggPSB1c2VBdXRoO1xyXG5leHBvcnRzLm1vY2tBdXRoU3RhdGUgPSBtb2NrQXV0aFN0YXRlO1xyXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG5leHBvcnRzLmRlZmF1bHQgPSB1c2VBdXRoO1xyXG5cclxuLy8gbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7QUFFOUI7QUFDQSxNQUFNQyxhQUFhLEdBQUc7RUFDcEJDLGVBQWUsRUFBRSxJQUFJO0VBQ3JCQyxJQUFJLEVBQUU7SUFDSkMsRUFBRSxFQUFFLEtBQUs7SUFDVEMsUUFBUSxFQUFFLFVBQVU7SUFDcEJDLEtBQUssRUFBRSxrQkFBa0I7SUFDekJDLElBQUksRUFBRTtFQUNSLENBQUM7RUFDREMsS0FBSyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxNQUFNQyxPQUFPLENBQUNDLE9BQU8sQ0FBQztJQUFFQyxPQUFPLEVBQUU7RUFBSyxDQUFDLENBQUMsQ0FBQztFQUN4REMsTUFBTSxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ2pCSyxRQUFRLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO0lBQUVDLE9BQU8sRUFBRTtFQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzNERyxPQUFPLEVBQUUsS0FBSztFQUNkQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxLQUFLLEVBQUU7QUFDVCxDQUFDO0FBRUQsTUFBTUMsV0FBVyxHQUFHcEIsS0FBSyxDQUFDcUIsYUFBYSxDQUFDbkIsYUFBYSxDQUFDO0FBQ3REa0IsV0FBVyxDQUFDRSxXQUFXLEdBQUcsYUFBYTs7QUFFdkM7QUFDQSxNQUFNQyxZQUFZLEdBQUdBLENBQUM7RUFBRUMsUUFBUTtFQUFFQyxLQUFLLEdBQUd2QjtBQUFjLENBQUMsS0FBSztFQUM1RCxPQUFPRixLQUFLLENBQUMwQixhQUFhLENBQUNOLFdBQVcsQ0FBQ08sUUFBUSxFQUFFO0lBQUVGO0VBQU0sQ0FBQyxFQUFFRCxRQUFRLENBQUM7QUFDdkUsQ0FBQzs7QUFFRDtBQUNBLE1BQU1JLE9BQU8sR0FBR0EsQ0FBQSxLQUFNNUIsS0FBSyxDQUFDNkIsVUFBVSxDQUFDVCxXQUFXLENBQUM7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0FVLE9BQU8sQ0FBQ1YsV0FBVyxHQUFHQSxXQUFXO0FBQ2pDVSxPQUFPLENBQUNQLFlBQVksR0FBR0EsWUFBWTtBQUNuQ08sT0FBTyxDQUFDRixPQUFPLEdBQUdBLE9BQU87QUFDekJFLE9BQU8sQ0FBQzVCLGFBQWEsR0FBR0EsYUFBYTtBQUNyQzRCLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHSixPQUFPOztBQUV6QiIsImlnbm9yZUxpc3QiOltdfQ==