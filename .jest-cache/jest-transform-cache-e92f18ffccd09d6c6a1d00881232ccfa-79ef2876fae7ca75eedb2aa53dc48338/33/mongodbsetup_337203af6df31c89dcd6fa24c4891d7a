8fadb1b819a6eb9914476788686a52f1
const mongoose = require('mongoose');
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
let mongod = null;

// Connect to the in-memory database before running tests
beforeAll(async () => {
  try {
    mongod = await MongoMemoryServer.create({
      instance: {
        dbName: 'jest',
        port: 27017
      }
    });
    const uri = mongod.getUri();
    await mongoose.connect(uri);
    console.log('Connected to MongoDB Memory Server');
  } catch (error) {
    console.error('Error setting up MongoDB Memory Server:', error);
    throw error;
  }
});

// Clear all data between tests
afterEach(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      const collections = await mongoose.connection.db.collections();
      await Promise.all(collections.map(collection => collection.deleteMany({})));
    }
  } catch (error) {
    console.error('Error clearing collections:', error);
    throw error;
  }
});

// Close database connection after all tests
afterAll(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.connection.close();
    }
    if (mongod) {
      await mongod.stop();
    }
  } catch (error) {
    console.error('Error closing MongoDB connection:', error);
    throw error;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJNb25nb01lbW9yeVNlcnZlciIsIm1vbmdvZCIsImJlZm9yZUFsbCIsImNyZWF0ZSIsImluc3RhbmNlIiwiZGJOYW1lIiwicG9ydCIsInVyaSIsImdldFVyaSIsImNvbm5lY3QiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJhZnRlckVhY2giLCJjb25uZWN0aW9uIiwicmVhZHlTdGF0ZSIsImNvbGxlY3Rpb25zIiwiZGIiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiY29sbGVjdGlvbiIsImRlbGV0ZU1hbnkiLCJhZnRlckFsbCIsImNsb3NlIiwic3RvcCJdLCJzb3VyY2VzIjpbIm1vbmdvZGIuc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5jb25zdCB7IE1vbmdvTWVtb3J5U2VydmVyIH0gPSByZXF1aXJlKCdtb25nb2RiLW1lbW9yeS1zZXJ2ZXInKTtcclxuXHJcbmxldCBtb25nb2QgPSBudWxsO1xyXG5cclxuLy8gQ29ubmVjdCB0byB0aGUgaW4tbWVtb3J5IGRhdGFiYXNlIGJlZm9yZSBydW5uaW5nIHRlc3RzXHJcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIG1vbmdvZCA9IGF3YWl0IE1vbmdvTWVtb3J5U2VydmVyLmNyZWF0ZSh7XHJcbiAgICAgIGluc3RhbmNlOiB7XHJcbiAgICAgICAgZGJOYW1lOiAnamVzdCcsXHJcbiAgICAgICAgcG9ydDogMjcwMTdcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCB1cmkgPSBtb25nb2QuZ2V0VXJpKCk7XHJcbiAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KHVyaSk7XHJcbiAgICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIE1vbmdvREIgTWVtb3J5IFNlcnZlcicpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZXR0aW5nIHVwIE1vbmdvREIgTWVtb3J5IFNlcnZlcjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gQ2xlYXIgYWxsIGRhdGEgYmV0d2VlbiB0ZXN0c1xyXG5hZnRlckVhY2goYXN5bmMgKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlICE9PSAwKSB7XHJcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5kYi5jb2xsZWN0aW9ucygpO1xyXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChjb2xsZWN0aW9ucy5tYXAoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmRlbGV0ZU1hbnkoe30pKSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFyaW5nIGNvbGxlY3Rpb25zOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyBDbG9zZSBkYXRhYmFzZSBjb25uZWN0aW9uIGFmdGVyIGFsbCB0ZXN0c1xyXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmIChtb25nb29zZS5jb25uZWN0aW9uLnJlYWR5U3RhdGUgIT09IDApIHtcclxuICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1vbmdvZCkge1xyXG4gICAgICBhd2FpdCBtb25nb2Quc3RvcCgpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjbG9zaW5nIE1vbmdvREIgY29ubmVjdGlvbjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn0pOyAiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxNQUFNO0VBQUVDO0FBQWtCLENBQUMsR0FBR0QsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBRTlELElBQUlFLE1BQU0sR0FBRyxJQUFJOztBQUVqQjtBQUNBQyxTQUFTLENBQUMsWUFBWTtFQUNwQixJQUFJO0lBQ0ZELE1BQU0sR0FBRyxNQUFNRCxpQkFBaUIsQ0FBQ0csTUFBTSxDQUFDO01BQ3RDQyxRQUFRLEVBQUU7UUFDUkMsTUFBTSxFQUFFLE1BQU07UUFDZEMsSUFBSSxFQUFFO01BQ1I7SUFDRixDQUFDLENBQUM7SUFDRixNQUFNQyxHQUFHLEdBQUdOLE1BQU0sQ0FBQ08sTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTVYsUUFBUSxDQUFDVyxPQUFPLENBQUNGLEdBQUcsQ0FBQztJQUMzQkcsT0FBTyxDQUFDQyxHQUFHLENBQUMsb0NBQW9DLENBQUM7RUFDbkQsQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUNkRixPQUFPLENBQUNFLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRUEsS0FBSyxDQUFDO0lBQy9ELE1BQU1BLEtBQUs7RUFDYjtBQUNGLENBQUMsQ0FBQzs7QUFFRjtBQUNBQyxTQUFTLENBQUMsWUFBWTtFQUNwQixJQUFJO0lBQ0YsSUFBSWYsUUFBUSxDQUFDZ0IsVUFBVSxDQUFDQyxVQUFVLEtBQUssQ0FBQyxFQUFFO01BQ3hDLE1BQU1DLFdBQVcsR0FBRyxNQUFNbEIsUUFBUSxDQUFDZ0IsVUFBVSxDQUFDRyxFQUFFLENBQUNELFdBQVcsQ0FBQyxDQUFDO01BQzlELE1BQU1FLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSCxXQUFXLENBQUNJLEdBQUcsQ0FBQ0MsVUFBVSxJQUFJQSxVQUFVLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0U7RUFDRixDQUFDLENBQUMsT0FBT1YsS0FBSyxFQUFFO0lBQ2RGLE9BQU8sQ0FBQ0UsS0FBSyxDQUFDLDZCQUE2QixFQUFFQSxLQUFLLENBQUM7SUFDbkQsTUFBTUEsS0FBSztFQUNiO0FBQ0YsQ0FBQyxDQUFDOztBQUVGO0FBQ0FXLFFBQVEsQ0FBQyxZQUFZO0VBQ25CLElBQUk7SUFDRixJQUFJekIsUUFBUSxDQUFDZ0IsVUFBVSxDQUFDQyxVQUFVLEtBQUssQ0FBQyxFQUFFO01BQ3hDLE1BQU1qQixRQUFRLENBQUNnQixVQUFVLENBQUNVLEtBQUssQ0FBQyxDQUFDO0lBQ25DO0lBQ0EsSUFBSXZCLE1BQU0sRUFBRTtNQUNWLE1BQU1BLE1BQU0sQ0FBQ3dCLElBQUksQ0FBQyxDQUFDO0lBQ3JCO0VBQ0YsQ0FBQyxDQUFDLE9BQU9iLEtBQUssRUFBRTtJQUNkRixPQUFPLENBQUNFLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRUEsS0FBSyxDQUFDO0lBQ3pELE1BQU1BLEtBQUs7RUFDYjtBQUNGLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==