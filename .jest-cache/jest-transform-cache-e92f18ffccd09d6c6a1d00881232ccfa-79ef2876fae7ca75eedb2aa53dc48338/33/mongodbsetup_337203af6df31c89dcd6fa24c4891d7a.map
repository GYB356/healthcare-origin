{"version":3,"names":["mongoose","require","MongoMemoryServer","mongod","beforeAll","create","instance","dbName","port","uri","getUri","connect","console","log","error","afterEach","connection","readyState","collections","db","Promise","all","map","collection","deleteMany","afterAll","close","stop"],"sources":["mongodb.setup.js"],"sourcesContent":["const mongoose = require('mongoose');\r\nconst { MongoMemoryServer } = require('mongodb-memory-server');\r\n\r\nlet mongod = null;\r\n\r\n// Connect to the in-memory database before running tests\r\nbeforeAll(async () => {\r\n  try {\r\n    mongod = await MongoMemoryServer.create({\r\n      instance: {\r\n        dbName: 'jest',\r\n        port: 27017\r\n      }\r\n    });\r\n    const uri = mongod.getUri();\r\n    await mongoose.connect(uri);\r\n    console.log('Connected to MongoDB Memory Server');\r\n  } catch (error) {\r\n    console.error('Error setting up MongoDB Memory Server:', error);\r\n    throw error;\r\n  }\r\n});\r\n\r\n// Clear all data between tests\r\nafterEach(async () => {\r\n  try {\r\n    if (mongoose.connection.readyState !== 0) {\r\n      const collections = await mongoose.connection.db.collections();\r\n      await Promise.all(collections.map(collection => collection.deleteMany({})));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error clearing collections:', error);\r\n    throw error;\r\n  }\r\n});\r\n\r\n// Close database connection after all tests\r\nafterAll(async () => {\r\n  try {\r\n    if (mongoose.connection.readyState !== 0) {\r\n      await mongoose.connection.close();\r\n    }\r\n    if (mongod) {\r\n      await mongod.stop();\r\n    }\r\n  } catch (error) {\r\n    console.error('Error closing MongoDB connection:', error);\r\n    throw error;\r\n  }\r\n}); "],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAM;EAAEC;AAAkB,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE9D,IAAIE,MAAM,GAAG,IAAI;;AAEjB;AACAC,SAAS,CAAC,YAAY;EACpB,IAAI;IACFD,MAAM,GAAG,MAAMD,iBAAiB,CAACG,MAAM,CAAC;MACtCC,QAAQ,EAAE;QACRC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;MACR;IACF,CAAC,CAAC;IACF,MAAMC,GAAG,GAAGN,MAAM,CAACO,MAAM,CAAC,CAAC;IAC3B,MAAMV,QAAQ,CAACW,OAAO,CAACF,GAAG,CAAC;IAC3BG,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;EACnD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF,CAAC,CAAC;;AAEF;AACAC,SAAS,CAAC,YAAY;EACpB,IAAI;IACF,IAAIf,QAAQ,CAACgB,UAAU,CAACC,UAAU,KAAK,CAAC,EAAE;MACxC,MAAMC,WAAW,GAAG,MAAMlB,QAAQ,CAACgB,UAAU,CAACG,EAAE,CAACD,WAAW,CAAC,CAAC;MAC9D,MAAME,OAAO,CAACC,GAAG,CAACH,WAAW,CAACI,GAAG,CAACC,UAAU,IAAIA,UAAU,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E;EACF,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC,CAAC;;AAEF;AACAW,QAAQ,CAAC,YAAY;EACnB,IAAI;IACF,IAAIzB,QAAQ,CAACgB,UAAU,CAACC,UAAU,KAAK,CAAC,EAAE;MACxC,MAAMjB,QAAQ,CAACgB,UAAU,CAACU,KAAK,CAAC,CAAC;IACnC;IACA,IAAIvB,MAAM,EAAE;MACV,MAAMA,MAAM,CAACwB,IAAI,CAAC,CAAC;IACrB;EACF,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC,CAAC","ignoreList":[]}