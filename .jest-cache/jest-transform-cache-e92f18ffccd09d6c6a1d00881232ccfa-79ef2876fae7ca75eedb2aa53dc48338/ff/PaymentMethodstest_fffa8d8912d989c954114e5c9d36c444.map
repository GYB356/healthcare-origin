{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_PaymentMethods","_jsxFileName","__jsx","default","createElement","mockPaymentMethods","_id","cardType","lastFour","expiryMonth","expiryYear","billingName","isDefault","describe","test","render","paymentMethods","__self","__source","fileName","lineNumber","columnNumber","expect","screen","getByText","toBeInTheDocument","getAllByRole","toHaveLength","length","fireEvent","click","it"],"sources":["PaymentMethods.test.js"],"sourcesContent":["import React from \"react\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport PaymentMethods from \"../PaymentMethods\";\n\nconst mockPaymentMethods = [\n  {\n    _id: \"1\",\n    cardType: \"Visa\",\n    lastFour: \"1234\",\n    expiryMonth: \"12\",\n    expiryYear: \"2025\",\n    billingName: \"John Doe\",\n    isDefault: true,\n  },\n  {\n    _id: \"2\",\n    cardType: \"MasterCard\",\n    lastFour: \"5678\",\n    expiryMonth: \"11\",\n    expiryYear: \"2024\",\n    billingName: \"Jane Doe\",\n    isDefault: false,\n  },\n];\n\ndescribe(\"PaymentMethods Component\", () => {\n  test(\"renders without crashing\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getByText(\"Payment Methods\")).toBeInTheDocument();\n  });\n\n  test(\"displays the correct number of payment methods\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getAllByRole(\"listitem\")).toHaveLength(mockPaymentMethods.length);\n  });\n\n  test(\"displays payment method details correctly\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    expect(screen.getByText(\"Visa •••• 1234\")).toBeInTheDocument();\n    expect(screen.getByText(\"John Doe\")).toBeInTheDocument();\n  });\n\n  test(\"handles set default payment method\", () => {\n    render(<PaymentMethods paymentMethods={mockPaymentMethods} />);\n    fireEvent.click(screen.getByText(\"Set as Default\"));\n    // Check if the default method is updated\n  });\n});\n\n// Test to check if PaymentMethods renders correctly with no payment methods\nit(\"renders no payment methods message when list is empty\", () => {\n  render(<PaymentMethods paymentMethods={[]} />);\n  expect(screen.getByText(/no payment methods/i)).toBeInTheDocument();\n});\n\n// Test to check if PaymentMethods renders payment methods correctly\nit(\"renders payment methods correctly\", () => {\n  const paymentMethods = [\n    {\n      _id: \"1\",\n      cardType: \"Visa\",\n      lastFour: \"1234\",\n      expiryMonth: \"12\",\n      expiryYear: \"2023\",\n      billingName: \"John Doe\",\n    },\n    {\n      _id: \"2\",\n      cardType: \"Mastercard\",\n      lastFour: \"5678\",\n      expiryMonth: \"01\",\n      expiryYear: \"2024\",\n      billingName: \"Jane Smith\",\n    },\n  ];\n  render(<PaymentMethods paymentMethods={paymentMethods} />);\n  expect(screen.getByText(/visa/i)).toBeInTheDocument();\n  expect(screen.getByText(/mastercard/i)).toBeInTheDocument();\n});\n"],"mappings":"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","ignoreList":[]}