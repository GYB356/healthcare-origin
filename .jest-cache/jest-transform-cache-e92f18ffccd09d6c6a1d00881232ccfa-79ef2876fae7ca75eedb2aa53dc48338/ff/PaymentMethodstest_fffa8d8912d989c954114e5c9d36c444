117f7d45969e84c153655b98f4b051f2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _PaymentMethods = _interopRequireDefault(require("../PaymentMethods"));
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\pages\\src\\components\\billing\\__tests__\\PaymentMethods.test.js";
var __jsx = _react.default.createElement;
const mockPaymentMethods = [{
  _id: "1",
  cardType: "Visa",
  lastFour: "1234",
  expiryMonth: "12",
  expiryYear: "2025",
  billingName: "John Doe",
  isDefault: true
}, {
  _id: "2",
  cardType: "MasterCard",
  lastFour: "5678",
  expiryMonth: "11",
  expiryYear: "2024",
  billingName: "Jane Doe",
  isDefault: false
}];
describe("PaymentMethods Component", () => {
  test("renders without crashing", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 29,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText("Payment Methods")).toBeInTheDocument();
  });
  test("displays the correct number of payment methods", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 34,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getAllByRole("listitem")).toHaveLength(mockPaymentMethods.length);
  });
  test("displays payment method details correctly", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 12
      }
    }));
    expect(_react2.screen.getByText("Visa •••• 1234")).toBeInTheDocument();
    expect(_react2.screen.getByText("John Doe")).toBeInTheDocument();
  });
  test("handles set default payment method", () => {
    (0, _react2.render)(__jsx(_PaymentMethods.default, {
      paymentMethods: mockPaymentMethods,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 12
      }
    }));
    _react2.fireEvent.click(_react2.screen.getByText("Set as Default"));
    // Check if the default method is updated
  });
});

// Test to check if PaymentMethods renders correctly with no payment methods
it("renders no payment methods message when list is empty", () => {
  (0, _react2.render)(__jsx(_PaymentMethods.default, {
    paymentMethods: [],
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText(/no payment methods/i)).toBeInTheDocument();
});

// Test to check if PaymentMethods renders payment methods correctly
it("renders payment methods correctly", () => {
  const paymentMethods = [{
    _id: "1",
    cardType: "Visa",
    lastFour: "1234",
    expiryMonth: "12",
    expiryYear: "2023",
    billingName: "John Doe"
  }, {
    _id: "2",
    cardType: "Mastercard",
    lastFour: "5678",
    expiryMonth: "01",
    expiryYear: "2024",
    billingName: "Jane Smith"
  }];
  (0, _react2.render)(__jsx(_PaymentMethods.default, {
    paymentMethods: paymentMethods,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 77,
      columnNumber: 10
    }
  }));
  expect(_react2.screen.getByText(/visa/i)).toBeInTheDocument();
  expect(_react2.screen.getByText(/mastercard/i)).toBeInTheDocument();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,