{"version":3,"names":["_api","require","_jestFetchMock","_interopRequireDefault","describe","beforeEach","fetchMock","resetMocks","test","mockResponseOnce","JSON","stringify","token","user","_id","name","email","role","response","ApiService","login","expect","success","toBe","data","toHaveProperty","mockRejectOnce","Error","error","doctor","patient","date","time","status","getAppointments","toHaveLength","message","report","createReport"],"sources":["api.test.ts"],"sourcesContent":["import { ApiService } from '../../services/api';\nimport fetchMock from 'jest-fetch-mock';\n\ndescribe('ApiService', () => {\n  beforeEach(() => {\n    fetchMock.resetMocks();\n  });\n\n  test('login should return token and user data on success', async () => {\n    fetchMock.mockResponseOnce(JSON.stringify({ token: 'mock-token', user: { _id: '1', name: 'John Doe', email: 'john@example.com', role: 'doctor' } }));\n\n    const response = await ApiService.login('john@example.com', 'password123');\n    expect(response.success).toBe(true);\n    expect(response.data).toHaveProperty('token', 'mock-token');\n    expect(response.data).toHaveProperty('user');\n  });\n\n  test('login should return error message on failure', async () => {\n    fetchMock.mockRejectOnce(new Error('Invalid credentials'));\n\n    const response = await ApiService.login('john@example.com', 'wrongpassword');\n    expect(response.success).toBe(false);\n    expect(response.error).toBe('Something went wrong');\n  });\n\n  test('getAppointments should return appointments on success', async () => {\n    fetchMock.mockResponseOnce(JSON.stringify([{ _id: '1', doctor: 'Dr. Smith', patient: 'John Doe', date: '2023-01-01', time: '10:00 AM', status: 'scheduled' }]));\n\n    const response = await ApiService.getAppointments();\n    expect(response.success).toBe(true);\n    expect(response.data).toHaveLength(1);\n  });\n\n  test('getAppointments should return error message on failure', async () => {\n    fetchMock.mockRejectOnce(new Error('Failed to fetch appointments'));\n\n    const response = await ApiService.getAppointments();\n    expect(response.success).toBe(false);\n    expect(response.error).toBe('Something went wrong');\n  });\n\n  test('createReport should return report data on success', async () => {\n    fetchMock.mockResponseOnce(JSON.stringify({ message: 'Report saved', report: { _id: '1', report: 'Test report content' } }));\n\n    const response = await ApiService.createReport('123', 'Test transcript');\n    expect(response.success).toBe(true);\n    expect(response.data).toHaveProperty('report');\n  });\n\n  test('createReport should return error message on failure', async () => {\n    fetchMock.mockRejectOnce(new Error('Failed to create report'));\n\n    const response = await ApiService.createReport('123', 'Test transcript');\n    expect(response.success).toBe(false);\n    expect(response.error).toBe('Something went wrong');\n  });\n});\n"],"mappings":";;;AAAA,IAAAA,IAAA,GAAAC,OAAA;AACA,IAAAC,cAAA,GAAAC,sBAAA,CAAAF,OAAA;AAEAG,QAAQ,CAAC,YAAY,EAAE,MAAM;EAC3BC,UAAU,CAAC,MAAM;IACfC,sBAAS,CAACC,UAAU,CAAC,CAAC;EACxB,CAAC,CAAC;EAEFC,IAAI,CAAC,oDAAoD,EAAE,YAAY;IACrEF,sBAAS,CAACG,gBAAgB,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,KAAK,EAAE,YAAY;MAAEC,IAAI,EAAE;QAAEC,GAAG,EAAE,GAAG;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE,kBAAkB;QAAEC,IAAI,EAAE;MAAS;IAAE,CAAC,CAAC,CAAC;IAEpJ,MAAMC,QAAQ,GAAG,MAAMC,eAAU,CAACC,KAAK,CAAC,kBAAkB,EAAE,aAAa,CAAC;IAC1EC,MAAM,CAACH,QAAQ,CAACI,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnCF,MAAM,CAACH,QAAQ,CAACM,IAAI,CAAC,CAACC,cAAc,CAAC,OAAO,EAAE,YAAY,CAAC;IAC3DJ,MAAM,CAACH,QAAQ,CAACM,IAAI,CAAC,CAACC,cAAc,CAAC,MAAM,CAAC;EAC9C,CAAC,CAAC;EAEFjB,IAAI,CAAC,8CAA8C,EAAE,YAAY;IAC/DF,sBAAS,CAACoB,cAAc,CAAC,IAAIC,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAE1D,MAAMT,QAAQ,GAAG,MAAMC,eAAU,CAACC,KAAK,CAAC,kBAAkB,EAAE,eAAe,CAAC;IAC5EC,MAAM,CAACH,QAAQ,CAACI,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACpCF,MAAM,CAACH,QAAQ,CAACU,KAAK,CAAC,CAACL,IAAI,CAAC,sBAAsB,CAAC;EACrD,CAAC,CAAC;EAEFf,IAAI,CAAC,uDAAuD,EAAE,YAAY;IACxEF,sBAAS,CAACG,gBAAgB,CAACC,IAAI,CAACC,SAAS,CAAC,CAAC;MAAEG,GAAG,EAAE,GAAG;MAAEe,MAAM,EAAE,WAAW;MAAEC,OAAO,EAAE,UAAU;MAAEC,IAAI,EAAE,YAAY;MAAEC,IAAI,EAAE,UAAU;MAAEC,MAAM,EAAE;IAAY,CAAC,CAAC,CAAC,CAAC;IAE/J,MAAMf,QAAQ,GAAG,MAAMC,eAAU,CAACe,eAAe,CAAC,CAAC;IACnDb,MAAM,CAACH,QAAQ,CAACI,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnCF,MAAM,CAACH,QAAQ,CAACM,IAAI,CAAC,CAACW,YAAY,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC;EAEF3B,IAAI,CAAC,wDAAwD,EAAE,YAAY;IACzEF,sBAAS,CAACoB,cAAc,CAAC,IAAIC,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAEnE,MAAMT,QAAQ,GAAG,MAAMC,eAAU,CAACe,eAAe,CAAC,CAAC;IACnDb,MAAM,CAACH,QAAQ,CAACI,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACpCF,MAAM,CAACH,QAAQ,CAACU,KAAK,CAAC,CAACL,IAAI,CAAC,sBAAsB,CAAC;EACrD,CAAC,CAAC;EAEFf,IAAI,CAAC,mDAAmD,EAAE,YAAY;IACpEF,sBAAS,CAACG,gBAAgB,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEyB,OAAO,EAAE,cAAc;MAAEC,MAAM,EAAE;QAAEvB,GAAG,EAAE,GAAG;QAAEuB,MAAM,EAAE;MAAsB;IAAE,CAAC,CAAC,CAAC;IAE5H,MAAMnB,QAAQ,GAAG,MAAMC,eAAU,CAACmB,YAAY,CAAC,KAAK,EAAE,iBAAiB,CAAC;IACxEjB,MAAM,CAACH,QAAQ,CAACI,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnCF,MAAM,CAACH,QAAQ,CAACM,IAAI,CAAC,CAACC,cAAc,CAAC,QAAQ,CAAC;EAChD,CAAC,CAAC;EAEFjB,IAAI,CAAC,qDAAqD,EAAE,YAAY;IACtEF,sBAAS,CAACoB,cAAc,CAAC,IAAIC,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAE9D,MAAMT,QAAQ,GAAG,MAAMC,eAAU,CAACmB,YAAY,CAAC,KAAK,EAAE,iBAAiB,CAAC;IACxEjB,MAAM,CAACH,QAAQ,CAACI,OAAO,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACpCF,MAAM,CAACH,QAAQ,CAACU,KAAK,CAAC,CAACL,IAAI,CAAC,sBAAsB,CAAC;EACrD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}