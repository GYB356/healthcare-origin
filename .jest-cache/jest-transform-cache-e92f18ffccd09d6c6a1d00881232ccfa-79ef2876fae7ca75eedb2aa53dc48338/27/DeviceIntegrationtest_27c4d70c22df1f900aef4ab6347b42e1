a7ef90937db8e5c6adda55735968e74f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _AuthContext = require("../../context/AuthContext");
var _DeviceIntegration = _interopRequireDefault(require("../../pages/DeviceIntegration"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["providerProps"];
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\components\\__tests__\\DeviceIntegration.test.js";
import React from "react";
var __jsx = React.createElement;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
const renderWithAuth = (ui, _ref) => {
  let {
      providerProps
    } = _ref,
    renderOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, _objectSpread(_objectSpread({}, providerProps), {}, {
    children: ui
  })), renderOptions);
};
describe('DeviceIntegration Component', () => {
  test('renders DeviceIntegration component for authorized users', () => {
    const providerProps = {
      value: {
        user: {
          role: 'doctor'
        }
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DeviceIntegration.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Device Integration/i)).toBeInTheDocument();
    expect(_react2.screen.getByText(/Monitor medical device data/i)).toBeInTheDocument();
  });
  test('denies access for unauthorized users', () => {
    const providerProps = {
      value: {
        user: {
          role: 'guest'
        }
      }
    };
    renderWithAuth(/*#__PURE__*/(0, _jsxRuntime.jsx)(_DeviceIntegration.default, {}), {
      providerProps
    });
    expect(_react2.screen.getByText(/Access Denied/i)).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfQXV0aENvbnRleHQiLCJfRGV2aWNlSW50ZWdyYXRpb24iLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9qc3hGaWxlTmFtZSIsIlJlYWN0IiwiX19qc3giLCJjcmVhdGVFbGVtZW50Iiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwicmVuZGVyV2l0aEF1dGgiLCJ1aSIsIl9yZWYiLCJwcm92aWRlclByb3BzIiwicmVuZGVyT3B0aW9ucyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJyZW5kZXIiLCJqc3giLCJBdXRoQ29udGV4dCIsIlByb3ZpZGVyIiwiY2hpbGRyZW4iLCJkZXNjcmliZSIsInRlc3QiLCJ2YWx1ZSIsInVzZXIiLCJyb2xlIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiXSwic291cmNlcyI6WyJEZXZpY2VJbnRlZ3JhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgQXV0aENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0F1dGhDb250ZXh0JztcbmltcG9ydCBEZXZpY2VJbnRlZ3JhdGlvbiBmcm9tICcuLi8uLi9wYWdlcy9EZXZpY2VJbnRlZ3JhdGlvbic7XG5cbmNvbnN0IHJlbmRlcldpdGhBdXRoID0gKHVpLCB7IHByb3ZpZGVyUHJvcHMsIC4uLnJlbmRlck9wdGlvbnMgfSkgPT4ge1xuICAgIHJldHVybiByZW5kZXIoXG4gICAgICAgIDxBdXRoQ29udGV4dC5Qcm92aWRlciB7Li4ucHJvdmlkZXJQcm9wc30+e3VpfTwvQXV0aENvbnRleHQuUHJvdmlkZXI+LFxuICAgICAgICByZW5kZXJPcHRpb25zXG4gICAgKTtcbn07XG5cbmRlc2NyaWJlKCdEZXZpY2VJbnRlZ3JhdGlvbiBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgdGVzdCgncmVuZGVycyBEZXZpY2VJbnRlZ3JhdGlvbiBjb21wb25lbnQgZm9yIGF1dGhvcml6ZWQgdXNlcnMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyUHJvcHMgPSB7XG4gICAgICAgICAgICB2YWx1ZTogeyB1c2VyOiB7IHJvbGU6ICdkb2N0b3InIH0gfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVuZGVyV2l0aEF1dGgoPERldmljZUludGVncmF0aW9uIC8+LCB7IHByb3ZpZGVyUHJvcHMgfSk7XG5cbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL0RldmljZSBJbnRlZ3JhdGlvbi9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL01vbml0b3IgbWVkaWNhbCBkZXZpY2UgZGF0YS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2RlbmllcyBhY2Nlc3MgZm9yIHVuYXV0aG9yaXplZCB1c2VycycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJQcm9wcyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB7IHVzZXI6IHsgcm9sZTogJ2d1ZXN0JyB9IH0sXG4gICAgICAgIH07XG4gICAgICAgIHJlbmRlcldpdGhBdXRoKDxEZXZpY2VJbnRlZ3JhdGlvbiAvPiwgeyBwcm92aWRlclByb3BzIH0pO1xuXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9BY2Nlc3MgRGVuaWVkL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xufSk7ICJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxrQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQThELElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUFBLE1BQUFLLFNBQUE7QUFBQSxJQUFBQyxZQUFBO0FBQUEsT0FBQUMsS0FBQTtBQUFBLElBQUFDLEtBQUEsR0FBQUQsS0FBQSxDQUFBRSxhQUFBO0FBQUEsU0FBQUMsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxRQUFBZSxnQkFBQSxDQUFBQyxPQUFBLEVBQUFqQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWUseUJBQUEsR0FBQWYsTUFBQSxDQUFBZ0IsZ0JBQUEsQ0FBQW5CLENBQUEsRUFBQUcsTUFBQSxDQUFBZSx5QkFBQSxDQUFBaEIsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBaUIsY0FBQSxDQUFBcEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBO0FBRTlELE1BQU1xQixjQUFjLEdBQUdBLENBQUNDLEVBQUUsRUFBQUMsSUFBQSxLQUEwQztFQUFBLElBQXhDO01BQUVDO0lBQWdDLENBQUMsR0FBQUQsSUFBQTtJQUFmRSxhQUFhLE9BQUFDLHlCQUFBLENBQUFULE9BQUEsRUFBQU0sSUFBQSxFQUFBN0IsU0FBQTtFQUN6RCxPQUFPLElBQUFpQyxjQUFNLGVBQ1QsSUFBQWxDLFdBQUEsQ0FBQW1DLEdBQUEsRUFBQ3JDLFlBQUEsQ0FBQXNDLFdBQVcsQ0FBQ0MsUUFBUSxFQUFBbEIsYUFBQSxDQUFBQSxhQUFBLEtBQUtZLGFBQWE7SUFBQU8sUUFBQSxFQUFHVDtFQUFFLEVBQXVCLENBQUMsRUFDcEVHLGFBQ0osQ0FBQztBQUNMLENBQUM7QUFFRE8sUUFBUSxDQUFDLDZCQUE2QixFQUFFLE1BQU07RUFDMUNDLElBQUksQ0FBQywwREFBMEQsRUFBRSxNQUFNO0lBQ25FLE1BQU1ULGFBQWEsR0FBRztNQUNsQlUsS0FBSyxFQUFFO1FBQUVDLElBQUksRUFBRTtVQUFFQyxJQUFJLEVBQUU7UUFBUztNQUFFO0lBQ3RDLENBQUM7SUFDRGYsY0FBYyxjQUFDLElBQUE1QixXQUFBLENBQUFtQyxHQUFBLEVBQUNwQyxrQkFBQSxDQUFBeUIsT0FBaUIsSUFBRSxDQUFDLEVBQUU7TUFBRU87SUFBYyxDQUFDLENBQUM7SUFFeERhLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ25FSCxNQUFNLENBQUNDLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUNoRixDQUFDLENBQUM7RUFFRlAsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLE1BQU07SUFDL0MsTUFBTVQsYUFBYSxHQUFHO01BQ2xCVSxLQUFLLEVBQUU7UUFBRUMsSUFBSSxFQUFFO1VBQUVDLElBQUksRUFBRTtRQUFRO01BQUU7SUFDckMsQ0FBQztJQUNEZixjQUFjLGNBQUMsSUFBQTVCLFdBQUEsQ0FBQW1DLEdBQUEsRUFBQ3BDLGtCQUFBLENBQUF5QixPQUFpQixJQUFFLENBQUMsRUFBRTtNQUFFTztJQUFjLENBQUMsQ0FBQztJQUV4RGEsTUFBTSxDQUFDQyxjQUFNLENBQUNDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDbEUsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119