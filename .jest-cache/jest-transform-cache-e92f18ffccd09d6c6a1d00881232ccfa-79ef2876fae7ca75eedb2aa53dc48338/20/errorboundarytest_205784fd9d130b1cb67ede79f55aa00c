c2cb3e0b59adf1ae79bd0e3f3827d2f2
"use strict";

var _vitest = require("vitest");
var _react = require("@testing-library/react");
var _errorBoundary = require("@/components/error-boundary");
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\__tests__\\components\\error-boundary.test.tsx"; // Mock console.error to prevent test output noise
import React from "react";
var __jsx = React.createElement;
const originalError = console.error;
beforeAll(() => {
  console.error = _vitest.vi.fn();
});
afterAll(() => {
  console.error = originalError;
});

// Component that throws an error
const ThrowError = ({
  message
}) => {
  throw new Error(message);
};
(0, _vitest.describe)('ErrorBoundary', () => {
  (0, _vitest.it)('should render children when there is no error', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_errorBoundary.ErrorBoundary, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: "Test Content"
      })
    }));
    (0, _vitest.expect)(_react.screen.getByText('Test Content')).toBeInTheDocument();
  });
  (0, _vitest.it)('should render error UI when child throws', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_errorBoundary.ErrorBoundary, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ThrowError, {
        message: "Test Error"
      })
    }));
    (0, _vitest.expect)(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
    (0, _vitest.expect)(_react.screen.getByText(/Test Error/i)).toBeInTheDocument();
    (0, _vitest.expect)(_react.screen.getByRole('button', {
      name: /try again/i
    })).toBeInTheDocument();
  });
  (0, _vitest.it)('should render custom fallback when provided', () => {
    const CustomFallback = ({
      error
    }) => /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: ["Custom Error: ", error.message]
    });
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_errorBoundary.ErrorBoundary, {
      fallback: CustomFallback,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ThrowError, {
        message: "Custom Test Error"
      })
    }));
    (0, _vitest.expect)(_react.screen.getByText(/Custom Error: Custom Test Error/i)).toBeInTheDocument();
  });
  (0, _vitest.it)('should reset error state when try again is clicked', () => {
    const TestComponent = () => {
      const [shouldThrow, setShouldThrow] = React.useState(true);
      if (shouldThrow) {
        throw new Error('Initial Error');
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: "Recovered Content"
      });
    };
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_errorBoundary.ErrorBoundary, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    (0, _vitest.expect)(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
    _react.fireEvent.click(_react.screen.getByRole('button', {
      name: /try again/i
    }));
    (0, _vitest.expect)(_react.screen.getByText('Recovered Content')).toBeInTheDocument();
  });
  (0, _vitest.it)('should handle nested errors', () => {
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsxs)(_errorBoundary.ErrorBoundary, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        children: "Outer Content"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_errorBoundary.ErrorBoundary, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ThrowError, {
          message: "Nested Error"
        })
      })]
    }));
    (0, _vitest.expect)(_react.screen.getByText('Outer Content')).toBeInTheDocument();
    (0, _vitest.expect)(_react.screen.getByText(/Nested Error/i)).toBeInTheDocument();
  });
  (0, _vitest.it)('should log errors in development', () => {
    const originalNodeEnv = process.env.NODE_ENV;
    process.env.NODE_ENV = 'development';
    (0, _react.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_errorBoundary.ErrorBoundary, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ThrowError, {
        message: "Development Error"
      })
    }));
    (0, _vitest.expect)(console.error).toHaveBeenCalled();
    process.env.NODE_ENV = originalNodeEnv;
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,