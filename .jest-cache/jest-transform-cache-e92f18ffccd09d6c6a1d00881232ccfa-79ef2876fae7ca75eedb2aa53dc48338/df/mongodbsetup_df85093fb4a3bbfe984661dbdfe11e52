716cea58add28e045b07bc93bfcf6708
const {
  MongoMemoryServer
} = require('mongodb-memory-server');
const mongoose = require('mongoose');
let mongod;

// Connect to the in-memory database before running tests
beforeAll(async () => {
  try {
    mongod = await MongoMemoryServer.create({
      instance: {
        dbName: 'jest'
      }
    });
    const uri = mongod.getUri();
    await mongoose.connect(uri);
  } catch (error) {
    console.error('MongoDB Memory Server setup failed:', error);
    throw error;
  }
});

// Clear all data between tests
afterEach(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      const collections = await mongoose.connection.db.collections();
      await Promise.all(collections.map(collection => collection.deleteMany({})));
    }
  } catch (error) {
    console.error('Failed to clean up test database:', error);
    throw error;
  }
});

// Close database connection after all tests
afterAll(async () => {
  try {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.disconnect();
    }
    if (mongod) {
      await mongod.stop();
    }
  } catch (error) {
    console.error('Failed to stop MongoDB Memory Server:', error);
    throw error;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNb25nb01lbW9yeVNlcnZlciIsInJlcXVpcmUiLCJtb25nb29zZSIsIm1vbmdvZCIsImJlZm9yZUFsbCIsImNyZWF0ZSIsImluc3RhbmNlIiwiZGJOYW1lIiwidXJpIiwiZ2V0VXJpIiwiY29ubmVjdCIsImVycm9yIiwiY29uc29sZSIsImFmdGVyRWFjaCIsImNvbm5lY3Rpb24iLCJyZWFkeVN0YXRlIiwiY29sbGVjdGlvbnMiLCJkYiIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJjb2xsZWN0aW9uIiwiZGVsZXRlTWFueSIsImFmdGVyQWxsIiwiZGlzY29ubmVjdCIsInN0b3AiXSwic291cmNlcyI6WyJtb25nb2RiLnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgTW9uZ29NZW1vcnlTZXJ2ZXIgfSA9IHJlcXVpcmUoJ21vbmdvZGItbWVtb3J5LXNlcnZlcicpO1xyXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XHJcblxyXG5sZXQgbW9uZ29kO1xyXG5cclxuLy8gQ29ubmVjdCB0byB0aGUgaW4tbWVtb3J5IGRhdGFiYXNlIGJlZm9yZSBydW5uaW5nIHRlc3RzXHJcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIG1vbmdvZCA9IGF3YWl0IE1vbmdvTWVtb3J5U2VydmVyLmNyZWF0ZSh7XHJcbiAgICAgIGluc3RhbmNlOiB7XHJcbiAgICAgICAgZGJOYW1lOiAnamVzdCdcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCB1cmkgPSBtb25nb2QuZ2V0VXJpKCk7XHJcbiAgICBhd2FpdCBtb25nb29zZS5jb25uZWN0KHVyaSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ01vbmdvREIgTWVtb3J5IFNlcnZlciBzZXR1cCBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vIENsZWFyIGFsbCBkYXRhIGJldHdlZW4gdGVzdHNcclxuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgaWYgKG1vbmdvb3NlLmNvbm5lY3Rpb24ucmVhZHlTdGF0ZSAhPT0gMCkge1xyXG4gICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IGF3YWl0IG1vbmdvb3NlLmNvbm5lY3Rpb24uZGIuY29sbGVjdGlvbnMoKTtcclxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoY29sbGVjdGlvbnMubWFwKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5kZWxldGVNYW55KHt9KSkpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY2xlYW4gdXAgdGVzdCBkYXRhYmFzZTonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gQ2xvc2UgZGF0YWJhc2UgY29ubmVjdGlvbiBhZnRlciBhbGwgdGVzdHNcclxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAobW9uZ29vc2UuY29ubmVjdGlvbi5yZWFkeVN0YXRlICE9PSAwKSB7XHJcbiAgICAgIGF3YWl0IG1vbmdvb3NlLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuICAgIGlmIChtb25nb2QpIHtcclxuICAgICAgYXdhaXQgbW9uZ29kLnN0b3AoKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHN0b3AgTW9uZ29EQiBNZW1vcnkgU2VydmVyOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSk7ICJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTTtFQUFFQTtBQUFrQixDQUFDLEdBQUdDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUM5RCxNQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFcEMsSUFBSUUsTUFBTTs7QUFFVjtBQUNBQyxTQUFTLENBQUMsWUFBWTtFQUNwQixJQUFJO0lBQ0ZELE1BQU0sR0FBRyxNQUFNSCxpQkFBaUIsQ0FBQ0ssTUFBTSxDQUFDO01BQ3RDQyxRQUFRLEVBQUU7UUFDUkMsTUFBTSxFQUFFO01BQ1Y7SUFDRixDQUFDLENBQUM7SUFDRixNQUFNQyxHQUFHLEdBQUdMLE1BQU0sQ0FBQ00sTUFBTSxDQUFDLENBQUM7SUFDM0IsTUFBTVAsUUFBUSxDQUFDUSxPQUFPLENBQUNGLEdBQUcsQ0FBQztFQUM3QixDQUFDLENBQUMsT0FBT0csS0FBSyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLHFDQUFxQyxFQUFFQSxLQUFLLENBQUM7SUFDM0QsTUFBTUEsS0FBSztFQUNiO0FBQ0YsQ0FBQyxDQUFDOztBQUVGO0FBQ0FFLFNBQVMsQ0FBQyxZQUFZO0VBQ3BCLElBQUk7SUFDRixJQUFJWCxRQUFRLENBQUNZLFVBQVUsQ0FBQ0MsVUFBVSxLQUFLLENBQUMsRUFBRTtNQUN4QyxNQUFNQyxXQUFXLEdBQUcsTUFBTWQsUUFBUSxDQUFDWSxVQUFVLENBQUNHLEVBQUUsQ0FBQ0QsV0FBVyxDQUFDLENBQUM7TUFDOUQsTUFBTUUsT0FBTyxDQUFDQyxHQUFHLENBQUNILFdBQVcsQ0FBQ0ksR0FBRyxDQUFDQyxVQUFVLElBQUlBLFVBQVUsQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RTtFQUNGLENBQUMsQ0FBQyxPQUFPWCxLQUFLLEVBQUU7SUFDZEMsT0FBTyxDQUFDRCxLQUFLLENBQUMsbUNBQW1DLEVBQUVBLEtBQUssQ0FBQztJQUN6RCxNQUFNQSxLQUFLO0VBQ2I7QUFDRixDQUFDLENBQUM7O0FBRUY7QUFDQVksUUFBUSxDQUFDLFlBQVk7RUFDbkIsSUFBSTtJQUNGLElBQUlyQixRQUFRLENBQUNZLFVBQVUsQ0FBQ0MsVUFBVSxLQUFLLENBQUMsRUFBRTtNQUN4QyxNQUFNYixRQUFRLENBQUNzQixVQUFVLENBQUMsQ0FBQztJQUM3QjtJQUNBLElBQUlyQixNQUFNLEVBQUU7TUFDVixNQUFNQSxNQUFNLENBQUNzQixJQUFJLENBQUMsQ0FBQztJQUNyQjtFQUNGLENBQUMsQ0FBQyxPQUFPZCxLQUFLLEVBQUU7SUFDZEMsT0FBTyxDQUFDRCxLQUFLLENBQUMsdUNBQXVDLEVBQUVBLEtBQUssQ0FBQztJQUM3RCxNQUFNQSxLQUFLO0VBQ2I7QUFDRixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=