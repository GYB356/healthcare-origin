d9a68eb584df59b1af7f0de837369bf6
"use strict";

// Mock the modules
_getJestObj().mock('axios');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _AuthContext = require("../../context/AuthContext");
var _HIPAADocs = _interopRequireDefault(require("../../pages/HIPAADocs"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
var _jsxFileName = "C:\\Users\\olari\\Downloads\\healthcare-main\\healthcare-main\\HealthcareSync\\frontend\\src\\components\\__tests__\\HIPAADocs.test.js";
import React from "react";
var __jsx = React.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('HIPAADocs Component', () => {
  const mockDocuments = [{
    id: 'doc-1',
    title: 'Privacy Policy',
    version: '1.0',
    content: 'Privacy policy content...'
  }, {
    id: 'doc-2',
    title: 'Patient Rights',
    version: '1.1',
    content: 'Patient rights content...'
  }];
  const mockAcknowledgments = [{
    id: 'ack-1',
    documentId: 'doc-1',
    userId: 'user-1',
    acknowledgedAt: '2024-03-01T12:00:00Z'
  }];
  const renderComponent = (role = 'admin') => {
    const mockUser = {
      id: 'user-1',
      role: role
    };
    return (0, _react2.render)(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.MemoryRouter, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        value: {
          user: mockUser
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_HIPAADocs.default, {})
      })
    }));
  };
  beforeEach(() => {
    jest.clearAllMocks();
    _axios.default.get.mockResolvedValueOnce({
      data: mockDocuments
    }).mockResolvedValueOnce({
      data: mockAcknowledgments
    });
  });
  it('loads and displays HIPAA documents', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.get).toHaveBeenCalledWith('/api/hipaa/documents');
    });
    expect(_react2.screen.getByText('Privacy Policy')).toBeInTheDocument();
    expect(_react2.screen.getByText('Patient Rights')).toBeInTheDocument();
    expect(_react2.screen.getByText('Version 1.0')).toBeInTheDocument();
    expect(_react2.screen.getByText('Version 1.1')).toBeInTheDocument();
  });
  it('shows acknowledgment status', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Acknowledged')).toBeInTheDocument();
    });
  });
  it('allows viewing document content', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getAllByText('View Document')).toHaveLength(2);
    });
    _react2.fireEvent.click(_react2.screen.getAllByText('View Document')[0]);
    expect(_react2.screen.getByText('Privacy policy content...')).toBeInTheDocument();
  });
  it('allows acknowledging documents', async () => {
    _axios.default.post.mockResolvedValueOnce({
      data: {
        id: 'ack-2',
        documentId: 'doc-2',
        userId: 'user-1',
        acknowledgedAt: '2024-03-01T13:00:00Z'
      }
    });
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getAllByText('View Document')).toHaveLength(2);
    });

    // Open the second document (unacknowledged)
    _react2.fireEvent.click(_react2.screen.getAllByText('View Document')[1]);

    // Click acknowledge button
    _react2.fireEvent.click(_react2.screen.getByText('Acknowledge'));
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.post).toHaveBeenCalledWith('/api/hipaa/acknowledgments', {
        documentId: 'doc-2',
        userId: 'user-1'
      });
    });
  });
  it('handles error states', async () => {
    _axios.default.get.mockRejectedValueOnce(new Error('Failed to load documents'));
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to load HIPAA documents')).toBeInTheDocument();
    });
  });
  it('displays loading state', () => {
    renderComponent();
    expect(_react2.screen.getByText('Loading HIPAA documents...')).toBeInTheDocument();
  });
  it('closes document modal', async () => {
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getAllByText('View Document')).toHaveLength(2);
    });
    _react2.fireEvent.click(_react2.screen.getAllByText('View Document')[0]);
    expect(_react2.screen.getByText('Privacy policy content...')).toBeInTheDocument();
    _react2.fireEvent.click(_react2.screen.getByText('Close'));
    expect(_react2.screen.queryByText('Privacy policy content...')).not.toBeInTheDocument();
  });
  it('handles acknowledgment errors', async () => {
    _axios.default.post.mockRejectedValueOnce(new Error('Failed to acknowledge document'));
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getAllByText('View Document')).toHaveLength(2);
    });
    _react2.fireEvent.click(_react2.screen.getAllByText('View Document')[1]);
    _react2.fireEvent.click(_react2.screen.getByText('Acknowledge'));
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getByText('Failed to acknowledge document')).toBeInTheDocument();
    });
  });
  it('refreshes acknowledgments after successful acknowledgment', async () => {
    const newAcknowledgment = {
      id: 'ack-2',
      documentId: 'doc-2',
      userId: 'user-1',
      acknowledgedAt: '2024-03-01T13:00:00Z'
    };
    _axios.default.post.mockResolvedValueOnce({
      data: newAcknowledgment
    });
    _axios.default.get.mockResolvedValueOnce({
      data: mockDocuments
    }).mockResolvedValueOnce({
      data: mockAcknowledgments
    }).mockResolvedValueOnce({
      data: [...mockAcknowledgments, newAcknowledgment]
    });
    renderComponent();
    await (0, _react2.waitFor)(() => {
      expect(_react2.screen.getAllByText('View Document')).toHaveLength(2);
    });
    _react2.fireEvent.click(_react2.screen.getAllByText('View Document')[1]);
    _react2.fireEvent.click(_react2.screen.getByText('Acknowledge'));
    await (0, _react2.waitFor)(() => {
      expect(_axios.default.get).toHaveBeenCalledWith('/api/hipaa/acknowledgments?userId=user-1');
      expect(_react2.screen.getAllByText('Acknowledged')).toHaveLength(2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,