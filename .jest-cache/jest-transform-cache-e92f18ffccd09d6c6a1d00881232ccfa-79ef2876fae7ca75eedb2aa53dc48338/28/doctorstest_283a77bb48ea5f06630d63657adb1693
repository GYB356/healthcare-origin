06bef672b1532729a6c772473abffe40
"use strict";

var _vitest = require("vitest");
var _server = require("next/server");
var _nextAuth = require("next-auth");
var _client = require("@prisma/client");
var _route = require("@/app/api/doctors/[id]/route");
var _route2 = require("@/app/api/doctors/route");
var _route3 = require("@/app/api/doctors/search/route");
var _route4 = require("@/app/api/doctors/[id]/availability/route");
// Mock next-auth
_vitest.vi.mock('next-auth', () => ({
  getServerSession: _vitest.vi.fn()
}));

// Mock Prisma
_vitest.vi.mock('@prisma/client', () => ({
  PrismaClient: _vitest.vi.fn(() => ({
    user: {
      findMany: _vitest.vi.fn(),
      findUnique: _vitest.vi.fn(),
      update: _vitest.vi.fn()
    },
    availability: {
      upsert: _vitest.vi.fn(),
      findMany: _vitest.vi.fn()
    },
    $transaction: _vitest.vi.fn(callback => callback())
  }))
}));
(0, _vitest.describe)('Doctors API', () => {
  let mockPrisma;
  let mockSession;
  (0, _vitest.beforeEach)(() => {
    mockPrisma = new _client.PrismaClient();
    mockSession = {
      user: {
        id: 'doctor-id',
        role: 'DOCTOR'
      }
    };
    _nextAuth.getServerSession.mockResolvedValue(mockSession);
  });
  (0, _vitest.afterEach)(() => {
    _vitest.vi.clearAllMocks();
  });
  (0, _vitest.describe)('GET /api/doctors', () => {
    (0, _vitest.it)('should return 401 for unauthenticated users', async () => {
      ;
      _nextAuth.getServerSession.mockResolvedValue(null);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors');
      const response = await (0, _route2.GET)(request);
      (0, _vitest.expect)(response.status).toBe(401);
    });
    (0, _vitest.it)('should return list of doctors', async () => {
      const mockDoctors = [{
        id: '1',
        name: 'Dr. Smith',
        specialization: 'Cardiology'
      }, {
        id: '2',
        name: 'Dr. Jones',
        specialization: 'Neurology'
      }];
      mockPrisma.user.findMany.mockResolvedValue(mockDoctors);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors');
      const response = await (0, _route2.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockDoctors);
    });
    (0, _vitest.it)('should handle pagination', async () => {
      const mockDoctors = [{
        id: '1',
        name: 'Dr. Smith'
      }];
      mockPrisma.user.findMany.mockResolvedValue(mockDoctors);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors?page=2&limit=10');
      const response = await (0, _route2.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(mockPrisma.user.findMany).toHaveBeenCalledWith(_vitest.expect.objectContaining({
        skip: 10,
        take: 10
      }));
    });
  });
  (0, _vitest.describe)('GET /api/doctors/search', () => {
    (0, _vitest.it)('should return matching doctors', async () => {
      const mockDoctors = [{
        id: '1',
        name: 'Dr. Smith',
        specialization: 'Cardiology'
      }];
      mockPrisma.user.findMany.mockResolvedValue(mockDoctors);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/search?q=smith');
      const response = await (0, _route3.GET)(request);
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockDoctors);
    });
    (0, _vitest.it)('should filter by specialization', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/search?specialization=cardiology');
      await (0, _route3.GET)(request);
      (0, _vitest.expect)(mockPrisma.user.findMany).toHaveBeenCalledWith(_vitest.expect.objectContaining({
        where: _vitest.expect.objectContaining({
          specialization: 'cardiology'
        })
      }));
    });
  });
  (0, _vitest.describe)('GET /api/doctors/[id]', () => {
    (0, _vitest.it)('should return doctor data for valid ID', async () => {
      const mockDoctor = {
        id: '1',
        name: 'Dr. Smith',
        specialization: 'Cardiology'
      };
      mockPrisma.user.findUnique.mockResolvedValue(mockDoctor);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/1');
      const response = await (0, _route.GET)(request, {
        params: {
          id: '1'
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockDoctor);
    });
    (0, _vitest.it)('should return 404 for non-existent doctor', async () => {
      ;
      mockPrisma.user.findUnique.mockResolvedValue(null);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/999');
      const response = await (0, _route.GET)(request, {
        params: {
          id: '999'
        }
      });
      (0, _vitest.expect)(response.status).toBe(404);
    });
  });
  (0, _vitest.describe)('PUT /api/doctors/[id]', () => {
    (0, _vitest.it)('should update doctor profile', async () => {
      const mockDoctor = {
        id: '1',
        name: 'Dr. Smith Updated',
        specialization: 'Neurology'
      };
      mockPrisma.user.update.mockResolvedValue(mockDoctor);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/1', {
        method: 'PUT',
        body: JSON.stringify({
          name: 'Dr. Smith Updated',
          specialization: 'Neurology'
        })
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: '1'
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data.name).toBe('Dr. Smith Updated');
      (0, _vitest.expect)(data.specialization).toBe('Neurology');
    });
    (0, _vitest.it)('should validate required fields', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/1', {
        method: 'PUT',
        body: JSON.stringify({})
      });
      const response = await (0, _route.PUT)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(400);
    });
  });
  (0, _vitest.describe)('PUT /api/doctors/[id]/availability', () => {
    (0, _vitest.it)('should update doctor availability', async () => {
      const mockAvailability = {
        id: '1',
        doctorId: '1',
        dayOfWeek: 'MONDAY',
        startTime: '09:00',
        endTime: '17:00'
      };
      mockPrisma.availability.upsert.mockResolvedValue(mockAvailability);
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/1/availability', {
        method: 'PUT',
        body: JSON.stringify({
          dayOfWeek: 'MONDAY',
          startTime: '09:00',
          endTime: '17:00'
        })
      });
      const response = await (0, _route4.PUT)(request, {
        params: {
          id: '1'
        }
      });
      const data = await response.json();
      (0, _vitest.expect)(response.status).toBe(200);
      (0, _vitest.expect)(data).toEqual(mockAvailability);
    });
    (0, _vitest.it)('should validate time format', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/1/availability', {
        method: 'PUT',
        body: JSON.stringify({
          dayOfWeek: 'MONDAY',
          startTime: 'invalid',
          endTime: 'invalid'
        })
      });
      const response = await (0, _route4.PUT)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(400);
    });
    (0, _vitest.it)('should validate day of week', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/1/availability', {
        method: 'PUT',
        body: JSON.stringify({
          dayOfWeek: 'INVALID_DAY',
          startTime: '09:00',
          endTime: '17:00'
        })
      });
      const response = await (0, _route4.PUT)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(400);
    });
    (0, _vitest.it)('should validate time range', async () => {
      const request = new _server.NextRequest('http://localhost:3000/api/doctors/1/availability', {
        method: 'PUT',
        body: JSON.stringify({
          dayOfWeek: 'MONDAY',
          startTime: '17:00',
          endTime: '09:00'
        })
      });
      const response = await (0, _route4.PUT)(request, {
        params: {
          id: '1'
        }
      });
      (0, _vitest.expect)(response.status).toBe(400);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,