07b6c4810f57c7c7557a0dd7efb41647
"use strict";

// Mock axios for API calls
_getJestObj().mock('axios');
// Mock notification service
_getJestObj().mock('@/services/notificationService', () => ({
  sendNotification: jest.fn().mockResolvedValue({
    success: true
  })
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _appointmentService = require("@/services/appointmentService");
var _Appointment = require("@/types/Appointment");
var _testDbHelper = require("@/utils/testDbHelper");
var _axios = _interopRequireDefault(require("axios"));
var _notificationService = require("@/services/notificationService");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const mockedAxios = _axios.default;
describe('Appointment Service', () => {
  // Sample appointment data
  const mockAppointment = {
    patientId: '123',
    doctorId: '456',
    date: new Date('2025-04-15T10:00:00'),
    duration: 30,
    status: _Appointment.AppointmentStatus.SCHEDULED,
    reason: 'Regular checkup',
    notes: 'First-time patient'
  };
  const mockAppointmentResponse = _objectSpread(_objectSpread({}, mockAppointment), {}, {
    id: 'appt-789',
    createdAt: new Date('2025-04-01T12:00:00'),
    updatedAt: new Date('2025-04-01T12:00:00')
  });

  // Setup and teardown for MongoDB-dependent tests
  beforeAll(async () => {
    await (0, _testDbHelper.setupTestDB)();
  });
  afterEach(async () => {
    await (0, _testDbHelper.clearTestDB)();
    jest.clearAllMocks();
  });
  afterAll(async () => {
    await (0, _testDbHelper.closeTestDB)();
  });

  // Tests for createAppointment
  describe('createAppointment', () => {
    it('should create a new appointment successfully', async () => {
      mockedAxios.post.mockResolvedValueOnce({
        data: mockAppointmentResponse
      });
      const result = await (0, _appointmentService.createAppointment)(mockAppointment);
      expect(mockedAxios.post).toHaveBeenCalledWith('/api/appointments', mockAppointment);
      expect(result).toEqual({
        success: true,
        appointment: mockAppointmentResponse
      });
    });
    it('should validate required fields before creating appointment', async () => {
      // Missing required fields
      const invalidAppointment = {
        patientId: '123',
        // Missing doctorId and date
        duration: 30
      };
      const result = await (0, _appointmentService.createAppointment)(invalidAppointment);
      expect(mockedAxios.post).not.toHaveBeenCalled();
      expect(result).toEqual({
        success: false,
        error: expect.stringContaining('required')
      });
    });
    it('should handle API errors when creating appointment', async () => {
      const errorResponse = {
        response: {
          data: {
            message: 'Doctor is not available at the requested time'
          },
          status: 400
        }
      };
      mockedAxios.post.mockRejectedValueOnce(errorResponse);
      const result = await (0, _appointmentService.createAppointment)(mockAppointment);
      expect(mockedAxios.post).toHaveBeenCalledWith('/api/appointments', mockAppointment);
      expect(result).toEqual({
        success: false,
        error: 'Doctor is not available at the requested time'
      });
    });
    it('should handle network errors gracefully', async () => {
      mockedAxios.post.mockRejectedValueOnce(new Error('Network error'));
      const result = await (0, _appointmentService.createAppointment)(mockAppointment);
      expect(result).toEqual({
        success: false,
        error: 'Failed to create appointment. Please try again.'
      });
    });
  });

  // Tests for getAppointments
  describe('getAppointments', () => {
    it('should fetch appointments for a patient', async () => {
      const mockAppointments = [mockAppointmentResponse];
      mockedAxios.get.mockResolvedValueOnce({
        data: mockAppointments
      });
      const result = await (0, _appointmentService.getAppointments)({
        patientId: '123'
      });
      expect(mockedAxios.get).toHaveBeenCalledWith('/api/appointments', {
        params: {
          patientId: '123'
        }
      });
      expect(result).toEqual({
        success: true,
        appointments: mockAppointments
      });
    });
    it('should fetch appointments for a doctor', async () => {
      const mockAppointments = [mockAppointmentResponse];
      mockedAxios.get.mockResolvedValueOnce({
        data: mockAppointments
      });
      const result = await (0, _appointmentService.getAppointments)({
        doctorId: '456'
      });
      expect(mockedAxios.get).toHaveBeenCalledWith('/api/appointments', {
        params: {
          doctorId: '456'
        }
      });
      expect(result).toEqual({
        success: true,
        appointments: mockAppointments
      });
    });
    it('should handle filtering by date range and status', async () => {
      const mockAppointments = [mockAppointmentResponse];
      const filters = {
        startDate: new Date('2025-04-01'),
        endDate: new Date('2025-04-30'),
        status: _Appointment.AppointmentStatus.SCHEDULED
      };
      mockedAxios.get.mockResolvedValueOnce({
        data: mockAppointments
      });
      const result = await (0, _appointmentService.getAppointments)(filters);
      expect(mockedAxios.get).toHaveBeenCalledWith('/api/appointments', {
        params: {
          startDate: filters.startDate.toISOString(),
          endDate: filters.endDate.toISOString(),
          status: filters.status
        }
      });
      expect(result).toEqual({
        success: true,
        appointments: mockAppointments
      });
    });
    it('should handle API errors when fetching appointments', async () => {
      mockedAxios.get.mockRejectedValueOnce({
        response: {
          data: {
            message: 'Unauthorized access'
          },
          status: 401
        }
      });
      const result = await (0, _appointmentService.getAppointments)({
        patientId: '123'
      });
      expect(result).toEqual({
        success: false,
        error: 'Unauthorized access',
        appointments: []
      });
    });
  });

  // Tests for getAppointmentById
  describe('getAppointmentById', () => {
    it('should fetch a single appointment by ID', async () => {
      mockedAxios.get.mockResolvedValueOnce({
        data: mockAppointmentResponse
      });
      const result = await (0, _appointmentService.getAppointmentById)('appt-789');
      expect(mockedAxios.get).toHaveBeenCalledWith('/api/appointments/appt-789');
      expect(result).toEqual({
        success: true,
        appointment: mockAppointmentResponse
      });
    });
    it('should handle appointment not found', async () => {
      mockedAxios.get.mockRejectedValueOnce({
        response: {
          data: {
            message: 'Appointment not found'
          },
          status: 404
        }
      });
      const result = await (0, _appointmentService.getAppointmentById)('nonexistent-id');
      expect(result).toEqual({
        success: false,
        error: 'Appointment not found'
      });
    });
  });

  // Tests for updateAppointmentStatus
  describe('updateAppointmentStatus', () => {
    it('should update appointment status successfully', async () => {
      const updatedAppointment = _objectSpread(_objectSpread({}, mockAppointmentResponse), {}, {
        status: _Appointment.AppointmentStatus.CONFIRMED,
        updatedAt: new Date('2025-04-02T09:00:00')
      });
      mockedAxios.patch.mockResolvedValueOnce({
        data: updatedAppointment
      });
      const result = await (0, _appointmentService.updateAppointmentStatus)('appt-789', _Appointment.AppointmentStatus.CONFIRMED);
      expect(mockedAxios.patch).toHaveBeenCalledWith('/api/appointments/appt-789/status', {
        status: _Appointment.AppointmentStatus.CONFIRMED
      });
      expect(result).toEqual({
        success: true,
        appointment: updatedAppointment
      });
    });
    it('should trigger notification when status is updated', async () => {
      const updatedAppointment = _objectSpread(_objectSpread({}, mockAppointmentResponse), {}, {
        status: _Appointment.AppointmentStatus.CONFIRMED,
        updatedAt: new Date('2025-04-02T09:00:00')
      });
      mockedAxios.patch.mockResolvedValueOnce({
        data: updatedAppointment
      });
      await (0, _appointmentService.updateAppointmentStatus)('appt-789', _Appointment.AppointmentStatus.CONFIRMED);

      // Check if notification service was called
      expect(_notificationService.sendNotification).toHaveBeenCalledWith(expect.objectContaining({
        recipientId: mockAppointment.patientId,
        type: 'APPOINTMENT_UPDATE',
        data: expect.objectContaining({
          appointmentId: 'appt-789',
          status: _Appointment.AppointmentStatus.CONFIRMED
        })
      }));
    });
    it('should handle validation errors when updating status', async () => {
      mockedAxios.patch.mockRejectedValueOnce({
        response: {
          data: {
            message: 'Invalid status transition'
          },
          status: 400
        }
      });
      const result = await (0, _appointmentService.updateAppointmentStatus)('appt-789', 'INVALID_STATUS');
      expect(result).toEqual({
        success: false,
        error: 'Invalid status transition'
      });
      expect(_notificationService.sendNotification).not.toHaveBeenCalled();
    });
  });

  // Tests for deleteAppointment
  describe('deleteAppointment', () => {
    it('should delete an appointment successfully', async () => {
      mockedAxios.delete.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      const result = await (0, _appointmentService.deleteAppointment)('appt-789');
      expect(mockedAxios.delete).toHaveBeenCalledWith('/api/appointments/appt-789');
      expect(result).toEqual({
        success: true
      });
    });
    it('should notify users about canceled appointments', async () => {
      // First, mock the get appointment response
      mockedAxios.get.mockResolvedValueOnce({
        data: mockAppointmentResponse
      });
      // Then, mock the delete response
      mockedAxios.delete.mockResolvedValueOnce({
        data: {
          success: true
        }
      });
      await (0, _appointmentService.deleteAppointment)('appt-789');

      // Check if notification service was called for cancellation
      expect(_notificationService.sendNotification).toHaveBeenCalledWith(expect.objectContaining({
        recipientId: mockAppointment.patientId,
        type: 'APPOINTMENT_CANCELLED',
        data: expect.objectContaining({
          appointmentId: 'appt-789'
        })
      }));
    });
    it('should handle unauthorized deletion attempts', async () => {
      mockedAxios.delete.mockRejectedValueOnce({
        response: {
          data: {
            message: 'Unauthorized to delete this appointment'
          },
          status: 403
        }
      });
      const result = await (0, _appointmentService.deleteAppointment)('appt-789');
      expect(result).toEqual({
        success: false,
        error: 'Unauthorized to delete this appointment'
      });
    });
  });

  // Tests for sendAppointmentNotification
  describe('sendAppointmentNotification', () => {
    it('should send reminder notifications successfully', async () => {
      // Implementation of sendNotification already mocked at the top
      const notificationResult = await (0, _appointmentService.sendAppointmentNotification)({
        appointmentId: 'appt-789',
        recipientId: '123',
        message: 'Your appointment is tomorrow',
        type: 'REMINDER'
      });
      expect(_notificationService.sendNotification).toHaveBeenCalledWith({
        recipientId: '123',
        type: 'APPOINTMENT_REMINDER',
        title: 'Appointment Reminder',
        message: 'Your appointment is tomorrow',
        data: {
          appointmentId: 'appt-789',
          type: 'REMINDER'
        }
      });
      expect(notificationResult).toEqual({
        success: true
      });
    });
    it('should handle notification failures', async () => {
      // Override the mock implementation for this specific test
      _notificationService.sendNotification.mockResolvedValueOnce({
        success: false,
        error: 'Failed to deliver notification'
      });
      const notificationResult = await (0, _appointmentService.sendAppointmentNotification)({
        appointmentId: 'appt-789',
        recipientId: '123',
        message: 'Your appointment is tomorrow',
        type: 'REMINDER'
      });
      expect(notificationResult).toEqual({
        success: false,
        error: 'Failed to deliver notification'
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,